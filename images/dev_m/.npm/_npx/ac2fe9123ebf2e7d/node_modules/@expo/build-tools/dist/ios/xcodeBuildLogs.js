"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findXcodeBuildLogsPathAsync = exports.findAndUploadXcodeBuildLogsAsync = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const context_1 = require("../context");
async function findAndUploadXcodeBuildLogsAsync(ctx) {
    try {
        const xcodeBuildLogsPath = await findXcodeBuildLogsPathAsync(ctx.buildLogsDirectory);
        if (xcodeBuildLogsPath) {
            await ctx.uploadArtifacts(context_1.ArtifactType.XCODE_BUILD_LOGS, [xcodeBuildLogsPath], ctx.logger);
        }
    }
    catch (err) {
        ctx.logger.debug({ err }, 'Failed to upload Xcode build logs');
    }
}
exports.findAndUploadXcodeBuildLogsAsync = findAndUploadXcodeBuildLogsAsync;
async function findXcodeBuildLogsPathAsync(buildLogsDirectory) {
    var _a, _b;
    const customLogPaths = (await (0, fast_glob_1.default)('*.log', { cwd: buildLogsDirectory })).map((filename) => path_1.default.join(buildLogsDirectory, filename));
    if (customLogPaths[0]) {
        return customLogPaths[0];
    }
    const fallbackLogPaths = (await (0, fast_glob_1.default)('Library/Logs/gym/*.log', { cwd: os_1.default.homedir() })).map((relativePath) => path_1.default.join(os_1.default.homedir(), relativePath));
    return (_b = (_a = customLogPaths[0]) !== null && _a !== void 0 ? _a : fallbackLogPaths[0]) !== null && _b !== void 0 ? _b : undefined;
}
exports.findXcodeBuildLogsPathAsync = findXcodeBuildLogsPathAsync;
//# sourceMappingURL=xcodeBuildLogs.js.map