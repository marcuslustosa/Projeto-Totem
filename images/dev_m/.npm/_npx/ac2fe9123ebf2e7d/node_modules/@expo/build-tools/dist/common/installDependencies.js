"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependenciesAsync = void 0;
const path_1 = __importDefault(require("path"));
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const packageManager_1 = require("../utils/packageManager");
const project_1 = require("../utils/project");
async function installDependenciesAsync(ctx) {
    const packagerRunDir = (0, packageManager_1.findPackagerRootDir)(ctx.reactNativeProjectDirectory);
    if (packagerRunDir !== ctx.reactNativeProjectDirectory) {
        const relativeReactNativeProjectDirectory = path_1.default.relative(ctx.buildDirectory, ctx.reactNativeProjectDirectory);
        ctx.logger.info(`We detected that '${relativeReactNativeProjectDirectory}' is a ${ctx.packageManager} workspace`);
    }
    const relativePackagerRunDir = path_1.default.relative(ctx.buildDirectory, packagerRunDir);
    let args = ['install'];
    if (ctx.packageManager === packageManager_1.PackageManager.PNPM) {
        args = ['install', '--no-frozen-lockfile'];
    }
    else if (ctx.packageManager === packageManager_1.PackageManager.YARN) {
        const isYarn2 = await (0, project_1.isUsingYarn2)(ctx.reactNativeProjectDirectory);
        if (isYarn2) {
            args = ['install', '--no-immutable'];
        }
    }
    ctx.logger.info(`Running "${ctx.packageManager} ${args.join(' ')}" in ${relativePackagerRunDir
        ? `directory '${relativePackagerRunDir}'`
        : 'the root dir of your repository'} `);
    await (0, turtle_spawn_1.default)(ctx.packageManager, args, {
        cwd: packagerRunDir,
        logger: ctx.logger,
        env: ctx.env,
    });
}
exports.installDependenciesAsync = installDependenciesAsync;
//# sourceMappingURL=installDependencies.js.map