{"version":3,"file":"expoUpdates.js","sourceRoot":"","sources":["../../src/android/expoUpdates.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport fs from 'fs-extra';\nimport { AndroidConfig, XML } from '@expo/config-plugins';\nimport { Job } from '@expo/eas-build-job';\n\nimport { BuildContext } from '../context';\n\nexport enum AndroidMetadataName {\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n}\n\nexport async function androidSetRuntimeVersionNativelyAsync(\n  ctx: BuildContext<Job>,\n  runtimeVersion: string\n): Promise<void> {\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n\n  if (!(await fs.pathExists(manifestPath))) {\n    throw new Error(`Couldn't find Android manifest at ${manifestPath}`);\n  }\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  const mainApp = AndroidConfig.Manifest.getMainApplicationOrThrow(androidManifest);\n  AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n    mainApp,\n    AndroidMetadataName.RUNTIME_VERSION,\n    runtimeVersion,\n    'value'\n  );\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(manifestPath, androidManifest);\n}\n\nexport async function androidSetChannelNativelyAsync(ctx: BuildContext<Job>): Promise<void> {\n  assert(ctx.job.updates?.channel, 'updates.channel must be defined');\n\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n\n  if (!(await fs.pathExists(manifestPath))) {\n    throw new Error(`Couldn't find Android manifest at ${manifestPath}`);\n  }\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  const mainApp = AndroidConfig.Manifest.getMainApplicationOrThrow(androidManifest);\n  const stringifiedUpdatesRequestHeaders = AndroidConfig.Manifest.getMainApplicationMetaDataValue(\n    androidManifest,\n    AndroidMetadataName.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\n  );\n  AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n    mainApp,\n    AndroidMetadataName.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY,\n    JSON.stringify({\n      ...JSON.parse(stringifiedUpdatesRequestHeaders ?? '{}'),\n      'expo-channel-name': ctx.job.updates.channel,\n    }),\n    'value'\n  );\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(manifestPath, androidManifest);\n}\n\nexport async function androidGetNativelyDefinedChannelAsync(\n  ctx: BuildContext<Job>\n): Promise<string | null> {\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n\n  if (!(await fs.pathExists(manifestPath))) {\n    return null;\n  }\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  const stringifiedUpdatesRequestHeaders = AndroidConfig.Manifest.getMainApplicationMetaDataValue(\n    androidManifest,\n    AndroidMetadataName.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\n  );\n  try {\n    const updatesRequestHeaders = JSON.parse(stringifiedUpdatesRequestHeaders ?? '{}');\n    return updatesRequestHeaders['expo-channel-name'] ?? null;\n  } catch (err: any) {\n    throw new Error(\n      `Failed to parse ${AndroidMetadataName.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY} from AndroidManifest.xml: ${err.message}`\n    );\n  }\n}\n\nexport async function androidSetClassicReleaseChannelNativelyAsync(\n  ctx: BuildContext<Job>\n): Promise<void> {\n  const { releaseChannel } = ctx.job;\n  assert(releaseChannel, 'releaseChannel must be defined');\n  const escapedReleaseChannel = XML.escapeAndroidString(releaseChannel);\n\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n  if (!(await fs.pathExists(manifestPath))) {\n    throw new Error(`Couldn't find Android manifest at ${manifestPath}`);\n  }\n\n  // Store the release channel in a string resource to ensure it is interpreted as a string\n  const stringResourcePath = await AndroidConfig.Strings.getProjectStringsXMLPathAsync(\n    ctx.reactNativeProjectDirectory\n  );\n  const stringResourceObject = await AndroidConfig.Resources.readResourcesXMLAsync({\n    path: stringResourcePath,\n  });\n\n  const resourceName = 'release_channel';\n  const releaseChannelResourceItem = AndroidConfig.Resources.buildResourceItem({\n    name: resourceName,\n    value: escapedReleaseChannel,\n  });\n  const newStringResourceObject = AndroidConfig.Strings.setStringItem(\n    [releaseChannelResourceItem],\n    stringResourceObject\n  );\n  await XML.writeXMLAsync({ path: stringResourcePath, xml: newStringResourceObject });\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  const mainApp = AndroidConfig.Manifest.getMainApplicationOrThrow(androidManifest);\n  AndroidConfig.Manifest.addMetaDataItemToMainApplication(\n    mainApp,\n    AndroidMetadataName.RELEASE_CHANNEL,\n    `@string/${resourceName}`,\n    'value'\n  );\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(manifestPath, androidManifest);\n}\n\nexport async function androidGetNativelyDefinedClassicReleaseChannelAsync(\n  ctx: BuildContext<Job>\n): Promise<string | null> {\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n  if (!(await fs.pathExists(manifestPath))) {\n    return null;\n  }\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  return AndroidConfig.Manifest.getMainApplicationMetaDataValue(\n    androidManifest,\n    AndroidMetadataName.RELEASE_CHANNEL\n  );\n}\n\nexport async function androidGetNativelyDefinedRuntimeVersionAsync(\n  ctx: BuildContext<Job>\n): Promise<string | null> {\n  const manifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(\n    ctx.reactNativeProjectDirectory\n  );\n  if (!(await fs.pathExists(manifestPath))) {\n    return null;\n  }\n\n  const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(manifestPath);\n  return AndroidConfig.Manifest.getMainApplicationMetaDataValue(\n    androidManifest,\n    AndroidMetadataName.RUNTIME_VERSION\n  );\n}\n"]}