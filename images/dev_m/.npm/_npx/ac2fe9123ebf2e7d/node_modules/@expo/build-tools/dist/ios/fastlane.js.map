{"version":3,"file":"fastlane.js","sourceRoot":"","sources":["../../src/ios/fastlane.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { Ios } from '@expo/eas-build-job';\nimport { bunyan } from '@expo/logger';\nimport spawn, { SpawnResult } from '@expo/turtle-spawn';\nimport fs from 'fs-extra';\nimport nullthrows from 'nullthrows';\n\nimport { BuildContext, SkipNativeBuildError } from '../context';\n\nimport { createGymfileForArchiveBuild, createGymfileForSimulatorBuild } from './gymfile';\nimport { Credentials } from './credentials/manager';\nimport { XcodeBuildLogger } from './xcpretty';\nimport { isTVOS } from './tvos';\nimport { createFastfileForResigningBuild } from './fastfile';\n\nexport async function runFastlaneGym<TJob extends Ios.Job>(\n  ctx: BuildContext<TJob>,\n  {\n    scheme,\n    buildConfiguration,\n    credentials,\n    entitlements,\n  }: {\n    scheme: string;\n    buildConfiguration?: string;\n    credentials: Credentials | null;\n    entitlements: object | null;\n  }\n): Promise<void> {\n  await ensureGymfileExists(ctx, {\n    scheme,\n    buildConfiguration,\n    credentials,\n    logsDirectory: ctx.buildLogsDirectory,\n    entitlements,\n  });\n  if (ctx.skipNativeBuild) {\n    throw new SkipNativeBuildError('Skipping fastlane build');\n  }\n  const buildLogger = new XcodeBuildLogger(ctx.logger, ctx.reactNativeProjectDirectory);\n  void buildLogger.watchLogFiles(ctx.buildLogsDirectory);\n  try {\n    await runFastlane(['gym'], {\n      cwd: path.join(ctx.reactNativeProjectDirectory, 'ios'),\n      logger: ctx.logger,\n      env: ctx.env,\n    });\n  } finally {\n    await buildLogger.flush();\n  }\n}\n\nexport async function runFastlaneResign<TJob extends Ios.Job>(\n  ctx: BuildContext<TJob>,\n  { credentials, ipaPath }: { credentials: Credentials; ipaPath: string }\n): Promise<void> {\n  const { certificateCommonName } = credentials.applicationTargetProvisioningProfile.data;\n\n  const fastlaneDirPath = path.join(ctx.buildDirectory, 'fastlane');\n  await fs.ensureDir(fastlaneDirPath);\n  const fastfilePath = path.join(fastlaneDirPath, 'Fastfile');\n  await createFastfileForResigningBuild({\n    outputFile: fastfilePath,\n    ipaPath,\n    keychainPath: credentials.keychainPath,\n    signingIdentity: certificateCommonName,\n    targetProvisioningProfiles: credentials.targetProvisioningProfiles,\n  });\n\n  await runFastlane(['do_resign'], {\n    cwd: ctx.buildDirectory,\n    logger: ctx.logger,\n    env: ctx.env,\n  });\n}\n\nexport async function runFastlane(\n  fastlaneArgs: string[],\n  {\n    logger,\n    env,\n    cwd,\n  }: {\n    logger?: bunyan;\n    env?: Record<string, string>;\n    cwd?: string;\n  } = {}\n): Promise<SpawnResult> {\n  const fastlaneEnvVars = {\n    FASTLANE_DISABLE_COLORS: '1',\n    FASTLANE_SKIP_UPDATE_CHECK: '1',\n    SKIP_SLOW_FASTLANE_WARNING: 'true',\n    FASTLANE_HIDE_TIMESTAMP: 'true',\n    LC_ALL: 'en_US.UTF-8',\n    ...(env ?? process.env),\n  };\n  return await spawn('fastlane', fastlaneArgs, {\n    env: fastlaneEnvVars,\n    logger,\n    cwd,\n  });\n}\n\nasync function ensureGymfileExists<TJob extends Ios.Job>(\n  ctx: BuildContext<TJob>,\n  {\n    scheme,\n    buildConfiguration,\n    credentials,\n    logsDirectory,\n    entitlements,\n  }: {\n    scheme: string;\n    buildConfiguration?: string;\n    credentials: Credentials | null;\n    logsDirectory: string;\n    entitlements: object | null;\n  }\n): Promise<void> {\n  const gymfilePath = path.join(ctx.reactNativeProjectDirectory, 'ios/Gymfile');\n\n  if (await fs.pathExists(gymfilePath)) {\n    ctx.logger.info('Gymfile already exists');\n    return;\n  }\n\n  ctx.logger.info('Creating Gymfile');\n  if (ctx.job.simulator) {\n    const isTV = await isTVOS(ctx);\n    const simulatorDestination = `generic/platform=${isTV ? 'tvOS' : 'iOS'} Simulator`;\n\n    await createGymfileForSimulatorBuild({\n      outputFile: gymfilePath,\n      scheme,\n      buildConfiguration: buildConfiguration ?? 'release',\n      derivedDataPath: './build',\n      clean: false,\n      logsDirectory,\n      simulatorDestination,\n    });\n  } else {\n    await createGymfileForArchiveBuild({\n      outputFile: gymfilePath,\n      credentials: nullthrows(credentials, 'credentials must exist for non-simulator builds'),\n      scheme,\n      buildConfiguration,\n      outputDirectory: './build',\n      clean: false,\n      logsDirectory,\n      entitlements: entitlements ?? undefined,\n    });\n  }\n\n  ctx.logger.info('Gymfile created');\n}\n"]}