{"version":3,"file":"detectError.js","sourceRoot":"","sources":["../../src/buildErrors/detectError.ts"],"names":[],"mappings":";;;;;;AAAA,uDAAyD;AACzD,wDAA0B;AAE1B,0DAAoE;AAEpE,iDAA+E;AAC/E,2DAAwD;AACxD,6DAA0D;AAE1D,KAAK,UAAU,uBAAuB,CACpC,KAAiB,EACjB,kBAA0B;IAE1B,IAAI,KAAK,KAAK,0BAAU,CAAC,YAAY,EAAE;QACrC,OAAO;KACR;IAED,IAAI;QACF,MAAM,kBAAkB,GAAG,MAAM,IAAA,4CAA2B,EAAC,kBAAkB,CAAC,CAAC;QAEjF,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO;SACR;QAED,OAAO,MAAM,kBAAE,CAAC,QAAQ,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;KACvD;IAAC,OAAO,GAAQ,EAAE;QACjB,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAED,SAAS,YAAY,CACnB,aAAqC,EACrC,QAAkB,EAClB,YAA0B,EAC1B,cAAuB;IAEvB,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,YAAY,CAAC;IACpC,MAAM,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC;IACzB,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,MAAM,QAAQ,GAAG,aAAa;SAC3B,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;SACvE,MAAM,CACL,CAAC,OAAO,EAAE,EAAE,CACV,CAAC,OAAO,CAAC,KAAK,KAAK,gCAAiB,IAAI,KAAK,KAAK,0BAAU,CAAC,YAAY,CAAC;QAC1E,OAAO,CAAC,KAAK,KAAK,KAAK;QACvB,CAAC,OAAO,CAAC,KAAK,CACjB,CAAC;IAEJ,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;QAC9B,MAAM,MAAM,GACV,OAAO,OAAO,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;QACvF,IAAI,CAAC,MAAM,EAAE;YACX,SAAS;SACV;QACD,MAAM,KAAK,GACT,OAAO,CAAC,KAAK,KAAK,gCAAiB,CAAC,CAAC,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAE3F,IAAI,KAAK,EAAE;YACT,OAAO,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;SACjD;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,2BAA2B,CAC/C,KAAU,EACV,QAAkB,EAClB,YAA0B,EAC1B,kBAA0B;;IAE1B,MAAM,EAAE,KAAK,EAAE,GAAG,YAAY,CAAC;IAC/B,IAAI,KAAK,YAAY,sBAAM,CAAC,UAAU,EAAE;QACtC,OAAO,KAAK,CAAC;KACd;IACD,MAAM,cAAc,GAAG,MAAM,uBAAuB,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;IAChF,MAAM,eAAe,GACnB,KAAK,YAAY,sBAAM,CAAC,eAAe;QACrC,CAAC,CAAC,KAAK;QACP,CAAC,CAAC,MAAA,YAAY,CAAC,qCAAiB,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,mCACvE,IAAI,sBAAM,CAAC,YAAY,EAAE,CAAC;IAChC,MAAM,UAAU,GAAG,YAAY,CAAC,uCAAkB,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IAE5F,MAAM,kBAAkB,GACtB,CAAC,eAAe;QACf;YACC,sBAAM,CAAC,SAAS,CAAC,aAAa;YAC9B,sBAAM,CAAC,SAAS,CAAC,oBAAoB;YACrC,sBAAM,CAAC,SAAS,CAAC,sBAAsB;SAC3B,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IACrD,MAAM,OAAO,GACX,MAAA,CAAC,kBAAkB,CAAC,CAAC,CAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,mCAAI,eAAe,CAAC,OAAO,CAAC;IAClG,MAAM,SAAS,GACb,MAAA,CAAC,kBAAkB,CAAC,CAAC,CAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS,CAAC,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,mCACxE,eAAe,CAAC,SAAS,CAAC;IAE5B,OAAO,IAAI,sBAAM,CAAC,UAAU,CAAC,OAAO,EAAE;QACpC,SAAS;QACT,mBAAmB,EAAE,eAAe,CAAC,SAAS;QAC9C,iBAAiB,EAAE,eAAe,CAAC,OAAO;QAC1C,OAAO,EAAE,eAAe,CAAC,OAAO;QAChC,UAAU,EAAE,KAAK;QACjB,UAAU,EAAE,KAAK;KAClB,CAAC,CAAC;AACL,CAAC;AAvCD,kEAuCC","sourcesContent":["import { BuildPhase, errors } from '@expo/eas-build-job';\nimport fs from 'fs-extra';\n\nimport { findXcodeBuildLogsPathAsync } from '../ios/xcodeBuildLogs';\n\nimport { ErrorContext, ErrorHandler, XCODE_BUILD_PHASE } from './errors.types';\nimport { userErrorHandlers } from './userErrorHandlers';\nimport { buildErrorHandlers } from './buildErrorHandlers';\n\nasync function maybeReadXcodeBuildLogs(\n  phase: BuildPhase,\n  buildLogsDirectory: string\n): Promise<string | undefined> {\n  if (phase !== BuildPhase.RUN_FASTLANE) {\n    return;\n  }\n\n  try {\n    const xcodeBuildLogsPath = await findXcodeBuildLogsPathAsync(buildLogsDirectory);\n\n    if (!xcodeBuildLogsPath) {\n      return;\n    }\n\n    return await fs.readFile(xcodeBuildLogsPath, 'utf-8');\n  } catch (err: any) {\n    return undefined;\n  }\n}\n\nfunction resolveError<TError extends Error>(\n  errorHandlers: ErrorHandler<TError>[],\n  logLines: string[],\n  errorContext: ErrorContext,\n  xcodeBuildLogs?: string\n): TError | undefined {\n  const { job, phase } = errorContext;\n  const { platform } = job;\n  const logs = logLines.join('\\n');\n  const handlers = errorHandlers\n    .filter((handler) => handler.platform === platform || !handler.platform)\n    .filter(\n      (handler) =>\n        (handler.phase === XCODE_BUILD_PHASE && phase === BuildPhase.RUN_FASTLANE) ||\n        handler.phase === phase ||\n        !handler.phase\n    );\n\n  for (const handler of handlers) {\n    const regexp =\n      typeof handler.regexp === 'function' ? handler.regexp(errorContext) : handler.regexp;\n    if (!regexp) {\n      continue;\n    }\n    const match =\n      handler.phase === XCODE_BUILD_PHASE ? xcodeBuildLogs?.match(regexp) : logs.match(regexp);\n\n    if (match) {\n      return handler.createError(match, errorContext);\n    }\n  }\n  return undefined;\n}\n\nexport async function resolveBuildPhaseErrorAsync(\n  error: any,\n  logLines: string[],\n  errorContext: ErrorContext,\n  buildLogsDirectory: string\n): Promise<errors.BuildError> {\n  const { phase } = errorContext;\n  if (error instanceof errors.BuildError) {\n    return error;\n  }\n  const xcodeBuildLogs = await maybeReadXcodeBuildLogs(phase, buildLogsDirectory);\n  const userFacingError =\n    error instanceof errors.UserFacingError\n      ? error\n      : resolveError(userErrorHandlers, logLines, errorContext, xcodeBuildLogs) ??\n        new errors.UnknownError();\n  const buildError = resolveError(buildErrorHandlers, logLines, errorContext, xcodeBuildLogs);\n\n  const isUnknownUserError =\n    !userFacingError ||\n    ([\n      errors.ErrorCode.UNKNOWN_ERROR,\n      errors.ErrorCode.UNKNOWN_GRADLE_ERROR,\n      errors.ErrorCode.UNKNOWN_FASTLANE_ERROR,\n    ] as string[]).includes(userFacingError.errorCode);\n  const message =\n    (isUnknownUserError ? buildError?.message : userFacingError.message) ?? userFacingError.message;\n  const errorCode =\n    (isUnknownUserError ? buildError?.errorCode : userFacingError.errorCode) ??\n    userFacingError.errorCode;\n\n  return new errors.BuildError(message, {\n    errorCode,\n    userFacingErrorCode: userFacingError.errorCode,\n    userFacingMessage: userFacingError.message,\n    docsUrl: userFacingError.docsUrl,\n    innerError: error,\n    buildPhase: phase,\n  });\n}\n"]}