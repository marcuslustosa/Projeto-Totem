"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runHookIfPresent = exports.Hook = void 0;
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const packageManager_1 = require("./packageManager");
const project_1 = require("./project");
var Hook;
(function (Hook) {
    Hook["PRE_INSTALL"] = "eas-build-pre-install";
    Hook["POST_INSTALL"] = "eas-build-post-install";
    /**
     * @deprecated
     */
    Hook["PRE_UPLOAD_ARTIFACTS"] = "eas-build-pre-upload-artifacts";
    Hook["ON_BUILD_SUCCESS"] = "eas-build-on-success";
    Hook["ON_BUILD_ERROR"] = "eas-build-on-error";
    Hook["ON_BUILD_COMPLETE"] = "eas-build-on-complete";
})(Hook = exports.Hook || (exports.Hook = {}));
async function runHookIfPresent(ctx, hook, { extraEnvs } = {}) {
    var _a;
    const projectDir = ctx.reactNativeProjectDirectory;
    const packageJson = (0, project_1.readPackageJson)(projectDir);
    if ((_a = packageJson.scripts) === null || _a === void 0 ? void 0 : _a[hook]) {
        ctx.logger.info(`Script '${hook}' is present in package.json, running it...`);
        // when using yarn 2, it's not possible to run any scripts before running 'yarn install'
        // use 'npm' in that case
        const packageManager = (await (0, project_1.isUsingYarn2)(projectDir)) && hook === Hook.PRE_INSTALL
            ? packageManager_1.PackageManager.NPM
            : ctx.packageManager;
        await (0, turtle_spawn_1.default)(packageManager, ['run', hook], {
            cwd: projectDir,
            logger: ctx.logger,
            env: Object.assign(Object.assign({}, ctx.env), extraEnvs),
        });
    }
}
exports.runHookIfPresent = runHookIfPresent;
//# sourceMappingURL=hooks.js.map