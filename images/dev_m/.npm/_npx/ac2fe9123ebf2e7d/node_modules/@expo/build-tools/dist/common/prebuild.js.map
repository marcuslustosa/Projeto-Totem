{"version":3,"file":"prebuild.js","sourceRoot":"","sources":["../../src/common/prebuild.ts"],"names":[],"mappings":";;;;;;AAEA,oDAA4B;AAG5B,8CAA6E;AAE7E,+DAAiE;AAM1D,KAAK,UAAU,aAAa,CACjC,GAAuB,EACvB,OAAyB;;IAEzB,MAAM,oBAAoB,GAAG,MAAA,GAAG,CAAC,GAAG,CAAC,kBAAkB,0CAAE,OAAO,CAAC;IACjE,MAAM,kBAAkB,GACtB,CAAC,oBAAoB,IAAI,gBAAM,CAAC,SAAS,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;IAE7E,MAAM,YAAY,GAAiB;QACjC,GAAG,EAAE,GAAG,CAAC,2BAA2B;QACpC,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,GAAG,gDACE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,yBAAyB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAC9D,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,GAClB,GAAG,CAAC,GAAG,CACX;KACF,CAAC;IAEF,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC;IACxD,MAAM,IAAA,2BAAiB,EAAC,GAAG,EAAE,mBAAmB,EAAE,YAAY,CAAC,CAAC;IAChE,MAAM,IAAA,8CAAwB,EAAC,GAAG,CAAC,CAAC;AACtC,CAAC;AArBD,sCAqBC;AAED,SAAS,sBAAsB,CAAmB,GAAuB;;IACvE,IAAI,eAAe,GACjB,MAAA,MAAA,GAAG,CAAC,GAAG,CAAC,YAAY,0CAAE,eAAe,mCACrC,sDAAsD,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC3E,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE;QAChD,eAAe,GAAG,GAAG,eAAe,eAAe,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;KACvE;IACD,MAAM,gBAAgB,GAAG,MAAM,CAAC;IAChC,MAAM,iBAAiB,GAAG,OAAO,CAAC;IAClC,MAAM,oBAAoB,GAAG,WAAW,CAAC;IACzC,IAAI,eAAe,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;QAChD,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;KAC7E;IACD,IAAI,eAAe,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;QACjD,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;KAC9E;IACD,IAAI,eAAe,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE;QACpD,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;KACjF;IACD,IAAI,CAAC,IAAA,gCAAsB,EAAC,GAAG,CAAC,EAAE;QAChC,eAAe,GAAG,eAAe,CAAC,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;KACrE;IACD,OAAO,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACpC,CAAC","sourcesContent":["import { Job } from '@expo/eas-build-job';\nimport { SpawnOptions } from '@expo/turtle-spawn';\nimport semver from 'semver';\n\nimport { BuildContext } from '../context';\nimport { runExpoCliCommand, shouldUseGlobalExpoCli } from '../utils/project';\n\nimport { installDependenciesAsync } from './installDependencies';\n\nexport interface PrebuildOptions {\n  extraEnvs?: Record<string, string>;\n}\n\nexport async function prebuildAsync<TJob extends Job>(\n  ctx: BuildContext<TJob>,\n  options?: PrebuildOptions\n): Promise<void> {\n  const customExpoCliVersion = ctx.job.builderEnvironment?.expoCli;\n  const shouldDisableSharp =\n    !customExpoCliVersion || semver.satisfies(customExpoCliVersion, '>=5.4.4');\n\n  const spawnOptions: SpawnOptions = {\n    cwd: ctx.reactNativeProjectDirectory,\n    logger: ctx.logger,\n    env: {\n      ...(shouldDisableSharp ? { EXPO_IMAGE_UTILS_NO_SHARP: '1' } : {}),\n      ...options?.extraEnvs,\n      ...ctx.env,\n    },\n  };\n\n  const prebuildCommandArgs = getPrebuildCommandArgs(ctx);\n  await runExpoCliCommand(ctx, prebuildCommandArgs, spawnOptions);\n  await installDependenciesAsync(ctx);\n}\n\nfunction getPrebuildCommandArgs<TJob extends Job>(ctx: BuildContext<TJob>): string[] {\n  let prebuildCommand =\n    ctx.job.experimental?.prebuildCommand ??\n    `prebuild --non-interactive --no-install --platform ${ctx.job.platform}`;\n  if (!prebuildCommand.match(/(?:--platform| -p)/)) {\n    prebuildCommand = `${prebuildCommand} --platform ${ctx.job.platform}`;\n  }\n  const npxCommandPrefix = 'npx ';\n  const expoCommandPrefix = 'expo ';\n  const expoCliCommandPrefix = 'expo-cli ';\n  if (prebuildCommand.startsWith(npxCommandPrefix)) {\n    prebuildCommand = prebuildCommand.substring(npxCommandPrefix.length).trim();\n  }\n  if (prebuildCommand.startsWith(expoCommandPrefix)) {\n    prebuildCommand = prebuildCommand.substring(expoCommandPrefix.length).trim();\n  }\n  if (prebuildCommand.startsWith(expoCliCommandPrefix)) {\n    prebuildCommand = prebuildCommand.substring(expoCliCommandPrefix.length).trim();\n  }\n  if (!shouldUseGlobalExpoCli(ctx)) {\n    prebuildCommand = prebuildCommand.replace(' --non-interactive', '');\n  }\n  return prebuildCommand.split(' ');\n}\n"]}