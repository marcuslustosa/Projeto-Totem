{"version":3,"file":"configure.js","sourceRoot":"","sources":["../../src/ios/configure.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAExB,yDAAiD;AAEjD,uDAA+B;AAC/B,wDAA0B;AAC1B,wDAAgC;AAMhC,KAAK,UAAU,qBAAqB,CAClC,GAA0B,EAC1B,EACE,WAAW,EACX,kBAAkB,GAInB;IAED,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IAC7C,MAAM,yBAAyB,CAAC,GAAG,EAAE;QACnC,WAAW;QACX,kBAAkB;KACnB,CAAC,CAAC;IACH,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC;IAC5B,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,MAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAA,EAAE;QAC/C,MAAM,mBAAmB,CAAC,GAAG,EAAE;YAC7B,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC;YAChE,kBAAkB;SACnB,CAAC,CAAC;KACJ;AACH,CAAC;AA8FQ,sDAAqB;AA5F9B,KAAK,UAAU,yBAAyB,CACtC,GAA0B,EAC1B,EACE,WAAW,EACX,kBAAkB,GAInB;IAED,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;IACxE,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,OAAO,GAAG,WAAW,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;QACnE,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,mCAAmC,OAAO,CAAC,IAAI,qBAAqB,OAAO,CAAC,MAAM,gBAAgB,UAAU,GAAG,CAChH,CAAC;QACF,0BAAS,CAAC,mBAAmB,CAAC,gCAAgC,CAC5D,GAAG,CAAC,2BAA2B,EAC/B;YACE,UAAU;YACV,WAAW,EAAE,OAAO,CAAC,IAAI;YACzB,WAAW,EAAE,OAAO,CAAC,MAAM;YAC3B,kBAAkB;SACnB,CACF,CAAC;KACH;AACH,CAAC;AAED,KAAK,UAAU,mBAAmB,CAChC,GAA0B,EAC1B,EACE,WAAW,EACX,kBAAkB,GAInB;;IAED,MAAM,OAAO,GAAG,0BAAS,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACjF,MAAM,MAAM,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;IAEjE,MAAM,cAAc,GAAa,EAAE,CAAC;IACpC,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,oBAAoB,GAAG,0BAAS,CAAC,MAAM,CAAC,kCAAkC,CAAC,OAAO,EAAE;YACxF,UAAU;YACV,kBAAkB;SACnB,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,oBAAoB,CAAC,aAAa,CAAC,cAAc,CAAC;QACpE,IAAI,SAAS,EAAE;YACb,MAAM,sBAAsB,GAAG,UAAU,CACvC,sBAAsB,CAAC,SAAS,EAAE;gBAChC,OAAO,EAAE,MAAM;aAChB,CAAC,CACH,CAAC;YACF,MAAM,YAAY,GAAG,cAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC;gBAC1D,CAAC,CAAC,sBAAsB;gBACxB,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC;YAC9C,cAAc,CAAC,IAAI,CAAC,cAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;SACnD;KACF;IACD,MAAM,oBAAoB,GAAG,IAAA,cAAI,EAAC,cAAc,CAAC,CAAC;IAClD,KAAK,MAAM,aAAa,IAAI,oBAAoB,EAAE;QAChD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,aAAa,EAAE,CAAC,CAAC;QACzD,MAAM,YAAY,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC/D,MAAM,SAAS,GAAG,eAAK,CAAC,KAAK,CAAC,YAAY,CAAwB,CAAC;QACnE,IAAI,MAAA,GAAG,CAAC,GAAG,CAAC,OAAO,0CAAE,WAAW,EAAE;YAChC,SAAS,CAAC,eAAe,GAAG,MAAA,GAAG,CAAC,GAAG,CAAC,OAAO,0CAAE,WAAW,CAAC;SAC1D;QACD,IAAI,MAAA,GAAG,CAAC,GAAG,CAAC,OAAO,0CAAE,UAAU,EAAE;YAC/B,SAAS,CAAC,0BAA0B,GAAG,MAAA,GAAG,CAAC,GAAG,CAAC,OAAO,0CAAE,UAAU,CAAC;SACpE;QACD,MAAM,kBAAE,CAAC,SAAS,CAAC,aAAa,EAAE,eAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;KAC3D;AACH,CAAC;AAED,SAAS,UAAU,CAAC,CAAS;IAC3B,OAAO,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,UAAU,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAED,SAAgB,sBAAsB,CAAC,CAAS,EAAE,aAAqC;IACrF,6GAA6G;IAC7G,MAAM,IAAI,qBAAQ,aAAa,CAAE,CAAC;IAClC,OAAO,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC9C,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,wDAWC","sourcesContent":["import path from 'path';\n\nimport { IOSConfig } from '@expo/config-plugins';\nimport { Ios } from '@expo/eas-build-job';\nimport uniq from 'lodash/uniq';\nimport fs from 'fs-extra';\nimport plist from '@expo/plist';\n\nimport { BuildContext } from '../context';\n\nimport { Credentials } from './credentials/manager';\n\nasync function configureXcodeProject(\n  ctx: BuildContext<Ios.Job>,\n  {\n    credentials,\n    buildConfiguration,\n  }: {\n    credentials: Credentials;\n    buildConfiguration: string;\n  }\n): Promise<void> {\n  ctx.logger.info('Configuring Xcode project');\n  await configureCredentialsAsync(ctx, {\n    credentials,\n    buildConfiguration,\n  });\n  const { version } = ctx.job;\n  if (version?.appVersion || version?.buildNumber) {\n    await updateVersionsAsync(ctx, {\n      targetNames: Object.keys(credentials.targetProvisioningProfiles),\n      buildConfiguration,\n    });\n  }\n}\n\nasync function configureCredentialsAsync(\n  ctx: BuildContext<Ios.Job>,\n  {\n    credentials,\n    buildConfiguration,\n  }: {\n    credentials: Credentials;\n    buildConfiguration: string;\n  }\n): Promise<void> {\n  const targetNames = Object.keys(credentials.targetProvisioningProfiles);\n  for (const targetName of targetNames) {\n    const profile = credentials.targetProvisioningProfiles[targetName];\n    ctx.logger.info(\n      `Assigning provisioning profile '${profile.name}' (Apple Team ID: ${profile.teamId}) to target '${targetName}'`\n    );\n    IOSConfig.ProvisioningProfile.setProvisioningProfileForPbxproj(\n      ctx.reactNativeProjectDirectory,\n      {\n        targetName,\n        profileName: profile.name,\n        appleTeamId: profile.teamId,\n        buildConfiguration,\n      }\n    );\n  }\n}\n\nasync function updateVersionsAsync(\n  ctx: BuildContext<Ios.Job>,\n  {\n    targetNames,\n    buildConfiguration,\n  }: {\n    targetNames: string[];\n    buildConfiguration: string;\n  }\n): Promise<void> {\n  const project = IOSConfig.XcodeUtils.getPbxproj(ctx.reactNativeProjectDirectory);\n  const iosDir = path.join(ctx.reactNativeProjectDirectory, 'ios');\n\n  const infoPlistPaths: string[] = [];\n  for (const targetName of targetNames) {\n    const xcBuildConfiguration = IOSConfig.Target.getXCBuildConfigurationFromPbxproj(project, {\n      targetName,\n      buildConfiguration,\n    });\n    const infoPlist = xcBuildConfiguration.buildSettings.INFOPLIST_FILE;\n    if (infoPlist) {\n      const evaluatedInfoPlistPath = trimQuotes(\n        evaluateTemplateString(infoPlist, {\n          SRCROOT: iosDir,\n        })\n      );\n      const absolutePath = path.isAbsolute(evaluatedInfoPlistPath)\n        ? evaluatedInfoPlistPath\n        : path.join(iosDir, evaluatedInfoPlistPath);\n      infoPlistPaths.push(path.normalize(absolutePath));\n    }\n  }\n  const uniqueInfoPlistPaths = uniq(infoPlistPaths);\n  for (const infoPlistPath of uniqueInfoPlistPaths) {\n    ctx.logger.info(`Updating versions in ${infoPlistPath}`);\n    const infoPlistRaw = await fs.readFile(infoPlistPath, 'utf-8');\n    const infoPlist = plist.parse(infoPlistRaw) as IOSConfig.InfoPlist;\n    if (ctx.job.version?.buildNumber) {\n      infoPlist.CFBundleVersion = ctx.job.version?.buildNumber;\n    }\n    if (ctx.job.version?.appVersion) {\n      infoPlist.CFBundleShortVersionString = ctx.job.version?.appVersion;\n    }\n    await fs.writeFile(infoPlistPath, plist.build(infoPlist));\n  }\n}\n\nfunction trimQuotes(s: string): string {\n  return s?.startsWith('\"') && s.endsWith('\"') ? s.slice(1, -1) : s;\n}\n\nexport function evaluateTemplateString(s: string, buildSettings: Record<string, string>): string {\n  // necessary because buildSettings might be XCBuildConfiguration['buildSettings'] which is not a plain object\n  const vars = { ...buildSettings };\n  return s.replace(/\\$\\((\\w+)\\)/g, (match, key) => {\n    if (vars.hasOwnProperty(key)) {\n      const value = String(vars[key]);\n      return trimQuotes(value);\n    } else {\n      return match;\n    }\n  });\n}\n\nexport { configureXcodeProject };\n"]}