{"version":3,"file":"packageManager.js","sourceRoot":"","sources":["../../src/utils/packageManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2EAA6D;AAE7D,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,6BAAW,CAAA;IACX,+BAAa,CAAA;AACf,CAAC,EAJW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAIzB;AAED,SAAgB,qBAAqB,CAAC,SAAiB;IACrD,IAAI;QACF,MAAM,OAAO,GAAG,mBAAmB,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QACrE,IAAI,OAAO,KAAK,KAAK,EAAE;YACrB,OAAO,cAAc,CAAC,GAAG,CAAC;SAC3B;aAAM,IAAI,OAAO,KAAK,MAAM,EAAE;YAC7B,OAAO,cAAc,CAAC,IAAI,CAAC;SAC5B;aAAM;YACL,OAAO,cAAc,CAAC,IAAI,CAAC;SAC5B;KACF;IAAC,WAAM;QACN,OAAO,cAAc,CAAC,IAAI,CAAC;KAC5B;AACH,CAAC;AAbD,sDAaC;AAED,SAAgB,mBAAmB,CAAC,UAAkB;;IACpD,OAAO,MAAA,mBAAmB,CAAC,iBAAiB,CAAC,UAAU,CAAC,mCAAI,UAAU,CAAC;AACzE,CAAC;AAFD,kDAEC","sourcesContent":["import * as PackageManagerUtils from '@expo/package-manager';\n\nexport enum PackageManager {\n  YARN = 'yarn',\n  NPM = 'npm',\n  PNPM = 'pnpm',\n}\n\nexport function resolvePackageManager(directory: string): PackageManager {\n  try {\n    const manager = PackageManagerUtils.resolvePackageManager(directory);\n    if (manager === 'npm') {\n      return PackageManager.NPM;\n    } else if (manager === 'pnpm') {\n      return PackageManager.PNPM;\n    } else {\n      return PackageManager.YARN;\n    }\n  } catch {\n    return PackageManager.YARN;\n  }\n}\n\nexport function findPackagerRootDir(currentDir: string): string {\n  return PackageManagerUtils.findWorkspaceRoot(currentDir) ?? currentDir;\n}\n"]}