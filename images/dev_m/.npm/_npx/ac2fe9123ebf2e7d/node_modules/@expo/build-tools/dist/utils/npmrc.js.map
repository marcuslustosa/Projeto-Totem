{"version":3,"file":"npmrc.js","sourceRoot":"","sources":["../../src/utils/npmrc.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAGxB,wDAA0B;AAI1B,qDAAuD;AAEvD,MAAM,mBAAmB,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;AAEnE,KAAK,UAAU,2BAA2B,CAAC,GAAsB;IACtE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;IAC/E,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACjE,IAAI,MAAM,kBAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;KACzF;SAAM;QACL,MAAM,aAAa,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QACrE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,wEAAwE,CAAC,CAAC;QAC1F,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/B,MAAM,kBAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;KACtD;AACH,CAAC;AAXD,kEAWC;AAEM,KAAK,UAAU,qBAAqB,CAAC,GAAsB;IAChE,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAChC,IAAA,oCAAmB,EAAC,GAAG,CAAC,2BAA2B,CAAC,EACpD,QAAQ,CACT,CAAC;IACF,IAAI,MAAM,kBAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;QACzC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC,EAAE,CAAC,CAAC;KAC3F;AACH,CAAC;AARD,sDAQC","sourcesContent":["import path from 'path';\n\nimport { Job } from '@expo/eas-build-job';\nimport fs from 'fs-extra';\n\nimport { BuildContext } from '../context';\n\nimport { findPackagerRootDir } from './packageManager';\n\nconst NPMRC_TEMPLATE_PATH = path.join(__dirname, '../../templates/npmrc');\n\nexport async function createNpmrcIfNotExistsAsync(ctx: BuildContext<Job>): Promise<void> {\n  ctx.logger.info('We detected that you set the NPM_TOKEN environment variable');\n  const projectNpmrcPath = path.join(ctx.buildDirectory, '.npmrc');\n  if (await fs.pathExists(projectNpmrcPath)) {\n    ctx.logger.info('.npmrc already exists in your project directory, skipping generation');\n  } else {\n    const npmrcContents = await fs.readFile(NPMRC_TEMPLATE_PATH, 'utf8');\n    ctx.logger.info('Creating .npmrc in your project directory with the following contents:');\n    ctx.logger.info(npmrcContents);\n    await fs.copy(NPMRC_TEMPLATE_PATH, projectNpmrcPath);\n  }\n}\n\nexport async function logIfNpmrcExistsAsync(ctx: BuildContext<Job>): Promise<void> {\n  const projectNpmrcPath = path.join(\n    findPackagerRootDir(ctx.reactNativeProjectDirectory),\n    '.npmrc'\n  );\n  if (await fs.pathExists(projectNpmrcPath)) {\n    ctx.logger.info(`.npmrc found at ${path.relative(ctx.buildDirectory, projectNpmrcPath)}`);\n  }\n}\n"]}