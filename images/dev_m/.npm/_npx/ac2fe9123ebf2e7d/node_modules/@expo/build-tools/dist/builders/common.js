"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runBuilderWithHooksAsync = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const context_1 = require("../context");
const xcodeBuildLogs_1 = require("../ios/xcodeBuildLogs");
const artifacts_1 = require("../utils/artifacts");
const hooks_1 = require("../utils/hooks");
async function runBuilderWithHooksAsync(ctx, builderAsync) {
    try {
        let buildSuccess = true;
        try {
            await builderAsync(ctx);
            await ctx.runBuildPhase(eas_build_job_1.BuildPhase.ON_BUILD_SUCCESS_HOOK, async () => {
                await (0, hooks_1.runHookIfPresent)(ctx, hooks_1.Hook.ON_BUILD_SUCCESS);
            });
        }
        catch (err) {
            buildSuccess = false;
            await ctx.runBuildPhase(eas_build_job_1.BuildPhase.ON_BUILD_ERROR_HOOK, async () => {
                await (0, hooks_1.runHookIfPresent)(ctx, hooks_1.Hook.ON_BUILD_ERROR);
            });
            throw err;
        }
        finally {
            await ctx.runBuildPhase(eas_build_job_1.BuildPhase.ON_BUILD_COMPLETE_HOOK, async () => {
                await (0, hooks_1.runHookIfPresent)(ctx, hooks_1.Hook.ON_BUILD_COMPLETE, {
                    extraEnvs: {
                        EAS_BUILD_STATUS: buildSuccess ? 'finished' : 'errored',
                    },
                });
            });
            if (ctx.job.platform === eas_build_job_1.Platform.IOS) {
                await (0, xcodeBuildLogs_1.findAndUploadXcodeBuildLogsAsync)(ctx);
            }
            await ctx.runBuildPhase(eas_build_job_1.BuildPhase.UPLOAD_BUILD_ARTIFACTS, async () => {
                if (!ctx.job.buildArtifactPaths || ctx.job.buildArtifactPaths.length === 0) {
                    return;
                }
                try {
                    const buildArtifacts = (await Promise.all(ctx.job.buildArtifactPaths.map((path) => (0, artifacts_1.findArtifacts)(ctx.reactNativeProjectDirectory, path, ctx.logger)))).flat();
                    ctx.logger.info(`Uploading build artifacts: ${buildArtifacts.join(', ')}`);
                    await ctx.uploadArtifacts(context_1.ArtifactType.BUILD_ARTIFACTS, buildArtifacts, ctx.logger);
                }
                catch (err) {
                    ctx.logger.error({ err }, 'Failed to upload build artifacts');
                }
            });
        }
    }
    catch (err) {
        err.artifacts = ctx.artifacts;
        throw err;
    }
    if (!ctx.artifacts.APPLICATION_ARCHIVE) {
        throw new Error('Builder must upload application archive');
    }
    return ctx.artifacts;
}
exports.runBuilderWithHooksAsync = runBuilderWithHooksAsync;
//# sourceMappingURL=common.js.map