{"version":3,"file":"setup.js","sourceRoot":"","sources":["../../src/common/setup.ts"],"names":[],"mappings":"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","sourcesContent":["import { SpawnResult } from '@expo/turtle-spawn';\nimport { BuildPhase, Ios, Job, Platform } from '@expo/eas-build-job';\nimport { BuildTrigger } from '@expo/eas-build-job/dist/common';\n\nimport { BuildContext } from '../context';\nimport { deleteXcodeEnvLocalIfExistsAsync } from '../ios/xcodeEnv';\nimport { Hook, runHookIfPresent } from '../utils/hooks';\nimport { createNpmrcIfNotExistsAsync, logIfNpmrcExistsAsync } from '../utils/npmrc';\nimport { readPackageJson, runExpoCliCommand } from '../utils/project';\n\nimport { prepareProjectSourcesAsync } from './projectSources';\nimport { installDependenciesAsync } from './installDependencies';\nimport { configureEnvFromBuildProfileAsync, runEasBuildInternalAsync } from './easBuildInternal';\n\nconst MAX_EXPO_DOCTOR_TIMEOUT_MS = 20 * 1000;\n\nexport async function setupAsync<TJob extends Job>(ctx: BuildContext<TJob>): Promise<void> {\n  const packageJson = await ctx.runBuildPhase(BuildPhase.PREPARE_PROJECT, async () => {\n    await prepareProjectSourcesAsync(ctx);\n    if (ctx.env.NPM_TOKEN) {\n      await createNpmrcIfNotExistsAsync(ctx);\n    } else {\n      await logIfNpmrcExistsAsync(ctx);\n    }\n    if (ctx.job.platform === Platform.IOS && ctx.env.EAS_BUILD_RUNNER === 'eas-build') {\n      await deleteXcodeEnvLocalIfExistsAsync(ctx as BuildContext<Ios.Job>);\n    }\n    if (ctx.job.triggeredBy === BuildTrigger.GIT_BASED_INTEGRATION) {\n      // We need to setup envs from eas.json before\n      // eas-build-pre-install hook is called.\n      await configureEnvFromBuildProfileAsync(ctx);\n    }\n    // try to read package.json to see if it exists and is valid\n    return readPackageJson(ctx.reactNativeProjectDirectory);\n  });\n\n  await ctx.runBuildPhase(BuildPhase.PRE_INSTALL_HOOK, async () => {\n    await runHookIfPresent(ctx, Hook.PRE_INSTALL);\n  });\n\n  await ctx.runBuildPhase(BuildPhase.READ_PACKAGE_JSON, async () => {\n    ctx.logger.info('Using package.json:');\n    ctx.logger.info(JSON.stringify(packageJson, null, 2));\n  });\n\n  await ctx.runBuildPhase(BuildPhase.INSTALL_DEPENDENCIES, async () => {\n    await installDependenciesAsync(ctx);\n  });\n\n  if (ctx.job.triggeredBy === BuildTrigger.GIT_BASED_INTEGRATION) {\n    await ctx.runBuildPhase(BuildPhase.EAS_BUILD_INTERNAL, async () => {\n      await runEasBuildInternalAsync(ctx);\n    });\n  }\n\n  await ctx.runBuildPhase(BuildPhase.READ_APP_CONFIG, async () => {\n    ctx.logger.info('Using app configuration:');\n    ctx.logger.info(JSON.stringify(ctx.appConfig, null, 2));\n  });\n\n  const hasExpoPackage = !!packageJson.dependencies?.expo;\n  if (hasExpoPackage) {\n    await ctx.runBuildPhase(BuildPhase.RUN_EXPO_DOCTOR, async () => {\n      try {\n        const { stdout } = await runExpoDoctor(ctx);\n        if (!stdout.match(/Didn't find any issues with the project/)) {\n          ctx.markBuildPhaseHasWarnings();\n        }\n      } catch (err) {\n        ctx.logger.error({ err }, 'Command \"expo doctor\" failed.');\n        ctx.markBuildPhaseHasWarnings();\n      }\n    });\n  }\n}\n\nasync function runExpoDoctor<TJob extends Job>(ctx: BuildContext<TJob>): Promise<SpawnResult> {\n  ctx.logger.info('Running \"expo doctor\"');\n  let timeout: NodeJS.Timeout | undefined;\n  try {\n    const promise = runExpoCliCommand(\n      ctx,\n      ['doctor'],\n      {\n        cwd: ctx.reactNativeProjectDirectory,\n        logger: ctx.logger,\n        env: ctx.env,\n      },\n      // local Expo CLI does not have \"doctor\" for now\n      { forceUseGlobalExpoCli: true }\n    );\n    timeout = setTimeout(() => {\n      promise.child.kill();\n      ctx.reportError?.(`\"expo doctor\" timed out`, undefined, {\n        extras: { buildId: ctx.env.EAS_BUILD_ID },\n      });\n    }, MAX_EXPO_DOCTOR_TIMEOUT_MS);\n    return await promise;\n  } finally {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  }\n}\n"]}