"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readAppConfig = void 0;
const config_1 = require("@expo/config");
const logger_1 = require("@expo/logger");
function readAppConfig(projectDir, env, logger) {
    const originalProcessEnv = process.env;
    const originalProcessExit = process.exit;
    const originalProcessCwd = process.cwd;
    const originalStdoutWrite = process.stdout.write;
    const originalStderrWrite = process.stderr.write;
    const stdoutStore = [];
    try {
        process.env = Object.assign({}, env);
        process.exit = () => {
            throw new Error('Failed to evaluate app config file');
        };
        process.cwd = () => projectDir;
        process.stdout.write = function (...args) {
            stdoutStore.push({ text: String(args[0]), level: logger_1.LoggerLevel.INFO });
            return originalStdoutWrite.apply(process.stdout, args);
        };
        process.stderr.write = function (...args) {
            stdoutStore.push({ text: String(args[0]), level: logger_1.LoggerLevel.ERROR });
            return originalStderrWrite.apply(process.stderr, args);
        };
        return (0, config_1.getConfig)(projectDir, {
            skipSDKVersionRequirement: true,
            isPublicConfig: true,
        });
    }
    catch (err) {
        process.stdout.write = originalStdoutWrite;
        process.stderr.write = originalStderrWrite;
        stdoutStore.forEach(({ text, level }) => {
            logger[level](text.trim());
        });
        throw err;
    }
    finally {
        process.env = originalProcessEnv;
        process.exit = originalProcessExit;
        process.cwd = originalProcessCwd;
        process.stdout.write = originalStdoutWrite;
        process.stderr.write = originalStderrWrite;
    }
}
exports.readAppConfig = readAppConfig;
//# sourceMappingURL=appConfig.js.map