"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureEnvFromBuildProfileAsync = exports.runEasBuildInternalAsync = void 0;
const assert_1 = __importDefault(require("assert"));
const eas_build_job_1 = require("@expo/eas-build-job");
const logger_1 = require("@expo/logger");
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const joi_1 = __importDefault(require("joi"));
const EAS_CLI_STAGING_NPM_TAG = 'latest-eas-build-staging';
const EAS_CLI_PRODUCTION_NPM_TAG = 'latest-eas-build';
const EasBuildInternalResultSchema = joi_1.default.object({
    job: joi_1.default.object().unknown(),
    metadata: joi_1.default.object().unknown(),
});
async function runEasBuildInternalAsync(ctx) {
    const { cmd, args } = resolveEasCommandPrefix();
    const { buildProfile } = ctx.job;
    (0, assert_1.default)(buildProfile, 'build profile is missing in a build from git-based integration.');
    const result = await (0, turtle_spawn_1.default)(cmd, [...args, 'build:internal', '--platform', ctx.job.platform, '--profile', buildProfile], {
        cwd: ctx.reactNativeProjectDirectory,
        env: Object.assign(Object.assign({}, ctx.env), { EXPO_TOKEN: ctx.job.secrets.robotAccessToken }),
        logger: ctx.logger,
        mode: logger_1.PipeMode.STDERR_ONLY_AS_STDOUT,
    });
    const stdout = result.stdout.toString();
    const parsed = JSON.parse(stdout);
    const { job, metadata } = validateEasBuildInternalResult(ctx, parsed);
    ctx.updateJobInformation(job, metadata);
}
exports.runEasBuildInternalAsync = runEasBuildInternalAsync;
async function configureEnvFromBuildProfileAsync(ctx) {
    var _a;
    const { cmd, args } = resolveEasCommandPrefix();
    const { buildProfile } = ctx.job;
    (0, assert_1.default)(buildProfile, 'build profile is missing in a build from git-based integration.');
    let spawnResult;
    try {
        spawnResult = await (0, turtle_spawn_1.default)(cmd, [
            ...args,
            'config',
            '--platform',
            ctx.job.platform,
            '--profile',
            buildProfile,
            '--non-interactive',
            '--json',
            '--eas-json-only',
        ], {
            cwd: ctx.reactNativeProjectDirectory,
            env: ctx.env,
        });
    }
    catch (err) {
        ctx.logger.error(`Failed to the read build profile ${buildProfile} from eas.json.`);
        ctx.logger.error((_a = err.stderr) === null || _a === void 0 ? void 0 : _a.toString());
        throw Error(`Failed to read the build profile ${buildProfile} from eas.json.`);
    }
    const stdout = spawnResult.stdout.toString();
    const parsed = JSON.parse(stdout);
    const env = validateEnvs(parsed);
    ctx.updateEnv(env);
}
exports.configureEnvFromBuildProfileAsync = configureEnvFromBuildProfileAsync;
function resolveEasCommandPrefix() {
    var _a;
    if (process.env.ENVIRONMENT === 'development') {
        return { cmd: (_a = process.env.EAS_BUILD_INTERNAL_EXECUTABLE) !== null && _a !== void 0 ? _a : `eas`, args: [] };
    }
    else if (process.env.ENVIRONMENT === 'staging') {
        return { cmd: 'npx', args: ['--yes', `eas-cli@${EAS_CLI_STAGING_NPM_TAG}`] };
    }
    else {
        return { cmd: 'npx', args: ['--yes', `eas-cli@${EAS_CLI_PRODUCTION_NPM_TAG}`] };
    }
}
function validateEasBuildInternalResult(ctx, result) {
    const { value, error } = EasBuildInternalResultSchema.validate(result, {
        stripUnknown: true,
        convert: true,
        abortEarly: false,
    });
    if (error) {
        throw error;
    }
    const job = (0, eas_build_job_1.sanitizeJob)(value.job);
    (0, assert_1.default)(job.platform === ctx.job.platform, 'eas-cli returned a job for a wrong platform');
    const metadata = (0, eas_build_job_1.sanitizeMetadata)(value.metadata);
    return { job, metadata };
}
function validateEnvs(result) {
    const { value, error } = joi_1.default.object({
        env: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.string()),
    }).validate(result.env, {
        stripUnknown: true,
        convert: true,
        abortEarly: false,
    });
    if (error) {
        throw error;
    }
    return value === null || value === void 0 ? void 0 : value.env;
}
//# sourceMappingURL=easBuildInternal.js.map