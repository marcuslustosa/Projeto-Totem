{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../src/ios/credentials/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport os from 'os';\nimport path from 'path';\n\nimport { Ios } from '@expo/eas-build-job';\nimport fs from 'fs-extra';\nimport { orderBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nimport { BuildContext } from '../../context';\n\nimport * as distributionCertificateUtils from './distributionCertificate';\nimport Keychain from './keychain';\nimport ProvisioningProfile, {\n  DistributionType,\n  ProvisioningProfileData,\n} from './provisioningProfile';\n\nexport interface Credentials {\n  applicationTargetProvisioningProfile: ProvisioningProfile<Ios.Job>;\n  keychainPath: string;\n  targetProvisioningProfiles: TargetProvisioningProfiles;\n  distributionType: DistributionType;\n  teamId: string;\n}\n\nexport type TargetProvisioningProfiles = Record<string, ProvisioningProfileData>;\n\nexport default class IosCredentialsManager<TJob extends Ios.Job> {\n  private keychain?: Keychain<TJob>;\n  private readonly provisioningProfiles: ProvisioningProfile<TJob>[] = [];\n  private cleanedUp = false;\n\n  constructor(private readonly ctx: BuildContext<TJob>) {}\n\n  public async prepare(): Promise<Credentials | null> {\n    if (this.ctx.job.simulator) {\n      return null;\n    }\n\n    const { buildCredentials } = this.ctx.job.secrets;\n    if (!buildCredentials) {\n      throw new Error('credentials are required for an iOS build');\n    }\n\n    this.ctx.logger.info('Preparing credentials');\n\n    this.ctx.logger.info('Creating keychain');\n    this.keychain = new Keychain(this.ctx);\n    await this.keychain.create();\n\n    const targets = Object.keys(buildCredentials);\n    const targetProvisioningProfiles: TargetProvisioningProfiles = {};\n    for (const target of targets) {\n      const provisioningProfile = await this.prepareTargetCredentials(\n        target,\n        buildCredentials[target]\n      );\n      this.provisioningProfiles.push(provisioningProfile);\n      targetProvisioningProfiles[target] = provisioningProfile.data;\n    }\n\n    const applicationTargetProvisioningProfile = this.getApplicationTargetProvisioningProfile();\n\n    // TODO: ensure that all dist types and team ids in the array are the same\n    const { distributionType, teamId } = applicationTargetProvisioningProfile.data;\n\n    return {\n      applicationTargetProvisioningProfile,\n      keychainPath: this.keychain.data.path,\n      targetProvisioningProfiles,\n      distributionType,\n      teamId,\n    };\n  }\n\n  public async cleanUp(): Promise<void> {\n    if (this.cleanedUp || (!this.keychain && this.provisioningProfiles.length === 0)) {\n      return;\n    }\n\n    if (this.keychain) {\n      await this.keychain.destroy();\n    }\n    if (this.provisioningProfiles) {\n      for (const provisioningProfile of this.provisioningProfiles) {\n        await provisioningProfile.destroy();\n      }\n    }\n    this.cleanedUp = true;\n  }\n\n  private async prepareTargetCredentials(\n    target: string,\n    targetCredentials: Ios.TargetCredentials\n  ): Promise<ProvisioningProfile<TJob>> {\n    try {\n      assert(this.keychain, 'Keychain should be initialized');\n\n      this.ctx.logger.info(`Preparing credentials for target '${target}'`);\n      const distCertPath = path.join(os.tmpdir(), `${uuid()}.p12`);\n\n      this.ctx.logger.info('Getting distribution certificate fingerprint and common name');\n      const certificateFingerprint = distributionCertificateUtils.getFingerprint(\n        targetCredentials.distributionCertificate\n      );\n      const certificateCommonName = distributionCertificateUtils.getCommonName(\n        targetCredentials.distributionCertificate\n      );\n      this.ctx.logger.info(\n        `Fingerprint = \"${certificateFingerprint}\", common name = ${certificateCommonName}`\n      );\n\n      this.ctx.logger.info(`Writing distribution certificate to ${distCertPath}`);\n      await fs.writeFile(\n        distCertPath,\n        Buffer.from(targetCredentials.distributionCertificate.dataBase64, 'base64')\n      );\n\n      this.ctx.logger.info('Importing distribution certificate into the keychain');\n      await this.keychain.importCertificate(\n        distCertPath,\n        targetCredentials.distributionCertificate.password\n      );\n\n      this.ctx.logger.info('Initializing provisioning profile');\n      const provisioningProfile = new ProvisioningProfile(\n        this.ctx,\n        Buffer.from(targetCredentials.provisioningProfileBase64, 'base64'),\n        this.keychain.data.path,\n        target,\n        certificateCommonName\n      );\n      await provisioningProfile.init();\n\n      this.ctx.logger.info(\n        'Validating whether distribution certificate has been imported successfully'\n      );\n      await this.keychain.ensureCertificateImported(\n        provisioningProfile.data.teamId,\n        certificateFingerprint\n      );\n\n      this.ctx.logger.info(\n        'Verifying whether the distribution certificate and provisioning profile match'\n      );\n      provisioningProfile.verifyCertificate(certificateFingerprint);\n\n      return provisioningProfile;\n    } catch (err) {\n      await this.cleanUp();\n      throw err;\n    }\n  }\n\n  private getApplicationTargetProvisioningProfile(): ProvisioningProfile<TJob> {\n    // sorting works because bundle ids share common prefix\n    const sorted = orderBy(this.provisioningProfiles, 'data.bundleIdentifier', 'asc');\n    return sorted[0];\n  }\n}\n"]}