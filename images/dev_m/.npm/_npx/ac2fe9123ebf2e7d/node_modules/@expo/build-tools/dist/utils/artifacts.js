"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findArtifacts = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const fast_glob_1 = __importDefault(require("fast-glob"));
async function findArtifacts(rootDir, patternOrPath, buildLogger) {
    const files = await (0, fast_glob_1.default)(patternOrPath, { cwd: rootDir, onlyFiles: false });
    if (files.length === 0) {
        if (fast_glob_1.default.isDynamicPattern(patternOrPath)) {
            throw new Error(`There are no files matching pattern "${patternOrPath}"`);
        }
        else {
            await logMissingFileError(path_1.default.join(rootDir, patternOrPath), buildLogger);
            throw new Error(`No such file or directory ${patternOrPath}`);
        }
    }
    return files.map((relativePath) => path_1.default.join(rootDir, relativePath));
}
exports.findArtifacts = findArtifacts;
async function logMissingFileError(artifactPath, buildLogger) {
    let currentPath = artifactPath;
    while (!(await fs_extra_1.default.pathExists(currentPath))) {
        currentPath = path_1.default.resolve(currentPath, '..');
    }
    if (currentPath === path_1.default.resolve(currentPath, '..')) {
        buildLogger.error(`There is no such file or directory "${artifactPath}".`);
        return;
    }
    const dirContent = await fs_extra_1.default.readdir(currentPath);
    if (dirContent.length === 0) {
        buildLogger.error(`There is no such file or directory "${artifactPath}". Directory "${currentPath}" is empty.`);
    }
    else {
        buildLogger.error(`There is no such file or directory "${artifactPath}". Directory "${currentPath}" contains [${dirContent.join(', ')}].`);
    }
}
//# sourceMappingURL=artifacts.js.map