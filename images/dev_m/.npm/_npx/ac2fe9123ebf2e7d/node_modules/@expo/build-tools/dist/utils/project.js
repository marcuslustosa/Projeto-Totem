"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readPackageJson = exports.shouldUseGlobalExpoCli = exports.runExpoCliCommand = exports.isUsingYarn2 = void 0;
const path_1 = __importDefault(require("path"));
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const semver_1 = __importDefault(require("semver"));
const packageManager_1 = require("../utils/packageManager");
/**
 * check if .yarnrc.yml exists in the project dir or in the workspace root dir
 */
async function isUsingYarn2(projectDir) {
    const yarnrcPath = path_1.default.join(projectDir, '.yarnrc.yml');
    const yarnrcRootPath = path_1.default.join((0, packageManager_1.findPackagerRootDir)(projectDir), '.yarnrc.yml');
    return (await fs_extra_1.default.pathExists(yarnrcPath)) || (await fs_extra_1.default.pathExists(yarnrcRootPath));
}
exports.isUsingYarn2 = isUsingYarn2;
function runExpoCliCommand(ctx, args, options, { forceUseGlobalExpoCli = false } = {}) {
    if (shouldUseGlobalExpoCli(ctx, forceUseGlobalExpoCli)) {
        return ctx.runGlobalExpoCliCommand(args.join(' '), options);
    }
    else {
        const argsWithExpo = ['expo', ...args];
        if (ctx.packageManager === packageManager_1.PackageManager.NPM) {
            return (0, turtle_spawn_1.default)('npx', argsWithExpo, options);
        }
        else if (ctx.packageManager === packageManager_1.PackageManager.YARN) {
            return (0, turtle_spawn_1.default)('yarn', argsWithExpo, options);
        }
        else if (ctx.packageManager === packageManager_1.PackageManager.PNPM) {
            return (0, turtle_spawn_1.default)('pnpm', argsWithExpo, options);
        }
        else {
            throw new Error(`Unsupported package manager: ${ctx.packageManager}`);
        }
    }
}
exports.runExpoCliCommand = runExpoCliCommand;
function shouldUseGlobalExpoCli(ctx, forceUseGlobalExpoCli = false) {
    return (forceUseGlobalExpoCli ||
        ctx.env.EXPO_USE_LOCAL_CLI === '0' ||
        !ctx.appConfig.sdkVersion ||
        semver_1.default.satisfies(ctx.appConfig.sdkVersion, '<46'));
}
exports.shouldUseGlobalExpoCli = shouldUseGlobalExpoCli;
function readPackageJson(projectDir) {
    const packageJsonPath = path_1.default.join(projectDir, 'package.json');
    if (!fs_extra_1.default.pathExistsSync(packageJsonPath)) {
        throw new Error(`package.json does not exist in ${projectDir}`);
    }
    try {
        return fs_extra_1.default.readJSONSync(packageJsonPath);
    }
    catch (err) {
        throw new Error(`Failed to parse or read package.json: ${err.message}`);
    }
}
exports.readPackageJson = readPackageJson;
//# sourceMappingURL=project.js.map