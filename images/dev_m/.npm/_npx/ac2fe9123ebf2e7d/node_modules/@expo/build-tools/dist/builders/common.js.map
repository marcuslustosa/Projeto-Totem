{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/builders/common.ts"],"names":[],"mappings":";;;AAAA,uDAAqE;AAErE,wCAAmE;AACnE,0DAAyE;AACzE,kDAAmD;AACnD,0CAAwD;AAEjD,KAAK,UAAU,wBAAwB,CAC5C,GAAoB,EACpB,YAAqD;IAErD,IAAI;QACF,IAAI,YAAY,GAAG,IAAI,CAAC;QACxB,IAAI;YACF,MAAM,YAAY,CAAC,GAAG,CAAC,CAAC;YACxB,MAAM,GAAG,CAAC,aAAa,CAAC,0BAAU,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;gBACnE,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,YAAI,CAAC,gBAAgB,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,GAAQ,EAAE;YACjB,YAAY,GAAG,KAAK,CAAC;YACrB,MAAM,GAAG,CAAC,aAAa,CAAC,0BAAU,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE;gBACjE,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,YAAI,CAAC,cAAc,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YACH,MAAM,GAAG,CAAC;SACX;gBAAS;YACR,MAAM,GAAG,CAAC,aAAa,CAAC,0BAAU,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;gBACpE,MAAM,IAAA,wBAAgB,EAAC,GAAG,EAAE,YAAI,CAAC,iBAAiB,EAAE;oBAClD,SAAS,EAAE;wBACT,gBAAgB,EAAE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;qBACxD;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,KAAK,wBAAQ,CAAC,GAAG,EAAE;gBACrC,MAAM,IAAA,iDAAgC,EAAC,GAA4B,CAAC,CAAC;aACtE;YAED,MAAM,GAAG,CAAC,aAAa,CAAC,0BAAU,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;gBACpE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,kBAAkB,IAAI,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC1E,OAAO;iBACR;gBACD,IAAI;oBACF,MAAM,cAAc,GAAG,CACrB,MAAM,OAAO,CAAC,GAAG,CACf,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACtC,IAAA,yBAAa,EAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,CACjE,CACF,CACF,CAAC,IAAI,EAAE,CAAC;oBACT,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBAC3E,MAAM,GAAG,CAAC,eAAe,CAAC,sBAAY,CAAC,eAAe,EAAE,cAAc,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;iBACrF;gBAAC,OAAO,GAAQ,EAAE;oBACjB,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,EAAE,kCAAkC,CAAC,CAAC;iBAC/D;YACH,CAAC,CAAC,CAAC;SACJ;KACF;IAAC,OAAO,GAAQ,EAAE;QACjB,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;QAC9B,MAAM,GAAG,CAAC;KACX;IAED,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,EAAE;QACtC,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC5D;IAED,OAAO,GAAG,CAAC,SAAS,CAAC;AACvB,CAAC;AA3DD,4DA2DC","sourcesContent":["import { BuildPhase, Ios, Job, Platform } from '@expo/eas-build-job';\n\nimport { Artifacts, ArtifactType, BuildContext } from '../context';\nimport { findAndUploadXcodeBuildLogsAsync } from '../ios/xcodeBuildLogs';\nimport { findArtifacts } from '../utils/artifacts';\nimport { Hook, runHookIfPresent } from '../utils/hooks';\n\nexport async function runBuilderWithHooksAsync<T extends Job>(\n  ctx: BuildContext<T>,\n  builderAsync: (ctx: BuildContext<T>) => Promise<void>\n): Promise<Artifacts> {\n  try {\n    let buildSuccess = true;\n    try {\n      await builderAsync(ctx);\n      await ctx.runBuildPhase(BuildPhase.ON_BUILD_SUCCESS_HOOK, async () => {\n        await runHookIfPresent(ctx, Hook.ON_BUILD_SUCCESS);\n      });\n    } catch (err: any) {\n      buildSuccess = false;\n      await ctx.runBuildPhase(BuildPhase.ON_BUILD_ERROR_HOOK, async () => {\n        await runHookIfPresent(ctx, Hook.ON_BUILD_ERROR);\n      });\n      throw err;\n    } finally {\n      await ctx.runBuildPhase(BuildPhase.ON_BUILD_COMPLETE_HOOK, async () => {\n        await runHookIfPresent(ctx, Hook.ON_BUILD_COMPLETE, {\n          extraEnvs: {\n            EAS_BUILD_STATUS: buildSuccess ? 'finished' : 'errored',\n          },\n        });\n      });\n\n      if (ctx.job.platform === Platform.IOS) {\n        await findAndUploadXcodeBuildLogsAsync(ctx as BuildContext<Ios.Job>);\n      }\n\n      await ctx.runBuildPhase(BuildPhase.UPLOAD_BUILD_ARTIFACTS, async () => {\n        if (!ctx.job.buildArtifactPaths || ctx.job.buildArtifactPaths.length === 0) {\n          return;\n        }\n        try {\n          const buildArtifacts = (\n            await Promise.all(\n              ctx.job.buildArtifactPaths.map((path) =>\n                findArtifacts(ctx.reactNativeProjectDirectory, path, ctx.logger)\n              )\n            )\n          ).flat();\n          ctx.logger.info(`Uploading build artifacts: ${buildArtifacts.join(', ')}`);\n          await ctx.uploadArtifacts(ArtifactType.BUILD_ARTIFACTS, buildArtifacts, ctx.logger);\n        } catch (err: any) {\n          ctx.logger.error({ err }, 'Failed to upload build artifacts');\n        }\n      });\n    }\n  } catch (err: any) {\n    err.artifacts = ctx.artifacts;\n    throw err;\n  }\n\n  if (!ctx.artifacts.APPLICATION_ARCHIVE) {\n    throw new Error('Builder must upload application archive');\n  }\n\n  return ctx.artifacts;\n}\n"]}