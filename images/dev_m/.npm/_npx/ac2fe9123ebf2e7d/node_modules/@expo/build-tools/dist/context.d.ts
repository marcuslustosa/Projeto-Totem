import { BuildPhase, BuildPhaseStats, Job, Env, Metadata } from '@expo/eas-build-job';
import { ExpoConfig } from '@expo/config';
import { bunyan } from '@expo/logger';
import { SpawnPromise, SpawnOptions, SpawnResult } from '@expo/turtle-spawn';
import { PackageManager } from './utils/packageManager';
export declare enum ArtifactType {
    APPLICATION_ARCHIVE = "APPLICATION_ARCHIVE",
    BUILD_ARTIFACTS = "BUILD_ARTIFACTS",
    /**
     * @deprecated
     */
    XCODE_BUILD_LOGS = "XCODE_BUILD_LOGS"
}
export declare type Artifacts = Partial<Record<ArtifactType, string>>;
export interface CacheManager {
    saveCache(ctx: BuildContext<Job>): Promise<void>;
    restoreCache(ctx: BuildContext<Job>): Promise<void>;
}
export interface LogBuffer {
    getLogs(): string[];
    getPhaseLogs(buildPhase: string): string[];
}
export interface BuildContextOptions {
    workingdir: string;
    logger: bunyan;
    logBuffer: LogBuffer;
    env: Env;
    cacheManager?: CacheManager;
    /**
     * @deprecated
     */
    runGlobalExpoCliCommand: (args: string, options: SpawnOptions) => SpawnPromise<SpawnResult>;
    uploadArtifacts: (type: ArtifactType, paths: string[], logger?: bunyan) => Promise<string | null>;
    reportError?: (msg: string, err?: Error, options?: {
        tags?: Record<string, string>;
        extras?: Record<string, string>;
    }) => void;
    reportBuildPhaseStats?: (stats: BuildPhaseStats) => void;
    skipNativeBuild?: boolean;
    metadata?: Metadata;
}
export declare class SkipNativeBuildError extends Error {
}
export declare class BuildContext<TJob extends Job> {
    readonly workingdir: string;
    logger: bunyan;
    readonly logBuffer: LogBuffer;
    readonly cacheManager?: CacheManager;
    /**
     * @deprecated
     */
    readonly runGlobalExpoCliCommand: (args: string, options: SpawnOptions) => SpawnPromise<SpawnResult>;
    readonly reportError?: (msg: string, err?: Error, options?: {
        tags?: Record<string, string>;
        extras?: Record<string, string>;
    }) => void;
    readonly skipNativeBuild?: boolean;
    artifacts: Artifacts;
    private _env;
    private _job;
    private _metadata?;
    private readonly defaultLogger;
    private readonly _uploadArtifacts;
    private buildPhase?;
    private buildPhaseSkipped;
    private buildPhaseHasWarnings;
    private _appConfig?;
    private readonly reportBuildPhaseStats?;
    constructor(job: TJob, options: BuildContextOptions);
    get job(): TJob;
    get metadata(): Metadata | undefined;
    get env(): Env;
    get buildDirectory(): string;
    get buildLogsDirectory(): string;
    get environmentSecrectsDirectory(): string;
    get reactNativeProjectDirectory(): string;
    get packageManager(): PackageManager;
    get appConfig(): ExpoConfig;
    runBuildPhase<T>(buildPhase: BuildPhase, phase: () => Promise<T>, { doNotMarkStart, doNotMarkEnd, }?: {
        doNotMarkStart?: boolean;
        doNotMarkEnd?: boolean;
    }): Promise<T>;
    markBuildPhaseSkipped(): void;
    markBuildPhaseHasWarnings(): void;
    uploadArtifacts(type: ArtifactType, paths: string[], logger?: bunyan): Promise<void>;
    updateEnv(env: Env): void;
    updateJobInformation(job: TJob, metadata: Metadata): void;
    private handleBuildPhaseErrorAsync;
    private setBuildPhase;
    private endCurrentBuildPhase;
    private getEnvironmentSecrets;
}
