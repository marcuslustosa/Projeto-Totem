{"version":3,"file":"keychain.js","sourceRoot":"","sources":["../../../src/ios/credentials/keychain.ts"],"names":[],"mappings":"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","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { Ios } from '@expo/eas-build-job';\nimport spawn from '@expo/turtle-spawn';\nimport { v4 as uuid } from 'uuid';\n\nimport { BuildContext } from '../../context';\nimport { runFastlane } from '../fastlane';\n\nexport default class Keychain<TJob extends Ios.Job> {\n  private readonly keychainPath: string;\n  private readonly keychainPassword: string;\n  private created = false;\n  private destroyed = false;\n\n  constructor(private readonly ctx: BuildContext<TJob>) {\n    this.keychainPath = path.join(os.tmpdir(), `turtle-v2-${uuid()}.keychain`);\n    this.keychainPassword = uuid();\n  }\n\n  get data(): { path: string; password: string } {\n    return {\n      path: this.keychainPath,\n      password: this.keychainPassword,\n    };\n  }\n\n  public async create(): Promise<void> {\n    this.ctx.logger.debug(`Creating keychain - ${this.keychainPath}`);\n    await runFastlane([\n      'run',\n      'create_keychain',\n      `path:${this.keychainPath}`,\n      `password:${this.keychainPassword}`,\n      'unlock:true',\n      'timeout:360000',\n    ]);\n    this.created = true;\n  }\n\n  public async importCertificate(certPath: string, certPassword: string): Promise<void> {\n    if (!this.created) {\n      throw new Error('You must create a keychain first.');\n    }\n\n    this.ctx.logger.debug(`Importing certificate ${certPath} into keychain ${this.keychainPath}`);\n    await runFastlane([\n      'run',\n      'import_certificate',\n      `certificate_path:${certPath}`,\n      `certificate_password:${certPassword}`,\n      `keychain_path:${this.keychainPath}`,\n      `keychain_password:${this.keychainPassword}`,\n    ]);\n  }\n\n  public async ensureCertificateImported(teamId: string, fingerprint: string): Promise<void> {\n    const identities = await this.findIdentitiesByTeamId(teamId);\n    if (!identities.includes(fingerprint)) {\n      throw new Error(\n        `Distribution certificate with fingerprint ${fingerprint} hasn't been imported successfully`\n      );\n    }\n  }\n\n  public async destroy(keychainPath?: string): Promise<void> {\n    if (!keychainPath && !this.created) {\n      this.ctx.logger.warn(\"There is nothing to destroy, a keychain hasn't been created yet.\");\n      return;\n    }\n    if (this.destroyed) {\n      this.ctx.logger.warn('The keychain has been already destroyed');\n      return;\n    }\n    const keychainToDeletePath = keychainPath ?? this.keychainPath;\n    this.ctx.logger.info(`Destroying keychain - ${keychainToDeletePath}`);\n    try {\n      await runFastlane(['run', 'delete_keychain', `keychain_path:${keychainToDeletePath}`]);\n      this.destroyed = true;\n    } catch (err) {\n      this.ctx.logger.error({ err }, 'Failed to delete the keychain\\n');\n      throw err;\n    }\n  }\n\n  public async cleanUpKeychains(): Promise<void> {\n    const { stdout } = await spawn('security', ['list-keychains'], { stdio: 'pipe' });\n    const keychainList = (/\"(.*)\"/g.exec(stdout) ?? ([] as string[])).map((i) =>\n      i.slice(1, i.length - 1)\n    );\n    const turtleKeychainList = keychainList.filter((keychain) =>\n      /turtle-v2-[\\w-]+\\.keychain$/.exec(keychain)\n    );\n    for (const turtleKeychainPath of turtleKeychainList) {\n      await this.destroy(turtleKeychainPath);\n    }\n  }\n\n  private async findIdentitiesByTeamId(teamId: string): Promise<string> {\n    const { output } = await spawn(\n      'security',\n      ['find-identity', '-v', '-s', `(${teamId})`, this.keychainPath],\n      {\n        stdio: 'pipe',\n      }\n    );\n    return output.join('');\n  }\n}\n"]}