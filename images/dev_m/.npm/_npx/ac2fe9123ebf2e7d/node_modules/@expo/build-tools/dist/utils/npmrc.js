"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logIfNpmrcExistsAsync = exports.createNpmrcIfNotExistsAsync = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const packageManager_1 = require("./packageManager");
const NPMRC_TEMPLATE_PATH = path_1.default.join(__dirname, '../../templates/npmrc');
async function createNpmrcIfNotExistsAsync(ctx) {
    ctx.logger.info('We detected that you set the NPM_TOKEN environment variable');
    const projectNpmrcPath = path_1.default.join(ctx.buildDirectory, '.npmrc');
    if (await fs_extra_1.default.pathExists(projectNpmrcPath)) {
        ctx.logger.info('.npmrc already exists in your project directory, skipping generation');
    }
    else {
        const npmrcContents = await fs_extra_1.default.readFile(NPMRC_TEMPLATE_PATH, 'utf8');
        ctx.logger.info('Creating .npmrc in your project directory with the following contents:');
        ctx.logger.info(npmrcContents);
        await fs_extra_1.default.copy(NPMRC_TEMPLATE_PATH, projectNpmrcPath);
    }
}
exports.createNpmrcIfNotExistsAsync = createNpmrcIfNotExistsAsync;
async function logIfNpmrcExistsAsync(ctx) {
    const projectNpmrcPath = path_1.default.join((0, packageManager_1.findPackagerRootDir)(ctx.reactNativeProjectDirectory), '.npmrc');
    if (await fs_extra_1.default.pathExists(projectNpmrcPath)) {
        ctx.logger.info(`.npmrc found at ${path_1.default.relative(ctx.buildDirectory, projectNpmrcPath)}`);
    }
}
exports.logIfNpmrcExistsAsync = logIfNpmrcExistsAsync;
//# sourceMappingURL=npmrc.js.map