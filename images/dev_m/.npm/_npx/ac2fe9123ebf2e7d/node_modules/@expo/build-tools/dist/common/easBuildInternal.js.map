{"version":3,"file":"easBuildInternal.js","sourceRoot":"","sources":["../../src/common/easBuildInternal.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport { Env, Job, Metadata, sanitizeJob, sanitizeMetadata } from '@expo/eas-build-job';\nimport { PipeMode } from '@expo/logger';\nimport spawn from '@expo/turtle-spawn';\nimport Joi from 'joi';\n\nimport { BuildContext } from '../context';\n\nconst EAS_CLI_STAGING_NPM_TAG = 'latest-eas-build-staging';\nconst EAS_CLI_PRODUCTION_NPM_TAG = 'latest-eas-build';\n\nconst EasBuildInternalResultSchema = Joi.object<{ job: object; metadata: object }>({\n  job: Joi.object().unknown(),\n  metadata: Joi.object().unknown(),\n});\n\nexport async function runEasBuildInternalAsync<TJob extends Job>(\n  ctx: BuildContext<TJob>\n): Promise<void> {\n  const { cmd, args } = resolveEasCommandPrefix();\n  const { buildProfile } = ctx.job;\n  assert(buildProfile, 'build profile is missing in a build from git-based integration.');\n  const result = await spawn(\n    cmd,\n    [...args, 'build:internal', '--platform', ctx.job.platform, '--profile', buildProfile],\n    {\n      cwd: ctx.reactNativeProjectDirectory,\n      env: { ...ctx.env, EXPO_TOKEN: ctx.job.secrets.robotAccessToken },\n      logger: ctx.logger,\n      mode: PipeMode.STDERR_ONLY_AS_STDOUT,\n    }\n  );\n  const stdout = result.stdout.toString();\n  const parsed = JSON.parse(stdout);\n  const { job, metadata } = validateEasBuildInternalResult(ctx, parsed);\n  ctx.updateJobInformation(job, metadata);\n}\n\nexport async function configureEnvFromBuildProfileAsync<TJob extends Job>(\n  ctx: BuildContext<TJob>\n): Promise<void> {\n  const { cmd, args } = resolveEasCommandPrefix();\n  const { buildProfile } = ctx.job;\n  assert(buildProfile, 'build profile is missing in a build from git-based integration.');\n  let spawnResult;\n  try {\n    spawnResult = await spawn(\n      cmd,\n      [\n        ...args,\n        'config',\n        '--platform',\n        ctx.job.platform,\n        '--profile',\n        buildProfile,\n        '--non-interactive',\n        '--json',\n        '--eas-json-only',\n      ],\n      {\n        cwd: ctx.reactNativeProjectDirectory,\n        env: ctx.env,\n      }\n    );\n  } catch (err: any) {\n    ctx.logger.error(`Failed to the read build profile ${buildProfile} from eas.json.`);\n    ctx.logger.error(err.stderr?.toString());\n    throw Error(`Failed to read the build profile ${buildProfile} from eas.json.`);\n  }\n  const stdout = spawnResult.stdout.toString();\n  const parsed = JSON.parse(stdout);\n  const env = validateEnvs(parsed);\n  ctx.updateEnv(env);\n}\n\nfunction resolveEasCommandPrefix(): { cmd: string; args: string[] } {\n  if (process.env.ENVIRONMENT === 'development') {\n    return { cmd: process.env.EAS_BUILD_INTERNAL_EXECUTABLE ?? `eas`, args: [] };\n  } else if (process.env.ENVIRONMENT === 'staging') {\n    return { cmd: 'npx', args: ['--yes', `eas-cli@${EAS_CLI_STAGING_NPM_TAG}`] };\n  } else {\n    return { cmd: 'npx', args: ['--yes', `eas-cli@${EAS_CLI_PRODUCTION_NPM_TAG}`] };\n  }\n}\n\nfunction validateEasBuildInternalResult<TJob extends Job>(\n  ctx: BuildContext<TJob>,\n  result: any\n): { job: TJob; metadata: Metadata } {\n  const { value, error } = EasBuildInternalResultSchema.validate(result, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n  if (error) {\n    throw error;\n  }\n  const job = sanitizeJob(value.job) as TJob;\n  assert(job.platform === ctx.job.platform, 'eas-cli returned a job for a wrong platform');\n  const metadata = sanitizeMetadata(value.metadata);\n  return { job, metadata };\n}\n\nfunction validateEnvs(result: any): Env {\n  const { value, error } = Joi.object({\n    env: Joi.object().pattern(Joi.string(), Joi.string()),\n  }).validate(result.env, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n  if (error) {\n    throw error;\n  }\n  return value?.env;\n}\n"]}