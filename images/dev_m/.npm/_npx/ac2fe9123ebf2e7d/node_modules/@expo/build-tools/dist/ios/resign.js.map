{"version":3,"file":"resign.js","sourceRoot":"","sources":["../../src/ios/resign.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,gDAAwB;AAExB,kEAA4C;AAC5C,uDAA6D;AAItD,KAAK,UAAU,+BAA+B,CAAC,GAA0B;;IAC9E,IAAA,gBAAM,EAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAEvB,MAAM,sBAAsB,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAE5E,MAAM,EAAE,wBAAwB,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC;IACpD,IAAI,wBAAwB,CAAC,IAAI,KAAK,iCAAiB,CAAC,GAAG,EAAE;QAC3D,IAAI;YACF,MAAM,IAAA,oBAAY,EAAC,wBAAwB,CAAC,GAAG,EAAE,sBAAsB,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;SACxF;QAAC,OAAO,GAAQ,EAAE;YACjB,MAAA,GAAG,CAAC,WAAW,oDAAG,4CAA4C,EAAE,GAAG,EAAE;gBACnE,MAAM,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,EAAE;aAC1C,CAAC,CAAC;YACH,MAAM,GAAG,CAAC;SACX;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;KAChE;IAED,OAAO,sBAAsB,CAAC;AAChC,CAAC;AApBD,0EAoBC","sourcesContent":["import assert from 'assert';\nimport path from 'path';\n\nimport downloadFile from '@expo/downloader';\nimport { ArchiveSourceType, Ios } from '@expo/eas-build-job';\n\nimport { BuildContext } from '../context';\n\nexport async function downloadApplicationArchiveAsync(ctx: BuildContext<Ios.Job>): Promise<string> {\n  assert(ctx.job.resign);\n\n  const applicationArchivePath = path.join(ctx.workingdir, 'application.ipa');\n\n  const { applicationArchiveSource } = ctx.job.resign;\n  if (applicationArchiveSource.type === ArchiveSourceType.URL) {\n    try {\n      await downloadFile(applicationArchiveSource.url, applicationArchivePath, { retry: 3 });\n    } catch (err: any) {\n      ctx.reportError?.('Failed to download the application archive', err, {\n        extras: { buildId: ctx.env.EAS_BUILD_ID },\n      });\n      throw err;\n    }\n  } else {\n    throw new Error('Only application archive URLs are supported');\n  }\n\n  return applicationArchivePath;\n}\n"]}