{"version":3,"file":"installDependencies.js","sourceRoot":"","sources":["../../src/common/installDependencies.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAGxB,sEAAuC;AAGvC,4DAA8E;AAC9E,8CAAgD;AAEzC,KAAK,UAAU,wBAAwB,CAC5C,GAAuB;IAEvB,MAAM,cAAc,GAAG,IAAA,oCAAmB,EAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC5E,IAAI,cAAc,KAAK,GAAG,CAAC,2BAA2B,EAAE;QACtD,MAAM,mCAAmC,GAAG,cAAI,CAAC,QAAQ,CACvD,GAAG,CAAC,cAAc,EAClB,GAAG,CAAC,2BAA2B,CAChC,CAAC;QACF,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,qBAAqB,mCAAmC,UAAU,GAAG,CAAC,cAAc,YAAY,CACjG,CAAC;KACH;IAED,MAAM,sBAAsB,GAAG,cAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACjF,IAAI,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;IACvB,IAAI,GAAG,CAAC,cAAc,KAAK,+BAAc,CAAC,IAAI,EAAE;QAC9C,IAAI,GAAG,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;KAC5C;SAAM,IAAI,GAAG,CAAC,cAAc,KAAK,+BAAc,CAAC,IAAI,EAAE;QACrD,MAAM,OAAO,GAAG,MAAM,IAAA,sBAAY,EAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACpE,IAAI,OAAO,EAAE;YACX,IAAI,GAAG,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;SACtC;KACF;IACD,GAAG,CAAC,MAAM,CAAC,IAAI,CACb,YAAY,GAAG,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAC9C,sBAAsB;QACpB,CAAC,CAAC,cAAc,sBAAsB,GAAG;QACzC,CAAC,CAAC,iCACN,GAAG,CACJ,CAAC;IACF,MAAM,IAAA,sBAAK,EAAC,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE;QACpC,GAAG,EAAE,cAAc;QACnB,MAAM,EAAE,GAAG,CAAC,MAAM;QAClB,GAAG,EAAE,GAAG,CAAC,GAAG;KACb,CAAC,CAAC;AACL,CAAC;AApCD,4DAoCC","sourcesContent":["import path from 'path';\n\nimport { Job } from '@expo/eas-build-job';\nimport spawn from '@expo/turtle-spawn';\n\nimport { BuildContext } from '../context';\nimport { findPackagerRootDir, PackageManager } from '../utils/packageManager';\nimport { isUsingYarn2 } from '../utils/project';\n\nexport async function installDependenciesAsync<TJob extends Job>(\n  ctx: BuildContext<TJob>\n): Promise<void> {\n  const packagerRunDir = findPackagerRootDir(ctx.reactNativeProjectDirectory);\n  if (packagerRunDir !== ctx.reactNativeProjectDirectory) {\n    const relativeReactNativeProjectDirectory = path.relative(\n      ctx.buildDirectory,\n      ctx.reactNativeProjectDirectory\n    );\n    ctx.logger.info(\n      `We detected that '${relativeReactNativeProjectDirectory}' is a ${ctx.packageManager} workspace`\n    );\n  }\n\n  const relativePackagerRunDir = path.relative(ctx.buildDirectory, packagerRunDir);\n  let args = ['install'];\n  if (ctx.packageManager === PackageManager.PNPM) {\n    args = ['install', '--no-frozen-lockfile'];\n  } else if (ctx.packageManager === PackageManager.YARN) {\n    const isYarn2 = await isUsingYarn2(ctx.reactNativeProjectDirectory);\n    if (isYarn2) {\n      args = ['install', '--no-immutable'];\n    }\n  }\n  ctx.logger.info(\n    `Running \"${ctx.packageManager} ${args.join(' ')}\" in ${\n      relativePackagerRunDir\n        ? `directory '${relativePackagerRunDir}'`\n        : 'the root dir of your repository'\n    } `\n  );\n  await spawn(ctx.packageManager, args, {\n    cwd: packagerRunDir,\n    logger: ctx.logger,\n    env: ctx.env,\n  });\n}\n"]}