{"version":3,"file":"expoUpdates.js","sourceRoot":"","sources":["../../src/utils/expoUpdates.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport { Platform, Job } from '@expo/eas-build-job';\nimport { getRuntimeVersionNullable } from '@expo/config-plugins/build/utils/Updates';\n\nimport {\n  androidSetRuntimeVersionNativelyAsync,\n  androidSetChannelNativelyAsync,\n  androidSetClassicReleaseChannelNativelyAsync,\n  androidGetNativelyDefinedClassicReleaseChannelAsync,\n  androidGetNativelyDefinedRuntimeVersionAsync,\n  androidGetNativelyDefinedChannelAsync,\n} from '../android/expoUpdates';\nimport {\n  iosSetRuntimeVersionNativelyAsync,\n  iosSetChannelNativelyAsync,\n  iosSetClassicReleaseChannelNativelyAsync,\n  iosGetNativelyDefinedClassicReleaseChannelAsync,\n  iosGetNativelyDefinedRuntimeVersionAsync,\n  iosGetNativelyDefinedChannelAsync,\n} from '../ios/expoUpdates';\nimport { BuildContext } from '../context';\n\nimport isExpoUpdatesInstalledAsync from './isExpoUpdatesInstalled';\n\nexport async function setRuntimeVersionNativelyAsync(\n  ctx: BuildContext<Job>,\n  runtimeVersion: string\n): Promise<void> {\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      await androidSetRuntimeVersionNativelyAsync(ctx, runtimeVersion);\n      return;\n    }\n    case Platform.IOS: {\n      await iosSetRuntimeVersionNativelyAsync(ctx, runtimeVersion);\n      return;\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\n/**\n * Used for when Expo Updates is pointed at an EAS server.\n */\nexport async function setChannelNativelyAsync(ctx: BuildContext<Job>): Promise<void> {\n  assert(ctx.job.updates?.channel, 'updates.channel must be defined');\n  const newUpdateRequestHeaders: Record<string, string> = {\n    'expo-channel-name': ctx.job.updates.channel,\n  };\n\n  const configFile = ctx.job.platform === Platform.ANDROID ? 'AndroidManifest.xml' : 'Expo.plist';\n  ctx.logger.info(\n    `Setting the update request headers in '${configFile}' to '${JSON.stringify(\n      newUpdateRequestHeaders\n    )}'`\n  );\n\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      await androidSetChannelNativelyAsync(ctx);\n      return;\n    }\n    case Platform.IOS: {\n      await iosSetChannelNativelyAsync(ctx);\n      return;\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\n/**\n * Used for classic Expo Updates\n */\nexport async function setClassicReleaseChannelNativelyAsync(ctx: BuildContext<Job>): Promise<void> {\n  assert(ctx.job.releaseChannel, 'releaseChannel must be defined');\n\n  const configFile = ctx.job.platform === Platform.ANDROID ? 'AndroidManifest.xml' : 'Expo.plist';\n  ctx.logger.info(`Setting the release channel in '${configFile}' to '${ctx.job.releaseChannel}'`);\n\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      await androidSetClassicReleaseChannelNativelyAsync(ctx);\n      return;\n    }\n    case Platform.IOS: {\n      await iosSetClassicReleaseChannelNativelyAsync(ctx);\n      return;\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\n/**\n * Used for classic Expo Updates\n */\nexport async function getNativelyDefinedClassicReleaseChannelAsync(\n  ctx: BuildContext<Job>\n): Promise<string | null> {\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      return androidGetNativelyDefinedClassicReleaseChannelAsync(ctx);\n    }\n    case Platform.IOS: {\n      return iosGetNativelyDefinedClassicReleaseChannelAsync(ctx);\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\nexport async function configureClassicExpoUpdatesAsync(ctx: BuildContext<Job>): Promise<void> {\n  if (ctx.job.releaseChannel) {\n    await setClassicReleaseChannelNativelyAsync(ctx);\n  } else {\n    /**\n     * If releaseChannel is not defined:\n     *  1. Try to infer it from the native value.\n     *  2. If it is not set, fallback to 'default'.\n     */\n    const releaseChannel = await getNativelyDefinedClassicReleaseChannelAsync(ctx);\n    if (releaseChannel) {\n      ctx.logger.info(\n        `Using the release channel pre-configured in native project (${releaseChannel})`\n      );\n      ctx.logger.warn('Please add the \"releaseChannel\" field to your build profile (eas.json)');\n    } else {\n      ctx.logger.info(`Using default release channel for 'expo-updates' (default)`);\n    }\n  }\n}\n\nexport async function configureEASExpoUpdatesAsync(ctx: BuildContext<Job>): Promise<void> {\n  await setChannelNativelyAsync(ctx);\n}\n\nexport async function configureExpoUpdatesIfInstalledAsync(ctx: BuildContext<Job>): Promise<void> {\n  if (!(await isExpoUpdatesInstalledAsync(ctx.reactNativeProjectDirectory))) {\n    return;\n  }\n\n  const appConfigRuntimeVersion =\n    ctx.job.version?.runtimeVersion ?? getRuntimeVersionNullable(ctx.appConfig, ctx.job.platform);\n  if (ctx.metadata?.runtimeVersion && ctx.metadata?.runtimeVersion !== appConfigRuntimeVersion) {\n    ctx.markBuildPhaseHasWarnings();\n    ctx.logger.warn(\n      `Runtime version from the app config evaluated on your local machine (${ctx.metadata.runtimeVersion}) does not match the one resolved here (${appConfigRuntimeVersion}).`\n    );\n    ctx.logger.warn(\n      \"If you're using conditional app configs, e.g. depending on an environment variable, make sure to set the variable in eas.json or configure it with EAS Secret.\"\n    );\n  }\n\n  if (isEASUpdateConfigured(ctx)) {\n    if (ctx.job.updates?.channel !== undefined) {\n      await configureEASExpoUpdatesAsync(ctx);\n    } else {\n      const channel = await getChannelAsync(ctx);\n      if (channel !== null) {\n        const configFile =\n          ctx.job.platform === Platform.ANDROID ? 'AndroidManifest.xml' : 'Expo.plist';\n        ctx.logger.info(`The channel name for EAS Update in ${configFile} is set to \"${channel}\"`);\n      } else {\n        if (ctx.job.releaseChannel !== undefined) {\n          ctx.logger.warn(\n            `This build is configured with EAS Update however has a Classic Updates releaseChannel set instead of having an EAS Update channel.`\n          );\n        } else {\n          ctx.logger.warn(\n            `This build is configured to query EAS Update for updates, however no channel is set in eas.json.`\n          );\n        }\n        ctx.markBuildPhaseHasWarnings();\n      }\n    }\n  } else {\n    await configureClassicExpoUpdatesAsync(ctx);\n  }\n\n  if (ctx.job.version?.runtimeVersion) {\n    ctx.logger.info('Updating runtimeVersion in Expo.plist');\n    await setRuntimeVersionNativelyAsync(ctx, ctx.job.version.runtimeVersion);\n  }\n}\n\nexport async function getChannelAsync(ctx: BuildContext<Job>): Promise<string | null> {\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      return await androidGetNativelyDefinedChannelAsync(ctx);\n    }\n    case Platform.IOS: {\n      return await iosGetNativelyDefinedChannelAsync(ctx);\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\nexport async function getRuntimeVersionAsync(ctx: BuildContext<Job>): Promise<string | null> {\n  switch (ctx.job.platform) {\n    case Platform.ANDROID: {\n      return await androidGetNativelyDefinedRuntimeVersionAsync(ctx);\n    }\n    case Platform.IOS: {\n      return await iosGetNativelyDefinedRuntimeVersionAsync(ctx);\n    }\n    default:\n      throw new Error(`Platform is not supported.`);\n  }\n}\n\nexport function isEASUpdateConfigured(ctx: BuildContext<Job>): boolean {\n  const rawUrl = ctx.appConfig.updates?.url;\n  if (!rawUrl) {\n    return false;\n  }\n  try {\n    const url = new URL(rawUrl);\n    return ['u.expo.dev', 'staging-u.expo.dev'].includes(url.hostname);\n  } catch (err) {\n    ctx.logger.error({ err }, `Cannot parse expo.updates.url = ${rawUrl} as URL`);\n    ctx.logger.error(`Assuming EAS Update is not configured`);\n    return false;\n  }\n}\n"]}