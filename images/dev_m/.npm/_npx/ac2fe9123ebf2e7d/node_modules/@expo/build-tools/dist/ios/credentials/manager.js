"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = require("lodash");
const uuid_1 = require("uuid");
const distributionCertificateUtils = __importStar(require("./distributionCertificate"));
const keychain_1 = __importDefault(require("./keychain"));
const provisioningProfile_1 = __importDefault(require("./provisioningProfile"));
class IosCredentialsManager {
    constructor(ctx) {
        this.ctx = ctx;
        this.provisioningProfiles = [];
        this.cleanedUp = false;
    }
    async prepare() {
        if (this.ctx.job.simulator) {
            return null;
        }
        const { buildCredentials } = this.ctx.job.secrets;
        if (!buildCredentials) {
            throw new Error('credentials are required for an iOS build');
        }
        this.ctx.logger.info('Preparing credentials');
        this.ctx.logger.info('Creating keychain');
        this.keychain = new keychain_1.default(this.ctx);
        await this.keychain.create();
        const targets = Object.keys(buildCredentials);
        const targetProvisioningProfiles = {};
        for (const target of targets) {
            const provisioningProfile = await this.prepareTargetCredentials(target, buildCredentials[target]);
            this.provisioningProfiles.push(provisioningProfile);
            targetProvisioningProfiles[target] = provisioningProfile.data;
        }
        const applicationTargetProvisioningProfile = this.getApplicationTargetProvisioningProfile();
        // TODO: ensure that all dist types and team ids in the array are the same
        const { distributionType, teamId } = applicationTargetProvisioningProfile.data;
        return {
            applicationTargetProvisioningProfile,
            keychainPath: this.keychain.data.path,
            targetProvisioningProfiles,
            distributionType,
            teamId,
        };
    }
    async cleanUp() {
        if (this.cleanedUp || (!this.keychain && this.provisioningProfiles.length === 0)) {
            return;
        }
        if (this.keychain) {
            await this.keychain.destroy();
        }
        if (this.provisioningProfiles) {
            for (const provisioningProfile of this.provisioningProfiles) {
                await provisioningProfile.destroy();
            }
        }
        this.cleanedUp = true;
    }
    async prepareTargetCredentials(target, targetCredentials) {
        try {
            (0, assert_1.default)(this.keychain, 'Keychain should be initialized');
            this.ctx.logger.info(`Preparing credentials for target '${target}'`);
            const distCertPath = path_1.default.join(os_1.default.tmpdir(), `${(0, uuid_1.v4)()}.p12`);
            this.ctx.logger.info('Getting distribution certificate fingerprint and common name');
            const certificateFingerprint = distributionCertificateUtils.getFingerprint(targetCredentials.distributionCertificate);
            const certificateCommonName = distributionCertificateUtils.getCommonName(targetCredentials.distributionCertificate);
            this.ctx.logger.info(`Fingerprint = "${certificateFingerprint}", common name = ${certificateCommonName}`);
            this.ctx.logger.info(`Writing distribution certificate to ${distCertPath}`);
            await fs_extra_1.default.writeFile(distCertPath, Buffer.from(targetCredentials.distributionCertificate.dataBase64, 'base64'));
            this.ctx.logger.info('Importing distribution certificate into the keychain');
            await this.keychain.importCertificate(distCertPath, targetCredentials.distributionCertificate.password);
            this.ctx.logger.info('Initializing provisioning profile');
            const provisioningProfile = new provisioningProfile_1.default(this.ctx, Buffer.from(targetCredentials.provisioningProfileBase64, 'base64'), this.keychain.data.path, target, certificateCommonName);
            await provisioningProfile.init();
            this.ctx.logger.info('Validating whether distribution certificate has been imported successfully');
            await this.keychain.ensureCertificateImported(provisioningProfile.data.teamId, certificateFingerprint);
            this.ctx.logger.info('Verifying whether the distribution certificate and provisioning profile match');
            provisioningProfile.verifyCertificate(certificateFingerprint);
            return provisioningProfile;
        }
        catch (err) {
            await this.cleanUp();
            throw err;
        }
    }
    getApplicationTargetProvisioningProfile() {
        // sorting works because bundle ids share common prefix
        const sorted = (0, lodash_1.orderBy)(this.provisioningProfiles, 'data.bundleIdentifier', 'asc');
        return sorted[0];
    }
}
exports.default = IosCredentialsManager;
//# sourceMappingURL=manager.js.map