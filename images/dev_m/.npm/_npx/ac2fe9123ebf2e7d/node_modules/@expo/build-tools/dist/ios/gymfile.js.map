{"version":3,"file":"gymfile.js","sourceRoot":"","sources":["../../src/ios/gymfile.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAExB,wEAA+C;AAC/C,wDAA0B;AAI1B,MAAM,0BAA0B,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,0CAA0C,CAAC,CAAC;AACpG,MAAM,4BAA4B,GAAG,cAAI,CAAC,IAAI,CAC5C,SAAS,EACT,4CAA4C,CAC7C,CAAC;AAuBK,KAAK,UAAU,4BAA4B,CAAC,EACjD,UAAU,EACV,KAAK,EACL,WAAW,EACX,MAAM,EACN,kBAAkB,EAClB,YAAY,EACZ,eAAe,EACf,aAAa,GACO;IACpB,MAAM,QAAQ,GAA0C,EAAE,CAAC;IAC3D,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,0BAA0B,CAAC,CAAC;IACpE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;QAC5B,MAAM,OAAO,GAAG,WAAW,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC/D,QAAQ,CAAC,IAAI,CAAC;YACZ,SAAS,EAAE,OAAO,CAAC,gBAAgB;YACnC,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC,CAAC;KACJ;IAED,MAAM,4BAA4B,GAAI,YAGpC,aAHoC,YAAY,uBAAZ,YAAY,CAG7C,kDAAkD,CAAuB,CAAC;IAE/E,MAAM,kBAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC/B,MAAM,aAAa,CAAC;QAClB,QAAQ,EAAE,0BAA0B;QACpC,UAAU;QACV,IAAI,EAAE;YACJ,aAAa,EAAE,WAAW,CAAC,YAAY;YACvC,MAAM,EAAE,MAAM;YACd,0BAA0B,EAAE,kBAAkB;YAC9C,gBAAgB,EAAE,eAAe;YACjC,aAAa,EAAE,WAAW,CAAC,gBAAgB;YAC3C,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;YACpB,cAAc,EAAE,aAAa;YAC7B,QAAQ;YACR,4BAA4B;SAC7B;KACF,CAAC,CAAC;AACL,CAAC;AAzCD,oEAyCC;AAEM,KAAK,UAAU,8BAA8B,CAAC,EACnD,UAAU,EACV,KAAK,EACL,MAAM,EACN,kBAAkB,EAClB,eAAe,EACf,aAAa,EACb,oBAAoB,GACE;IACtB,MAAM,kBAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IAC/B,MAAM,aAAa,CAAC;QAClB,QAAQ,EAAE,4BAA4B;QACtC,UAAU;QACV,IAAI,EAAE;YACJ,MAAM,EAAE,MAAM;YACd,0BAA0B,EAAE,kBAAkB;YAC9C,4BAA4B,EAAE,oBAAoB;YAClD,iBAAiB,EAAE,eAAe;YAClC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;YACpB,cAAc,EAAE,aAAa;SAC9B;KACF,CAAC,CAAC;AACL,CAAC;AAtBD,wEAsBC;AAED,KAAK,UAAU,aAAa,CAAC,EAC3B,QAAQ,EACR,UAAU,EACV,IAAI,GAKL;IACC,MAAM,IAAA,uBAAY,EAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;AACtE,CAAC","sourcesContent":["import path from 'path';\n\nimport templateFile from '@expo/template-file';\nimport fs from 'fs-extra';\n\nimport { Credentials } from './credentials/manager';\n\nconst ARCHIVE_TEMPLATE_FILE_PATH = path.join(__dirname, '../../templates/Gymfile.archive.template');\nconst SIMULATOR_TEMPLATE_FILE_PATH = path.join(\n  __dirname,\n  '../../templates/Gymfile.simulator.template'\n);\n\ninterface ArchiveBuildOptions {\n  outputFile: string;\n  credentials: Credentials;\n  scheme: string;\n  buildConfiguration?: string;\n  outputDirectory: string;\n  clean: boolean;\n  logsDirectory: string;\n  entitlements?: object;\n}\n\ninterface SimulatorBuildOptions {\n  outputFile: string;\n  scheme: string;\n  buildConfiguration?: string;\n  derivedDataPath: string;\n  clean: boolean;\n  logsDirectory: string;\n  simulatorDestination: string;\n}\n\nexport async function createGymfileForArchiveBuild({\n  outputFile,\n  clean,\n  credentials,\n  scheme,\n  buildConfiguration,\n  entitlements,\n  outputDirectory,\n  logsDirectory,\n}: ArchiveBuildOptions): Promise<void> {\n  const PROFILES: { BUNDLE_ID: string; UUID: string }[] = [];\n  const targets = Object.keys(credentials.targetProvisioningProfiles);\n  for (const target of targets) {\n    const profile = credentials.targetProvisioningProfiles[target];\n    PROFILES.push({\n      BUNDLE_ID: profile.bundleIdentifier,\n      UUID: profile.uuid,\n    });\n  }\n\n  const ICLOUD_CONTAINER_ENVIRONMENT = (entitlements as Record<\n    string,\n    string | Record<string, string>\n  >)?.['com.apple.developer.icloud-container-environment'] as string | undefined;\n\n  await fs.mkdirp(logsDirectory);\n  await createGymfile({\n    template: ARCHIVE_TEMPLATE_FILE_PATH,\n    outputFile,\n    vars: {\n      KEYCHAIN_PATH: credentials.keychainPath,\n      SCHEME: scheme,\n      SCHEME_BUILD_CONFIGURATION: buildConfiguration,\n      OUTPUT_DIRECTORY: outputDirectory,\n      EXPORT_METHOD: credentials.distributionType,\n      CLEAN: String(clean),\n      LOGS_DIRECTORY: logsDirectory,\n      PROFILES,\n      ICLOUD_CONTAINER_ENVIRONMENT,\n    },\n  });\n}\n\nexport async function createGymfileForSimulatorBuild({\n  outputFile,\n  clean,\n  scheme,\n  buildConfiguration,\n  derivedDataPath,\n  logsDirectory,\n  simulatorDestination,\n}: SimulatorBuildOptions): Promise<void> {\n  await fs.mkdirp(logsDirectory);\n  await createGymfile({\n    template: SIMULATOR_TEMPLATE_FILE_PATH,\n    outputFile,\n    vars: {\n      SCHEME: scheme,\n      SCHEME_BUILD_CONFIGURATION: buildConfiguration,\n      SCHEME_SIMULATOR_DESTINATION: simulatorDestination,\n      DERIVED_DATA_PATH: derivedDataPath,\n      CLEAN: String(clean),\n      LOGS_DIRECTORY: logsDirectory,\n    },\n  });\n}\n\nasync function createGymfile({\n  template,\n  outputFile,\n  vars,\n}: {\n  template: string;\n  outputFile: string;\n  vars: Record<string, string | number | any>;\n}): Promise<void> {\n  await templateFile(template, vars, outputFile, { mustache: false });\n}\n"]}