"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGymfileForSimulatorBuild = exports.createGymfileForArchiveBuild = void 0;
const path_1 = __importDefault(require("path"));
const template_file_1 = __importDefault(require("@expo/template-file"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const ARCHIVE_TEMPLATE_FILE_PATH = path_1.default.join(__dirname, '../../templates/Gymfile.archive.template');
const SIMULATOR_TEMPLATE_FILE_PATH = path_1.default.join(__dirname, '../../templates/Gymfile.simulator.template');
async function createGymfileForArchiveBuild({ outputFile, clean, credentials, scheme, buildConfiguration, entitlements, outputDirectory, logsDirectory, }) {
    const PROFILES = [];
    const targets = Object.keys(credentials.targetProvisioningProfiles);
    for (const target of targets) {
        const profile = credentials.targetProvisioningProfiles[target];
        PROFILES.push({
            BUNDLE_ID: profile.bundleIdentifier,
            UUID: profile.uuid,
        });
    }
    const ICLOUD_CONTAINER_ENVIRONMENT = entitlements === null || entitlements === void 0 ? void 0 : entitlements['com.apple.developer.icloud-container-environment'];
    await fs_extra_1.default.mkdirp(logsDirectory);
    await createGymfile({
        template: ARCHIVE_TEMPLATE_FILE_PATH,
        outputFile,
        vars: {
            KEYCHAIN_PATH: credentials.keychainPath,
            SCHEME: scheme,
            SCHEME_BUILD_CONFIGURATION: buildConfiguration,
            OUTPUT_DIRECTORY: outputDirectory,
            EXPORT_METHOD: credentials.distributionType,
            CLEAN: String(clean),
            LOGS_DIRECTORY: logsDirectory,
            PROFILES,
            ICLOUD_CONTAINER_ENVIRONMENT,
        },
    });
}
exports.createGymfileForArchiveBuild = createGymfileForArchiveBuild;
async function createGymfileForSimulatorBuild({ outputFile, clean, scheme, buildConfiguration, derivedDataPath, logsDirectory, simulatorDestination, }) {
    await fs_extra_1.default.mkdirp(logsDirectory);
    await createGymfile({
        template: SIMULATOR_TEMPLATE_FILE_PATH,
        outputFile,
        vars: {
            SCHEME: scheme,
            SCHEME_BUILD_CONFIGURATION: buildConfiguration,
            SCHEME_SIMULATOR_DESTINATION: simulatorDestination,
            DERIVED_DATA_PATH: derivedDataPath,
            CLEAN: String(clean),
            LOGS_DIRECTORY: logsDirectory,
        },
    });
}
exports.createGymfileForSimulatorBuild = createGymfileForSimulatorBuild;
async function createGymfile({ template, outputFile, vars, }) {
    await (0, template_file_1.default)(template, vars, outputFile, { mustache: false });
}
//# sourceMappingURL=gymfile.js.map