{"version":3,"file":"context.js","sourceRoot":"","sources":["../src/context.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport {\n  BuildPhase,\n  BuildPhaseResult,\n  BuildPhaseStats,\n  Job,\n  LogMarker,\n  Env,\n  errors,\n  Metadata,\n  EnvironmentSecretType,\n} from '@expo/eas-build-job';\nimport { ExpoConfig } from '@expo/config';\nimport { bunyan } from '@expo/logger';\nimport { SpawnPromise, SpawnOptions, SpawnResult } from '@expo/turtle-spawn';\nimport { BuildTrigger } from '@expo/eas-build-job/dist/common';\n\nimport { PackageManager, resolvePackageManager } from './utils/packageManager';\nimport { resolveBuildPhaseErrorAsync } from './buildErrors/detectError';\nimport { readAppConfig } from './utils/appConfig';\nimport { createTemporaryEnvironmentSecretFile } from './utils/environmentSecrets';\n\nexport enum ArtifactType {\n  APPLICATION_ARCHIVE = 'APPLICATION_ARCHIVE',\n  BUILD_ARTIFACTS = 'BUILD_ARTIFACTS',\n  /**\n   * @deprecated\n   */\n  XCODE_BUILD_LOGS = 'XCODE_BUILD_LOGS',\n}\n\nexport type Artifacts = Partial<Record<ArtifactType, string>>;\n\nexport interface CacheManager {\n  saveCache(ctx: BuildContext<Job>): Promise<void>;\n  restoreCache(ctx: BuildContext<Job>): Promise<void>;\n}\n\nexport interface LogBuffer {\n  getLogs(): string[];\n  getPhaseLogs(buildPhase: string): string[];\n}\n\nexport interface BuildContextOptions {\n  workingdir: string;\n  logger: bunyan;\n  logBuffer: LogBuffer;\n  env: Env;\n  cacheManager?: CacheManager;\n  /**\n   * @deprecated\n   */\n  runGlobalExpoCliCommand: (args: string, options: SpawnOptions) => SpawnPromise<SpawnResult>;\n  uploadArtifacts: (type: ArtifactType, paths: string[], logger?: bunyan) => Promise<string | null>;\n  reportError?: (\n    msg: string,\n    err?: Error,\n    options?: { tags?: Record<string, string>; extras?: Record<string, string> }\n  ) => void;\n  reportBuildPhaseStats?: (stats: BuildPhaseStats) => void;\n  skipNativeBuild?: boolean;\n  metadata?: Metadata;\n}\n\nexport class SkipNativeBuildError extends Error {}\n\nexport class BuildContext<TJob extends Job> {\n  public readonly workingdir: string;\n  public logger: bunyan;\n  public readonly logBuffer: LogBuffer;\n  public readonly cacheManager?: CacheManager;\n  /**\n   * @deprecated\n   */\n  public readonly runGlobalExpoCliCommand: (\n    args: string,\n    options: SpawnOptions\n  ) => SpawnPromise<SpawnResult>;\n  public readonly reportError?: (\n    msg: string,\n    err?: Error,\n    options?: { tags?: Record<string, string>; extras?: Record<string, string> }\n  ) => void;\n  public readonly skipNativeBuild?: boolean;\n  public artifacts: Artifacts = {};\n\n  private _env: Env;\n  private _job: TJob;\n  private _metadata?: Metadata;\n  private readonly defaultLogger: bunyan;\n  private readonly _uploadArtifacts: (\n    type: ArtifactType,\n    paths: string[],\n    logger?: bunyan\n  ) => Promise<string | null>;\n  private buildPhase?: BuildPhase;\n  private buildPhaseSkipped = false;\n  private buildPhaseHasWarnings = false;\n  private _appConfig?: ExpoConfig;\n  private readonly reportBuildPhaseStats?: (stats: BuildPhaseStats) => void;\n\n  constructor(job: TJob, options: BuildContextOptions) {\n    this.workingdir = options.workingdir;\n    this.defaultLogger = options.logger;\n    this.logger = this.defaultLogger;\n    this.logBuffer = options.logBuffer;\n    this.cacheManager = options.cacheManager;\n    this.runGlobalExpoCliCommand = options.runGlobalExpoCliCommand;\n    this._uploadArtifacts = options.uploadArtifacts;\n    this.reportError = options.reportError;\n    this._job = job;\n    this._metadata = options.metadata;\n    this.skipNativeBuild = options.skipNativeBuild;\n    this.reportBuildPhaseStats = options.reportBuildPhaseStats;\n\n    const environmentSecrets = this.getEnvironmentSecrets(job);\n    this._env = {\n      ...options.env,\n      ...job?.builderEnvironment?.env,\n      ...environmentSecrets,\n    };\n  }\n\n  public get job(): TJob {\n    return this._job;\n  }\n  public get metadata(): Metadata | undefined {\n    return this._metadata;\n  }\n  public get env(): Env {\n    return this._env;\n  }\n  public get buildDirectory(): string {\n    return path.join(this.workingdir, 'build');\n  }\n  public get buildLogsDirectory(): string {\n    return path.join(this.workingdir, 'logs');\n  }\n  public get environmentSecrectsDirectory(): string {\n    return path.join(this.workingdir, 'environment-secrets');\n  }\n  public get reactNativeProjectDirectory(): string {\n    return path.join(this.buildDirectory, this.job.projectRootDirectory ?? '.');\n  }\n  public get packageManager(): PackageManager {\n    return resolvePackageManager(this.reactNativeProjectDirectory);\n  }\n  public get appConfig(): ExpoConfig {\n    if (!this._appConfig) {\n      this._appConfig = readAppConfig(this.reactNativeProjectDirectory, this.env, this.logger).exp;\n    }\n    return this._appConfig;\n  }\n\n  public async runBuildPhase<T>(\n    buildPhase: BuildPhase,\n    phase: () => Promise<T>,\n    {\n      doNotMarkStart = false,\n      doNotMarkEnd = false,\n    }: {\n      doNotMarkStart?: boolean;\n      doNotMarkEnd?: boolean;\n    } = {}\n  ): Promise<T> {\n    let startTimestamp = Date.now();\n    try {\n      this.setBuildPhase(buildPhase, { doNotMarkStart });\n      startTimestamp = Date.now();\n      const result = await phase();\n      const durationMs = Date.now() - startTimestamp;\n      const buildPhaseResult: BuildPhaseResult = this.buildPhaseSkipped\n        ? BuildPhaseResult.SKIPPED\n        : this.buildPhaseHasWarnings\n        ? BuildPhaseResult.WARNING\n        : BuildPhaseResult.SUCCESS;\n      this.endCurrentBuildPhase({ result: buildPhaseResult, doNotMarkEnd, durationMs });\n      return result;\n    } catch (err: any) {\n      const durationMs = Date.now() - startTimestamp;\n      const resolvedError = await this.handleBuildPhaseErrorAsync(err, buildPhase);\n      this.endCurrentBuildPhase({ result: BuildPhaseResult.FAIL, durationMs });\n      throw resolvedError;\n    }\n  }\n\n  public markBuildPhaseSkipped(): void {\n    this.buildPhaseSkipped = true;\n  }\n\n  public markBuildPhaseHasWarnings(): void {\n    this.buildPhaseHasWarnings = true;\n  }\n\n  public async uploadArtifacts(\n    type: ArtifactType,\n    paths: string[],\n    logger?: bunyan\n  ): Promise<void> {\n    const url = await this._uploadArtifacts(type, paths, logger);\n    if (url) {\n      this.artifacts[type] = url;\n    }\n  }\n\n  public updateEnv(env: Env): void {\n    if (this._job.triggeredBy !== BuildTrigger.GIT_BASED_INTEGRATION) {\n      throw new Error(\n        'Updating environment variables is only allowed when build was triggered by a git-based integration.'\n      );\n    }\n    this._env = {\n      ...env,\n      ...this._env,\n    };\n  }\n\n  public updateJobInformation(job: TJob, metadata: Metadata): void {\n    if (this._job.triggeredBy !== BuildTrigger.GIT_BASED_INTEGRATION) {\n      throw new Error(\n        'Updating job information is only allowed when build was triggered by a git-based integration.'\n      );\n    }\n    this._job = { ...job, triggeredBy: this._job.triggeredBy };\n    this._metadata = metadata;\n  }\n\n  private async handleBuildPhaseErrorAsync(\n    err: any,\n    buildPhase: BuildPhase\n  ): Promise<errors.BuildError> {\n    const buildError = await resolveBuildPhaseErrorAsync(\n      err,\n      this.logBuffer.getPhaseLogs(buildPhase),\n      {\n        job: this.job,\n        phase: buildPhase,\n        env: this.env,\n      },\n      this.buildLogsDirectory\n    );\n    if (buildError.errorCode === errors.ErrorCode.UNKNOWN_ERROR) {\n      // leaving message empty, website will display err.stack which already includes err.message\n      this.logger.error({ err }, '');\n    } else {\n      this.logger.error(`Error: ${buildError.userFacingMessage}`);\n    }\n    return buildError;\n  }\n\n  private setBuildPhase(buildPhase: BuildPhase, { doNotMarkStart = false } = {}): void {\n    if (this.buildPhase) {\n      if (this.buildPhase === buildPhase) {\n        return;\n      } else {\n        this.logger.info(\n          { marker: LogMarker.END_PHASE, result: BuildPhaseResult.UNKNOWN },\n          `End phase: ${this.buildPhase}`\n        );\n        this.logger = this.defaultLogger;\n      }\n    }\n    this.buildPhase = buildPhase;\n    this.logger = this.defaultLogger.child({ phase: buildPhase });\n    if (!doNotMarkStart) {\n      this.logger.info({ marker: LogMarker.START_PHASE }, `Start phase: ${this.buildPhase}`);\n    }\n  }\n\n  private endCurrentBuildPhase({\n    result,\n    doNotMarkEnd = false,\n    durationMs,\n  }: {\n    result: BuildPhaseResult;\n    doNotMarkEnd?: boolean;\n    durationMs: number;\n  }): void {\n    if (!this.buildPhase) {\n      return;\n    }\n\n    this.reportBuildPhaseStats?.({ buildPhase: this.buildPhase, result, durationMs });\n\n    if (!doNotMarkEnd) {\n      this.logger.info(\n        { marker: LogMarker.END_PHASE, result, durationMs },\n        `End phase: ${this.buildPhase}`\n      );\n    }\n    this.logger = this.defaultLogger;\n    this.buildPhase = undefined;\n    this.buildPhaseSkipped = false;\n    this.buildPhaseHasWarnings = false;\n  }\n\n  private getEnvironmentSecrets(job: TJob): Record<string, string> {\n    if (!job?.secrets?.environmentSecrets) {\n      return {};\n    }\n\n    const environmentSecrets: Record<string, string> = {};\n    for (const { name, type, value } of job.secrets.environmentSecrets) {\n      if (type === EnvironmentSecretType.STRING) {\n        environmentSecrets[name] = value;\n      } else {\n        environmentSecrets[name] = createTemporaryEnvironmentSecretFile(\n          this.environmentSecrectsDirectory,\n          value\n        );\n      }\n    }\n    return environmentSecrets;\n  }\n}\n"]}