"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureBuildGradle = void 0;
const path_1 = __importDefault(require("path"));
const config_plugins_1 = require("@expo/config-plugins");
const fs_extra_1 = __importDefault(require("fs-extra"));
const EAS_BUILD_GRADLE_TEMPLATE_PATH = path_1.default.join(__dirname, '../../templates/eas-build.gradle');
const APPLY_EAS_BUILD_GRADLE_LINE = 'apply from: "./eas-build.gradle"';
async function configureBuildGradle(ctx) {
    ctx.logger.info('Injecting signing config into build.gradle');
    if (await fs_extra_1.default.pathExists(getEasBuildGradlePath(ctx.reactNativeProjectDirectory))) {
        ctx.markBuildPhaseHasWarnings();
        ctx.logger.warn('eas-build.gradle script is deprecated, please remove it from your project.');
    }
    await deleteEasBuildGradle(ctx.reactNativeProjectDirectory);
    await createEasBuildGradle(ctx.reactNativeProjectDirectory);
    await addApplyToBuildGradle(ctx.reactNativeProjectDirectory);
}
exports.configureBuildGradle = configureBuildGradle;
async function deleteEasBuildGradle(projectRoot) {
    const easBuildGradlePath = getEasBuildGradlePath(projectRoot);
    await fs_extra_1.default.remove(easBuildGradlePath);
}
function getEasBuildGradlePath(projectRoot) {
    return path_1.default.join(projectRoot, 'android/app/eas-build.gradle');
}
async function createEasBuildGradle(projectRoot) {
    const easBuildGradlePath = getEasBuildGradlePath(projectRoot);
    await fs_extra_1.default.copy(EAS_BUILD_GRADLE_TEMPLATE_PATH, easBuildGradlePath);
}
async function addApplyToBuildGradle(projectRoot) {
    const buildGradlePath = config_plugins_1.AndroidConfig.Paths.getAppBuildGradleFilePath(projectRoot);
    const buildGradleContents = await fs_extra_1.default.readFile(path_1.default.join(buildGradlePath), 'utf8');
    if (hasLine(buildGradleContents, APPLY_EAS_BUILD_GRADLE_LINE)) {
        return;
    }
    await fs_extra_1.default.writeFile(buildGradlePath, `${buildGradleContents.trim()}\n${APPLY_EAS_BUILD_GRADLE_LINE}\n`);
}
function hasLine(haystack, needle) {
    return (haystack
        .replace(/\r\n/g, '\n')
        .split('\n')
        // Check for both single and double quotes
        .some((line) => line === needle || line === needle.replace(/"/g, "'")));
}
//# sourceMappingURL=gradleConfig.js.map