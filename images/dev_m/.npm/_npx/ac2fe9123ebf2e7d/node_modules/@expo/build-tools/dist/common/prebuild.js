"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prebuildAsync = void 0;
const semver_1 = __importDefault(require("semver"));
const project_1 = require("../utils/project");
const installDependencies_1 = require("./installDependencies");
async function prebuildAsync(ctx, options) {
    var _a;
    const customExpoCliVersion = (_a = ctx.job.builderEnvironment) === null || _a === void 0 ? void 0 : _a.expoCli;
    const shouldDisableSharp = !customExpoCliVersion || semver_1.default.satisfies(customExpoCliVersion, '>=5.4.4');
    const spawnOptions = {
        cwd: ctx.reactNativeProjectDirectory,
        logger: ctx.logger,
        env: Object.assign(Object.assign(Object.assign({}, (shouldDisableSharp ? { EXPO_IMAGE_UTILS_NO_SHARP: '1' } : {})), options === null || options === void 0 ? void 0 : options.extraEnvs), ctx.env),
    };
    const prebuildCommandArgs = getPrebuildCommandArgs(ctx);
    await (0, project_1.runExpoCliCommand)(ctx, prebuildCommandArgs, spawnOptions);
    await (0, installDependencies_1.installDependenciesAsync)(ctx);
}
exports.prebuildAsync = prebuildAsync;
function getPrebuildCommandArgs(ctx) {
    var _a, _b;
    let prebuildCommand = (_b = (_a = ctx.job.experimental) === null || _a === void 0 ? void 0 : _a.prebuildCommand) !== null && _b !== void 0 ? _b : `prebuild --non-interactive --no-install --platform ${ctx.job.platform}`;
    if (!prebuildCommand.match(/(?:--platform| -p)/)) {
        prebuildCommand = `${prebuildCommand} --platform ${ctx.job.platform}`;
    }
    const npxCommandPrefix = 'npx ';
    const expoCommandPrefix = 'expo ';
    const expoCliCommandPrefix = 'expo-cli ';
    if (prebuildCommand.startsWith(npxCommandPrefix)) {
        prebuildCommand = prebuildCommand.substring(npxCommandPrefix.length).trim();
    }
    if (prebuildCommand.startsWith(expoCommandPrefix)) {
        prebuildCommand = prebuildCommand.substring(expoCommandPrefix.length).trim();
    }
    if (prebuildCommand.startsWith(expoCliCommandPrefix)) {
        prebuildCommand = prebuildCommand.substring(expoCliCommandPrefix.length).trim();
    }
    if (!(0, project_1.shouldUseGlobalExpoCli)(ctx)) {
        prebuildCommand = prebuildCommand.replace(' --non-interactive', '');
    }
    return prebuildCommand.split(' ');
}
//# sourceMappingURL=prebuild.js.map