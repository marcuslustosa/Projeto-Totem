"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eas_build_job_1 = require("@expo/eas-build-job");
const context_1 = require("../context");
const expoUpdates_1 = require("../utils/expoUpdates");
const gradle_1 = require("../android/gradle");
const artifacts_1 = require("../utils/artifacts");
const hooks_1 = require("../utils/hooks");
const credentials_1 = require("../android/credentials");
const gradleConfig_1 = require("../android/gradleConfig");
const setup_1 = require("../common/setup");
const prebuild_1 = require("../common/prebuild");
const common_1 = require("./common");
async function androidBuilder(ctx) {
    return await (0, common_1.runBuilderWithHooksAsync)(ctx, buildAsync);
}
exports.default = androidBuilder;
async function buildAsync(ctx) {
    await (0, setup_1.setupAsync)(ctx);
    const hasNativeCode = ctx.job.type === eas_build_job_1.Workflow.GENERIC;
    if (hasNativeCode) {
        await ctx.runBuildPhase(eas_build_job_1.BuildPhase.FIX_GRADLEW, async () => {
            await (0, gradle_1.ensureLFLineEndingsInGradlewScript)(ctx);
        });
    }
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.PREBUILD, async () => {
        if (hasNativeCode) {
            ctx.markBuildPhaseSkipped();
            ctx.logger.info('Skipped running "expo prebuild" because the "android" directory already exists. Learn more about the build process: https://docs.expo.dev/build-reference/android-builds/');
            return;
        }
        await (0, prebuild_1.prebuildAsync)(ctx);
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.RESTORE_CACHE, async () => {
        var _a;
        await ((_a = ctx.cacheManager) === null || _a === void 0 ? void 0 : _a.restoreCache(ctx));
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.POST_INSTALL_HOOK, async () => {
        await (0, hooks_1.runHookIfPresent)(ctx, hooks_1.Hook.POST_INSTALL);
    });
    if (ctx.job.secrets.buildCredentials) {
        await ctx.runBuildPhase(eas_build_job_1.BuildPhase.PREPARE_CREDENTIALS, async () => {
            await (0, credentials_1.restoreCredentials)(ctx);
            await (0, gradleConfig_1.configureBuildGradle)(ctx);
        });
    }
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.CONFIGURE_EXPO_UPDATES, async () => {
        await (0, expoUpdates_1.configureExpoUpdatesIfInstalledAsync)(ctx);
    });
    if (ctx.skipNativeBuild) {
        throw new context_1.SkipNativeBuildError('Skipping Gradle build');
    }
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.RUN_GRADLEW, async () => {
        const gradleCommand = resolveGradleCommand(ctx.job);
        await (0, gradle_1.runGradleCommand)(ctx, gradleCommand);
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.PRE_UPLOAD_ARTIFACTS_HOOK, async () => {
        await (0, hooks_1.runHookIfPresent)(ctx, hooks_1.Hook.PRE_UPLOAD_ARTIFACTS);
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.SAVE_CACHE, async () => {
        var _a;
        await ((_a = ctx.cacheManager) === null || _a === void 0 ? void 0 : _a.saveCache(ctx));
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.UPLOAD_APPLICATION_ARCHIVE, async () => {
        var _a;
        const applicationArchives = await (0, artifacts_1.findArtifacts)(ctx.reactNativeProjectDirectory, (_a = ctx.job.applicationArchivePath) !== null && _a !== void 0 ? _a : 'android/app/build/outputs/**/*.{apk,aab}', ctx.logger);
        ctx.logger.info(`Application archives: ${applicationArchives.join(', ')}`);
        await ctx.uploadArtifacts(context_1.ArtifactType.APPLICATION_ARCHIVE, applicationArchives, ctx.logger);
    });
}
function resolveGradleCommand(job) {
    if (job.gradleCommand) {
        return job.gradleCommand;
    }
    else if (job.developmentClient) {
        return ':app:assembleDebug';
    }
    else if (!job.buildType) {
        return ':app:bundleRelease';
    }
    else if (job.buildType === eas_build_job_1.Android.BuildType.APK) {
        return ':app:assembleRelease';
    }
    else {
        return ':app:bundleRelease';
    }
}
//# sourceMappingURL=android.js.map