{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/utils/hooks.ts"],"names":[],"mappings":";;;;;;AACA,sEAAuC;AAIvC,qDAAkD;AAClD,uCAA0D;AAE1D,IAAY,IAUX;AAVD,WAAY,IAAI;IACd,6CAAqC,CAAA;IACrC,+CAAuC,CAAA;IACvC;;OAEG;IACH,+DAAuD,CAAA;IACvD,iDAAyC,CAAA;IACzC,6CAAqC,CAAA;IACrC,mDAA2C,CAAA;AAC7C,CAAC,EAVW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAUf;AAEM,KAAK,UAAU,gBAAgB,CACpC,GAAuB,EACvB,IAAU,EACV,EAAE,SAAS,KAA6C,EAAE;;IAE1D,MAAM,UAAU,GAAG,GAAG,CAAC,2BAA2B,CAAC;IACnD,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC,UAAU,CAAC,CAAC;IAChD,IAAI,MAAA,WAAW,CAAC,OAAO,0CAAG,IAAI,CAAC,EAAE;QAC/B,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,6CAA6C,CAAC,CAAC;QAC9E,wFAAwF;QACxF,yBAAyB;QACzB,MAAM,cAAc,GAClB,CAAC,MAAM,IAAA,sBAAY,EAAC,UAAU,CAAC,CAAC,IAAI,IAAI,KAAK,IAAI,CAAC,WAAW;YAC3D,CAAC,CAAC,+BAAc,CAAC,GAAG;YACpB,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC;QACzB,MAAM,IAAA,sBAAK,EAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YACzC,GAAG,EAAE,UAAU;YACf,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,GAAG,kCACE,GAAG,CAAC,GAAG,GACP,SAAS,CACb;SACF,CAAC,CAAC;KACJ;AACH,CAAC;AAxBD,4CAwBC","sourcesContent":["import { Job } from '@expo/eas-build-job';\nimport spawn from '@expo/turtle-spawn';\n\nimport { BuildContext } from '../context';\n\nimport { PackageManager } from './packageManager';\nimport { isUsingYarn2, readPackageJson } from './project';\n\nexport enum Hook {\n  PRE_INSTALL = 'eas-build-pre-install',\n  POST_INSTALL = 'eas-build-post-install',\n  /**\n   * @deprecated\n   */\n  PRE_UPLOAD_ARTIFACTS = 'eas-build-pre-upload-artifacts',\n  ON_BUILD_SUCCESS = 'eas-build-on-success',\n  ON_BUILD_ERROR = 'eas-build-on-error',\n  ON_BUILD_COMPLETE = 'eas-build-on-complete',\n}\n\nexport async function runHookIfPresent<TJob extends Job>(\n  ctx: BuildContext<TJob>,\n  hook: Hook,\n  { extraEnvs }: { extraEnvs?: Record<string, string> } = {}\n): Promise<void> {\n  const projectDir = ctx.reactNativeProjectDirectory;\n  const packageJson = readPackageJson(projectDir);\n  if (packageJson.scripts?.[hook]) {\n    ctx.logger.info(`Script '${hook}' is present in package.json, running it...`);\n    // when using yarn 2, it's not possible to run any scripts before running 'yarn install'\n    // use 'npm' in that case\n    const packageManager =\n      (await isUsingYarn2(projectDir)) && hook === Hook.PRE_INSTALL\n        ? PackageManager.NPM\n        : ctx.packageManager;\n    await spawn(packageManager, ['run', hook], {\n      cwd: projectDir,\n      logger: ctx.logger,\n      env: {\n        ...ctx.env,\n        ...extraEnvs,\n      },\n    });\n  }\n}\n"]}