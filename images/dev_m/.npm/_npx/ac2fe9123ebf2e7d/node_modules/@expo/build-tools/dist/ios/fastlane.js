"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runFastlane = exports.runFastlaneResign = exports.runFastlaneGym = void 0;
const path_1 = __importDefault(require("path"));
const turtle_spawn_1 = __importDefault(require("@expo/turtle-spawn"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const nullthrows_1 = __importDefault(require("nullthrows"));
const context_1 = require("../context");
const gymfile_1 = require("./gymfile");
const xcpretty_1 = require("./xcpretty");
const tvos_1 = require("./tvos");
const fastfile_1 = require("./fastfile");
async function runFastlaneGym(ctx, { scheme, buildConfiguration, credentials, entitlements, }) {
    await ensureGymfileExists(ctx, {
        scheme,
        buildConfiguration,
        credentials,
        logsDirectory: ctx.buildLogsDirectory,
        entitlements,
    });
    if (ctx.skipNativeBuild) {
        throw new context_1.SkipNativeBuildError('Skipping fastlane build');
    }
    const buildLogger = new xcpretty_1.XcodeBuildLogger(ctx.logger, ctx.reactNativeProjectDirectory);
    void buildLogger.watchLogFiles(ctx.buildLogsDirectory);
    try {
        await runFastlane(['gym'], {
            cwd: path_1.default.join(ctx.reactNativeProjectDirectory, 'ios'),
            logger: ctx.logger,
            env: ctx.env,
        });
    }
    finally {
        await buildLogger.flush();
    }
}
exports.runFastlaneGym = runFastlaneGym;
async function runFastlaneResign(ctx, { credentials, ipaPath }) {
    const { certificateCommonName } = credentials.applicationTargetProvisioningProfile.data;
    const fastlaneDirPath = path_1.default.join(ctx.buildDirectory, 'fastlane');
    await fs_extra_1.default.ensureDir(fastlaneDirPath);
    const fastfilePath = path_1.default.join(fastlaneDirPath, 'Fastfile');
    await (0, fastfile_1.createFastfileForResigningBuild)({
        outputFile: fastfilePath,
        ipaPath,
        keychainPath: credentials.keychainPath,
        signingIdentity: certificateCommonName,
        targetProvisioningProfiles: credentials.targetProvisioningProfiles,
    });
    await runFastlane(['do_resign'], {
        cwd: ctx.buildDirectory,
        logger: ctx.logger,
        env: ctx.env,
    });
}
exports.runFastlaneResign = runFastlaneResign;
async function runFastlane(fastlaneArgs, { logger, env, cwd, } = {}) {
    const fastlaneEnvVars = Object.assign({ FASTLANE_DISABLE_COLORS: '1', FASTLANE_SKIP_UPDATE_CHECK: '1', SKIP_SLOW_FASTLANE_WARNING: 'true', FASTLANE_HIDE_TIMESTAMP: 'true', LC_ALL: 'en_US.UTF-8' }, (env !== null && env !== void 0 ? env : process.env));
    return await (0, turtle_spawn_1.default)('fastlane', fastlaneArgs, {
        env: fastlaneEnvVars,
        logger,
        cwd,
    });
}
exports.runFastlane = runFastlane;
async function ensureGymfileExists(ctx, { scheme, buildConfiguration, credentials, logsDirectory, entitlements, }) {
    const gymfilePath = path_1.default.join(ctx.reactNativeProjectDirectory, 'ios/Gymfile');
    if (await fs_extra_1.default.pathExists(gymfilePath)) {
        ctx.logger.info('Gymfile already exists');
        return;
    }
    ctx.logger.info('Creating Gymfile');
    if (ctx.job.simulator) {
        const isTV = await (0, tvos_1.isTVOS)(ctx);
        const simulatorDestination = `generic/platform=${isTV ? 'tvOS' : 'iOS'} Simulator`;
        await (0, gymfile_1.createGymfileForSimulatorBuild)({
            outputFile: gymfilePath,
            scheme,
            buildConfiguration: buildConfiguration !== null && buildConfiguration !== void 0 ? buildConfiguration : 'release',
            derivedDataPath: './build',
            clean: false,
            logsDirectory,
            simulatorDestination,
        });
    }
    else {
        await (0, gymfile_1.createGymfileForArchiveBuild)({
            outputFile: gymfilePath,
            credentials: (0, nullthrows_1.default)(credentials, 'credentials must exist for non-simulator builds'),
            scheme,
            buildConfiguration,
            outputDirectory: './build',
            clean: false,
            logsDirectory,
            entitlements: entitlements !== null && entitlements !== void 0 ? entitlements : undefined,
        });
    }
    ctx.logger.info('Gymfile created');
}
//# sourceMappingURL=fastlane.js.map