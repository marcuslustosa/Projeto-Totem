"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareArtifacts = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const tar_1 = __importDefault(require("tar"));
const config_1 = __importDefault(require("./config"));
async function prepareArtifacts(artifactPaths, logger) {
    var _a;
    const l = logger === null || logger === void 0 ? void 0 : logger.child({ phase: 'PREPARE_ARTIFACTS' });
    l === null || l === void 0 ? void 0 : l.info('Preparing artifacts');
    let suffix;
    let localPath;
    if (artifactPaths.length === 1 && !(await fs_extra_1.default.lstat(artifactPaths[0])).isDirectory()) {
        [localPath] = artifactPaths;
        suffix = path_1.default.extname(artifactPaths[0]);
    }
    else {
        const parentDir = artifactPaths.reduce((acc, item) => getCommonParentDir(acc, item), artifactPaths[0]);
        const relativePathsToArchive = artifactPaths.map((absolute) => path_1.default.relative(parentDir, absolute));
        const archivePath = path_1.default.join(config_1.default.workingdir, 'artifacts.tar.gz');
        await tar_1.default.c({
            gzip: true,
            file: archivePath,
            cwd: parentDir,
        }, relativePathsToArchive);
        suffix = '.tar.gz';
        localPath = archivePath;
    }
    const artifactName = `build-${Date.now()}${suffix}`;
    const destPath = (_a = config_1.default.artifactPath) !== null && _a !== void 0 ? _a : path_1.default.join(config_1.default.artifactsDir, artifactName);
    await fs_extra_1.default.copy(localPath, destPath);
    l === null || l === void 0 ? void 0 : l.info({ phase: 'PREPARE_ARTIFACTS' }, `Writing artifacts to ${destPath}`);
    return destPath;
}
exports.prepareArtifacts = prepareArtifacts;
function getCommonParentDir(path1, path2) {
    const normalizedPath1 = path_1.default.normalize(path1);
    const normalizedPath2 = path_1.default.normalize(path2);
    let current = path_1.default.dirname(normalizedPath1);
    while (current !== '/') {
        if (normalizedPath2.startsWith(current)) {
            return current;
        }
        current = path_1.default.dirname(current);
    }
    return '/';
}
//# sourceMappingURL=artifacts.js.map