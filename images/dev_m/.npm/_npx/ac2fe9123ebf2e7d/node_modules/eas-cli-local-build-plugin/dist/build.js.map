{"version":3,"file":"build.js","sourceRoot":"","sources":["../src/build.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\n\nimport { Job, Platform, ArchiveSourceType, Metadata, Workflow } from '@expo/eas-build-job';\nimport pickBy from 'lodash/pickBy';\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport { Artifacts, SkipNativeBuildError } from '@expo/build-tools';\nimport nullthrows from 'nullthrows';\n\nimport { buildAndroidAsync } from './android';\nimport config from './config';\nimport { buildIosAsync } from './ios';\nimport { prepareWorkingdirAsync } from './workingdir';\n\nexport async function buildAsync(job: Job, metadata: Metadata): Promise<void> {\n  const workingdir = await prepareWorkingdirAsync();\n\n  try {\n    let username = metadata.username;\n    if (!username && job.type === Workflow.MANAGED) {\n      username = job.username;\n    }\n\n    // keep in sync with worker env vars\n    // https://github.com/expo/turtle-v2/blob/main/src/services/worker/src/env.ts\n    const unfilteredEnv: Record<string, string | undefined> = {\n      ...process.env,\n      ...job.builderEnvironment?.env,\n      EAS_BUILD: '1',\n      EAS_BUILD_RUNNER: 'local-build-plugin',\n      EAS_BUILD_PLATFORM: job.platform,\n      EAS_BUILD_WORKINGDIR: path.join(workingdir, 'build'),\n      EAS_BUILD_PROFILE: metadata.buildProfile,\n      EAS_BUILD_GIT_COMMIT_HASH: metadata.gitCommitHash,\n      EAS_BUILD_USERNAME: username,\n      ...(job.platform === Platform.ANDROID && {\n        EAS_BUILD_ANDROID_VERSION_CODE: job.version?.versionCode,\n        EAS_BUILD_ANDROID_VERSION_NAME: job.version?.versionName,\n      }),\n      ...(job.platform === Platform.IOS && {\n        EAS_BUILD_IOS_BUILD_NUMBER: job.version?.buildNumber,\n        EAS_BUILD_IOS_APP_VERSION: job.version?.appVersion,\n      }),\n    };\n    const env = pickBy(unfilteredEnv, (val?: string): val is string => !!val);\n\n    let artifacts: Artifacts | undefined;\n    switch (job.platform) {\n      case Platform.ANDROID: {\n        artifacts = await buildAndroidAsync(job, { env, workingdir, metadata });\n        break;\n      }\n      case Platform.IOS: {\n        artifacts = await buildIosAsync(job, { env, workingdir, metadata });\n        break;\n      }\n    }\n    if (!config.skipNativeBuild) {\n      console.log();\n      console.log(chalk.green('Build successful'));\n      console.log(\n        chalk.green(\n          `You can find the build artifacts in ${nullthrows(artifacts.APPLICATION_ARCHIVE)}`\n        )\n      );\n    }\n  } catch (e: any) {\n    if (e instanceof SkipNativeBuildError) {\n      console.log(e.message);\n      return;\n    }\n    console.error();\n    console.error(chalk.red(`Build failed`));\n    if (config.logger.level === 'debug') {\n      console.error(e.innerError);\n    }\n    throw e;\n  } finally {\n    if (!config.skipCleanup) {\n      await fs.remove(workingdir);\n    } else {\n      console.error(chalk.yellow(`Skipping cleanup, ${workingdir} won't be removed.`));\n    }\n    if (job.projectArchive.type === ArchiveSourceType.PATH) {\n      await fs.remove(job.projectArchive.path);\n    }\n  }\n}\n"]}