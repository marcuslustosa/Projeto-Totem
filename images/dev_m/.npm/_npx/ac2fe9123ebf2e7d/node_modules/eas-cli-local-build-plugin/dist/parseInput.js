"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseInputAsync = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const joi_1 = __importDefault(require("joi"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const exit_1 = require("./exit");
const packageJson = require('../package.json');
const ParamsSchema = joi_1.default.object({
    job: joi_1.default.object().unknown(),
    metadata: joi_1.default.object().unknown(),
});
async function parseInputAsync() {
    if (process.argv.findIndex((arg) => arg === '--version' || arg === '-v') !== -1) {
        console.log(packageJson.version);
        process.exit(0);
    }
    const rawInput = process.argv[2];
    if (!rawInput) {
        displayHelp();
        process.exit(1);
    }
    let parsedParams;
    try {
        parsedParams = JSON.parse(Buffer.from(rawInput, 'base64').toString('utf8'));
    }
    catch (err) {
        console.error(`${chalk_1.default.red('The input passed as a argument is not base64 encoded json.')}`);
        throw err;
    }
    const params = validateParams(parsedParams);
    (0, exit_1.registerHandler)(async () => {
        if (params.job.projectArchive.type === eas_build_job_1.ArchiveSourceType.PATH) {
            await fs_extra_1.default.remove(params.job.projectArchive.path);
        }
    });
    return params;
}
exports.parseInputAsync = parseInputAsync;
function validateParams(params) {
    const { value, error } = ParamsSchema.validate(params, {
        stripUnknown: true,
        convert: true,
        abortEarly: false,
    });
    if (error) {
        throw error;
    }
    try {
        const job = (0, eas_build_job_1.sanitizeJob)(value.job);
        const metadata = (0, eas_build_job_1.sanitizeMetadata)(value.metadata);
        return Object.assign(Object.assign({}, value), { job, metadata });
    }
    catch (err) {
        console.log(`Currently using ${packageJson.name}@${packageJson.version}.`);
        console.error(chalk_1.default.red(`Job object has incorrect format, update to latest versions of ${chalk_1.default.bold('eas-cli')} and ${chalk_1.default.bold(packageJson.name)} to make sure you are using compatible packages.`));
        throw err;
    }
}
function displayHelp() {
    console.log(`This tool is not intended for standalone use, it will be used internally by ${chalk_1.default.bold('eas-cli')} when building with flag ${chalk_1.default.bold('--local')}.`);
}
//# sourceMappingURL=parseInput.js.map