"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAndroidAsync = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const build_tools_1 = require("@expo/build-tools");
const omit_1 = __importDefault(require("lodash/omit"));
const logger_1 = __importStar(require("./logger"));
const artifacts_1 = require("./artifacts");
const config_1 = __importDefault(require("./config"));
const expoCli_1 = require("./expoCli");
async function buildAndroidAsync(job, { workingdir, env: baseEnv, metadata }) {
    var _a, _b;
    const versionName = (_a = job.version) === null || _a === void 0 ? void 0 : _a.versionName;
    const versionCode = (_b = job.version) === null || _b === void 0 ? void 0 : _b.versionCode;
    const env = Object.assign(Object.assign(Object.assign({}, baseEnv), (versionCode && { EAS_BUILD_ANDROID_VERSION_CODE: versionCode })), (versionName && { EAS_BUILD_ANDROID_VERSION_NAME: versionName }));
    const ctx = new build_tools_1.BuildContext(job, {
        workingdir,
        logger: logger_1.default,
        logBuffer: logger_1.logBuffer,
        runGlobalExpoCliCommand: expoCli_1.runGlobalExpoCliCommandAsync,
        uploadArtifacts: async (type, paths, logger) => {
            if (type !== build_tools_1.ArtifactType.APPLICATION_ARCHIVE) {
                return null;
            }
            else {
                return await (0, artifacts_1.prepareArtifacts)(paths, logger);
            }
        },
        env,
        metadata,
        skipNativeBuild: config_1.default.skipNativeBuild,
    });
    await ctx.runBuildPhase(eas_build_job_1.BuildPhase.START_BUILD, async () => {
        ctx.logger.info({ job: (0, omit_1.default)(ctx.job, 'secrets') }, 'Starting build');
    });
    return await build_tools_1.Builders.androidBuilder(ctx);
}
exports.buildAndroidAsync = buildAndroidAsync;
//# sourceMappingURL=android.js.map