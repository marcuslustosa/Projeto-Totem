{"version":3,"file":"checkRuntime.js","sourceRoot":"","sources":["../src/checkRuntime.ts"],"names":[],"mappings":"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","sourcesContent":["import { Job, Platform } from '@expo/eas-build-job';\nimport chalk from 'chalk';\nimport spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\n\ninterface Validator {\n  platform?: Platform;\n  checkAsync: (job: Job) => Promise<void>;\n}\n\nfunction warn(msg: string): void {\n  console.log(chalk.yellow(msg));\n}\n\nfunction error(msg: string): void {\n  console.error(chalk.red(msg));\n}\n\nconst validators: Validator[] = [\n  {\n    async checkAsync(job: Job) {\n      if (job.platform === Platform.IOS && process.platform !== 'darwin') {\n        throw new Error('iOS builds can only be run on macOS.');\n      } else if (\n        job.platform === Platform.ANDROID &&\n        !['linux', 'darwin'].includes(process.platform)\n      ) {\n        throw new Error('Android builds are supported only on Linux and macOS');\n      }\n    },\n  },\n  {\n    async checkAsync(job: Job) {\n      try {\n        const version = (await spawnAsync('node', ['--version'], { stdio: 'pipe' })).stdout.trim();\n        const sanitizedVersion = version.startsWith('v') ? version.slice(1) : version;\n        const versionFromJob = job.builderEnvironment?.node;\n        if (versionFromJob) {\n          const sanitizedVersionFromJob = versionFromJob.startsWith('v')\n            ? versionFromJob.slice(1)\n            : versionFromJob;\n          if (sanitizedVersion !== sanitizedVersionFromJob) {\n            warn(\n              'Node.js version in your eas.json does not match the Node.js currently installed in your system'\n            );\n          }\n        }\n      } catch (err) {\n        error(\"Node.js is not available, make sure it's installed and in your PATH\");\n        throw err;\n      }\n    },\n  },\n  {\n    async checkAsync(job: Job) {\n      const versionFromJob = job.builderEnvironment?.yarn;\n      if (!versionFromJob) {\n        return;\n      }\n      try {\n        const version = (await spawnAsync('yarn', ['--version'], { stdio: 'pipe' })).stdout.trim();\n        if (versionFromJob !== version) {\n          warn(\n            'Yarn version in your eas.json does not match the yarn currently installed in your system'\n          );\n        }\n      } catch (err) {\n        warn(\"Yarn is not available, make sure it's installed and in your PATH\");\n      }\n    },\n  },\n  {\n    platform: Platform.ANDROID,\n    async checkAsync(_) {\n      if (!process.env.ANDROID_NDK_HOME) {\n        warn(\n          'ANDROID_NDK_HOME environment variable was not specified, continuing build without NDK'\n        );\n        return;\n      }\n      if (!(await fs.pathExists(process.env.ANDROID_NDK_HOME))) {\n        throw new Error(`NDK was not found under ${process.env.ANDROID_NDK_HOME}`);\n      }\n    },\n  },\n  {\n    platform: Platform.IOS,\n    async checkAsync() {\n      try {\n        await spawnAsync('fastlane', ['--version'], {\n          stdio: 'pipe',\n          env: {\n            ...process.env,\n            FASTLANE_DISABLE_COLORS: '1',\n            FASTLANE_SKIP_UPDATE_CHECK: '1',\n            SKIP_SLOW_FASTLANE_WARNING: 'true',\n            FASTLANE_HIDE_TIMESTAMP: 'true',\n          },\n        });\n      } catch (err) {\n        error(\"Fastlane is not available, make sure it's installed and in your PATH\");\n        throw err;\n      }\n    },\n  },\n  {\n    platform: Platform.IOS,\n    async checkAsync(job: Job) {\n      try {\n        const version = (await spawnAsync('pod', ['--version'], { stdio: 'pipe' })).stdout.trim();\n        const versionFromJob = job.platform === Platform.IOS && job.builderEnvironment?.cocoapods;\n        if (versionFromJob && versionFromJob !== version) {\n          warn(\n            'Cocoapods version in your eas.json does not match the version currently installed in your system'\n          );\n        }\n      } catch (err) {\n        error(\"Cocoapods is not available, make sure it's installed and in your PATH\");\n        throw err;\n      }\n    },\n  },\n];\n\nexport async function checkRuntimeAsync(job: Job): Promise<void> {\n  for (const validator of validators) {\n    if (validator.platform === job.platform || !validator.platform) {\n      await validator.checkAsync(job);\n    }\n  }\n}\n"]}