{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { Writable } from 'stream';\n\nimport bunyan from '@expo/bunyan';\nimport chalk from 'chalk';\nimport omit from 'lodash/omit';\nimport { LogBuffer } from '@expo/build-tools';\n\nimport config from './config';\n\ninterface Log {\n  msg: string;\n  level: number;\n  err?: any;\n  marker?: string;\n  phase: string;\n  source: 'stdout' | 'stderr';\n}\nconst MAX_LINES_IN_BUFFER = 100;\n\ninterface CachedLog {\n  msg: string;\n  phase: string;\n}\n\nclass BuildCliLogBuffer extends Writable implements LogBuffer {\n  public writable = true;\n  public buffer: CachedLog[] = [];\n\n  constructor(private readonly numberOfLines: number) {\n    super();\n  }\n\n  public write(rec: any): boolean {\n    if (\n      // verify required fields\n      typeof rec !== 'object' ||\n      typeof rec?.msg !== 'string' ||\n      typeof rec?.phase !== 'string' ||\n      // use only logs from spawn commands\n      (rec?.source !== 'stdout' && rec?.source !== 'stderr') ||\n      // skip all short lines (it could potentially be some loader)\n      (rec?.msg ?? '').length < 3\n    ) {\n      return true;\n    }\n    if (this.buffer.length >= this.numberOfLines) {\n      this.buffer.shift();\n    }\n    this.buffer.push({ msg: rec.msg, phase: rec.phase });\n    return true;\n  }\n\n  public getLogs(): string[] {\n    return this.buffer.map(({ msg }) => msg);\n  }\n\n  public getPhaseLogs(buildPhase: string): string[] {\n    return this.buffer.filter(({ phase }) => phase === buildPhase).map(({ msg }) => msg);\n  }\n}\n\nclass PrettyStream extends Writable {\n  write(rawLog: string): boolean {\n    const log = JSON.parse(rawLog) as Log;\n    if (log.marker) {\n      return true;\n    }\n    const msg = this.formatMessage(log);\n    if (log.level >= bunyan.ERROR || log.source === 'stderr') {\n      console.error(msg);\n    } else {\n      console.log(msg);\n    }\n\n    const extraProperties = omit(log, [\n      'msg',\n      'err',\n      'level',\n      'phase',\n      'marker',\n      'source',\n      'time',\n      'id',\n      'v',\n      'pid',\n      'hostname',\n      'name',\n    ]);\n    if (Object.keys(extraProperties).length !== 0) {\n      const str = JSON.stringify(extraProperties, null, 2);\n      // substring removes `{\\n` and `\\n}`\n      console.log(chalk.gray(str.substring(2, str.length - 2)));\n    }\n    if (log?.err?.stack) {\n      console.error(chalk.red(log.err.stack));\n    }\n    return true;\n  }\n\n  private formatMessage(log: Log): string {\n    const phase = log.phase;\n    switch (log.level) {\n      case bunyan.DEBUG:\n        return `[${phase}] ${chalk.gray(log.msg)}`;\n      case bunyan.INFO: {\n        const msg = log.source === 'stderr' ? chalk.red(log.msg) : log.msg;\n        return `[${phase}] ${msg}`;\n      }\n      case bunyan.WARN:\n        return `[${phase}] ${chalk.yellow(log.msg)}`;\n      case bunyan.ERROR:\n        return `[${phase}] ${chalk.red(log.msg)}`;\n      case bunyan.FATAL:\n        return `[${phase}] ${chalk.red(log.msg)}`;\n      default:\n        return log.msg;\n    }\n  }\n}\n\nexport const logBuffer = new BuildCliLogBuffer(MAX_LINES_IN_BUFFER);\n\nconst defaultlogger = bunyan.createLogger({\n  name: 'eas-build-cli',\n  serializers: bunyan.stdSerializers,\n  streams: [\n    {\n      level: config.logger.level,\n      stream: new PrettyStream(),\n    },\n    {\n      level: 'info',\n      stream: logBuffer,\n    },\n  ],\n});\n\nexport default defaultlogger;\n"]}