"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logBuffer = void 0;
const stream_1 = require("stream");
const bunyan_1 = __importDefault(require("@expo/bunyan"));
const chalk_1 = __importDefault(require("chalk"));
const omit_1 = __importDefault(require("lodash/omit"));
const config_1 = __importDefault(require("./config"));
const MAX_LINES_IN_BUFFER = 100;
class BuildCliLogBuffer extends stream_1.Writable {
    constructor(numberOfLines) {
        super();
        this.numberOfLines = numberOfLines;
        this.writable = true;
        this.buffer = [];
    }
    write(rec) {
        var _a;
        if (
        // verify required fields
        typeof rec !== 'object' ||
            typeof (rec === null || rec === void 0 ? void 0 : rec.msg) !== 'string' ||
            typeof (rec === null || rec === void 0 ? void 0 : rec.phase) !== 'string' ||
            // use only logs from spawn commands
            ((rec === null || rec === void 0 ? void 0 : rec.source) !== 'stdout' && (rec === null || rec === void 0 ? void 0 : rec.source) !== 'stderr') ||
            // skip all short lines (it could potentially be some loader)
            ((_a = rec === null || rec === void 0 ? void 0 : rec.msg) !== null && _a !== void 0 ? _a : '').length < 3) {
            return true;
        }
        if (this.buffer.length >= this.numberOfLines) {
            this.buffer.shift();
        }
        this.buffer.push({ msg: rec.msg, phase: rec.phase });
        return true;
    }
    getLogs() {
        return this.buffer.map(({ msg }) => msg);
    }
    getPhaseLogs(buildPhase) {
        return this.buffer.filter(({ phase }) => phase === buildPhase).map(({ msg }) => msg);
    }
}
class PrettyStream extends stream_1.Writable {
    write(rawLog) {
        var _a;
        const log = JSON.parse(rawLog);
        if (log.marker) {
            return true;
        }
        const msg = this.formatMessage(log);
        if (log.level >= bunyan_1.default.ERROR || log.source === 'stderr') {
            console.error(msg);
        }
        else {
            console.log(msg);
        }
        const extraProperties = (0, omit_1.default)(log, [
            'msg',
            'err',
            'level',
            'phase',
            'marker',
            'source',
            'time',
            'id',
            'v',
            'pid',
            'hostname',
            'name',
        ]);
        if (Object.keys(extraProperties).length !== 0) {
            const str = JSON.stringify(extraProperties, null, 2);
            // substring removes `{\n` and `\n}`
            console.log(chalk_1.default.gray(str.substring(2, str.length - 2)));
        }
        if ((_a = log === null || log === void 0 ? void 0 : log.err) === null || _a === void 0 ? void 0 : _a.stack) {
            console.error(chalk_1.default.red(log.err.stack));
        }
        return true;
    }
    formatMessage(log) {
        const phase = log.phase;
        switch (log.level) {
            case bunyan_1.default.DEBUG:
                return `[${phase}] ${chalk_1.default.gray(log.msg)}`;
            case bunyan_1.default.INFO: {
                const msg = log.source === 'stderr' ? chalk_1.default.red(log.msg) : log.msg;
                return `[${phase}] ${msg}`;
            }
            case bunyan_1.default.WARN:
                return `[${phase}] ${chalk_1.default.yellow(log.msg)}`;
            case bunyan_1.default.ERROR:
                return `[${phase}] ${chalk_1.default.red(log.msg)}`;
            case bunyan_1.default.FATAL:
                return `[${phase}] ${chalk_1.default.red(log.msg)}`;
            default:
                return log.msg;
        }
    }
}
exports.logBuffer = new BuildCliLogBuffer(MAX_LINES_IN_BUFFER);
const defaultlogger = bunyan_1.default.createLogger({
    name: 'eas-build-cli',
    serializers: bunyan_1.default.stdSerializers,
    streams: [
        {
            level: config_1.default.logger.level,
            stream: new PrettyStream(),
        },
        {
            level: 'info',
            stream: exports.logBuffer,
        },
    ],
});
exports.default = defaultlogger;
//# sourceMappingURL=logger.js.map