{"version":3,"file":"android.js","sourceRoot":"","sources":["../src/android.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,uDAA+D;AAC/D,mDAAoF;AACpF,uDAA+B;AAE/B,mDAA6C;AAE7C,2CAA+C;AAC/C,sDAA8B;AAC9B,uCAAyD;AAElD,KAAK,UAAU,iBAAiB,CACrC,GAAgB,EAChB,EAAE,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAe;;IAEnD,MAAM,WAAW,GAAG,MAAA,GAAG,CAAC,OAAO,0CAAE,WAAW,CAAC;IAC7C,MAAM,WAAW,GAAG,MAAA,GAAG,CAAC,OAAO,0CAAE,WAAW,CAAC;IAC7C,MAAM,GAAG,iDACJ,OAAO,GACP,CAAC,WAAW,IAAI,EAAE,8BAA8B,EAAE,WAAW,EAAE,CAAC,GAChE,CAAC,WAAW,IAAI,EAAE,8BAA8B,EAAE,WAAW,EAAE,CAAC,CACpE,CAAC;IACF,MAAM,GAAG,GAAG,IAAI,0BAAY,CAAc,GAAG,EAAE;QAC7C,UAAU;QACV,MAAM,EAAN,gBAAM;QACN,SAAS,EAAT,kBAAS;QACT,uBAAuB,EAAE,sCAA4B;QACrD,eAAe,EAAE,KAAK,EAAE,IAAkB,EAAE,KAAe,EAAE,MAAe,EAAE,EAAE;YAC9E,IAAI,IAAI,KAAK,0BAAY,CAAC,mBAAmB,EAAE;gBAC7C,OAAO,IAAI,CAAC;aACb;iBAAM;gBACL,OAAO,MAAM,IAAA,4BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aAC9C;QACH,CAAC;QACD,GAAG;QACH,QAAQ;QACR,eAAe,EAAE,gBAAM,CAAC,eAAe;KACxC,CAAC,CAAC;IAEH,MAAM,GAAG,CAAC,aAAa,CAAC,0BAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QACzD,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAA,cAAI,EAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,sBAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AAC5C,CAAC;AAjCD,8CAiCC","sourcesContent":["import { bunyan } from '@expo/logger';\nimport { Android, BuildPhase, Env } from '@expo/eas-build-job';\nimport { Builders, BuildContext, ArtifactType, Artifacts } from '@expo/build-tools';\nimport omit from 'lodash/omit';\n\nimport logger, { logBuffer } from './logger';\nimport { BuildParams } from './types';\nimport { prepareArtifacts } from './artifacts';\nimport config from './config';\nimport { runGlobalExpoCliCommandAsync } from './expoCli';\n\nexport async function buildAndroidAsync(\n  job: Android.Job,\n  { workingdir, env: baseEnv, metadata }: BuildParams\n): Promise<Artifacts> {\n  const versionName = job.version?.versionName;\n  const versionCode = job.version?.versionCode;\n  const env: Env = {\n    ...baseEnv,\n    ...(versionCode && { EAS_BUILD_ANDROID_VERSION_CODE: versionCode }),\n    ...(versionName && { EAS_BUILD_ANDROID_VERSION_NAME: versionName }),\n  };\n  const ctx = new BuildContext<Android.Job>(job, {\n    workingdir,\n    logger,\n    logBuffer,\n    runGlobalExpoCliCommand: runGlobalExpoCliCommandAsync,\n    uploadArtifacts: async (type: ArtifactType, paths: string[], logger?: bunyan) => {\n      if (type !== ArtifactType.APPLICATION_ARCHIVE) {\n        return null;\n      } else {\n        return await prepareArtifacts(paths, logger);\n      }\n    },\n    env,\n    metadata,\n    skipNativeBuild: config.skipNativeBuild,\n  });\n\n  await ctx.runBuildPhase(BuildPhase.START_BUILD, async () => {\n    ctx.logger.info({ job: omit(ctx.job, 'secrets') }, 'Starting build');\n  });\n\n  return await Builders.androidBuilder(ctx);\n}\n"]}