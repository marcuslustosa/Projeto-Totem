{"version":3,"file":"exit.js","sourceRoot":"","sources":["../src/exit.ts"],"names":[],"mappings":";;;;;;AAAA,sDAA8B;AAE9B,MAAM,QAAQ,GAAmC,EAAE,CAAC;AACpD,IAAI,gBAAgB,GAAG,KAAK,CAAC;AAE7B,SAAgB,mBAAmB;IACjC,IAAI,iBAAiB,GAAG,KAAK,CAAC;IAC9B,MAAM,UAAU,GAAG,KAAK,IAAmB,EAAE;QAC3C,IAAI;YACF,8DAA8D;YAC9D,6BAA6B;YAC7B,IAAI,iBAAiB,EAAE;gBACrB,OAAO;aACR;YACD,iBAAiB,GAAG,IAAI,CAAC;YACzB,gBAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,8BAA8B,CAAC,CAAC;YACjE,gBAAgB,GAAG,IAAI,CAAC;YACxB,MAAM,OAAO,CAAC,UAAU,CACtB,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;gBACvB,OAAO,OAAO,EAAE,CAAC;YACnB,CAAC,CAAC,CACH,CAAC;SACH;gBAAS;YACR,iBAAiB,GAAG,KAAK,CAAC;SAC3B;QACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC;IAEF,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;IAClC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACnC,CAAC;AAzBD,kDAyBC;AAED,SAAgB,eAAe,CAAC,EAA8B;IAC5D,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACpB,CAAC;AAFD,0CAEC;AAED,SAAgB,UAAU;IACxB,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAFD,gCAEC","sourcesContent":["import logger from './logger';\n\nconst handlers: (() => void | Promise<void>)[] = [];\nlet shouldExitStatus = false;\n\nexport function listenForInterrupts(): void {\n  let handlerInProgress = false;\n  const handleExit = async (): Promise<void> => {\n    try {\n      // when eas-cli calls childProcess.kill() local build receives\n      // signal twice in some cases\n      if (handlerInProgress) {\n        return;\n      }\n      handlerInProgress = true;\n      logger.error({ phase: 'ABORT' }, 'Received termination signal.');\n      shouldExitStatus = true;\n      await Promise.allSettled(\n        handlers.map((handler) => {\n          return handler();\n        })\n      );\n    } finally {\n      handlerInProgress = false;\n    }\n    process.exit(1);\n  };\n\n  process.on('SIGTERM', handleExit);\n  process.on('SIGINT', handleExit);\n}\n\nexport function registerHandler(fn: () => void | Promise<void>): void {\n  handlers.push(fn);\n}\n\nexport function shouldExit(): boolean {\n  return shouldExitStatus;\n}\n"]}