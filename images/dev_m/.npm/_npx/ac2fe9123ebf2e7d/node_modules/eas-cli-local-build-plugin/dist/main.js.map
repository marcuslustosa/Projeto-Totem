{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAE1B,6CAA+C;AAC/C,mCAAqC;AACrC,iCAAyD;AACzD,iDAAmD;AAEnD,IAAA,0BAAmB,GAAE,CAAC;AAEtB,KAAK,UAAU,IAAI;IACjB,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,4BAAe,GAAE,CAAC;QAClD,MAAM,IAAA,gCAAiB,EAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,IAAA,kBAAU,EAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KACjC;IAAC,OAAO,GAAQ,EAAE;QACjB,IAAI,CAAC,IAAA,iBAAU,GAAE,EAAE;YACjB,OAAO,CAAC,KAAK,CAAC,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;KACF;AACH,CAAC;AAED,KAAK,IAAI,EAAE,CAAC","sourcesContent":["import chalk from 'chalk';\n\nimport { parseInputAsync } from './parseInput';\nimport { buildAsync } from './build';\nimport { listenForInterrupts, shouldExit } from './exit';\nimport { checkRuntimeAsync } from './checkRuntime';\n\nlistenForInterrupts();\n\nasync function main(): Promise<void> {\n  try {\n    const { job, metadata } = await parseInputAsync();\n    await checkRuntimeAsync(job);\n    await buildAsync(job, metadata);\n  } catch (err: any) {\n    if (!shouldExit()) {\n      console.error(chalk.red(err.message));\n      process.exit(1);\n    }\n  }\n}\n\nvoid main();\n"]}