{"version":3,"file":"artifacts.js","sourceRoot":"","sources":["../src/artifacts.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAGxB,wDAA0B;AAC1B,8CAAsB;AAEtB,sDAA8B;AAEvB,KAAK,UAAU,gBAAgB,CAAC,aAAuB,EAAE,MAAe;;IAC7E,MAAM,CAAC,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC,CAAC;IACxD,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC/B,IAAI,MAAM,CAAC;IACX,IAAI,SAAS,CAAC;IACd,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,kBAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;QACnF,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;QAC5B,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;KACzC;SAAM;QACL,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CACpC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,EAC5C,aAAa,CAAC,CAAC,CAAC,CACjB,CAAC;QACF,MAAM,sBAAsB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC5D,cAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CACnC,CAAC;QAEF,MAAM,WAAW,GAAG,cAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;QACrE,MAAM,aAAG,CAAC,CAAC,CACT;YACE,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,WAAW;YACjB,GAAG,EAAE,SAAS;SACf,EACD,sBAAsB,CACvB,CAAC;QACF,MAAM,GAAG,SAAS,CAAC;QACnB,SAAS,GAAG,WAAW,CAAC;KACzB;IACD,MAAM,YAAY,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;IACpD,MAAM,QAAQ,GAAG,MAAA,gBAAM,CAAC,YAAY,mCAAI,cAAI,CAAC,IAAI,CAAC,gBAAM,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACrF,MAAM,kBAAE,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,EAAE,EAAE,wBAAwB,QAAQ,EAAE,CAAC,CAAC;IAC5E,OAAO,QAAQ,CAAC;AAClB,CAAC;AAlCD,4CAkCC;AAED,SAAS,kBAAkB,CAAC,KAAa,EAAE,KAAa;IACtD,MAAM,eAAe,GAAG,cAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC9C,MAAM,eAAe,GAAG,cAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC5C,OAAO,OAAO,KAAK,GAAG,EAAE;QACtB,IAAI,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACvC,OAAO,OAAO,CAAC;SAChB;QACD,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KACjC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import path from 'path';\n\nimport { bunyan } from '@expo/logger';\nimport fs from 'fs-extra';\nimport tar from 'tar';\n\nimport config from './config';\n\nexport async function prepareArtifacts(artifactPaths: string[], logger?: bunyan): Promise<string> {\n  const l = logger?.child({ phase: 'PREPARE_ARTIFACTS' });\n  l?.info('Preparing artifacts');\n  let suffix;\n  let localPath;\n  if (artifactPaths.length === 1 && !(await fs.lstat(artifactPaths[0])).isDirectory()) {\n    [localPath] = artifactPaths;\n    suffix = path.extname(artifactPaths[0]);\n  } else {\n    const parentDir = artifactPaths.reduce(\n      (acc, item) => getCommonParentDir(acc, item),\n      artifactPaths[0]\n    );\n    const relativePathsToArchive = artifactPaths.map((absolute) =>\n      path.relative(parentDir, absolute)\n    );\n\n    const archivePath = path.join(config.workingdir, 'artifacts.tar.gz');\n    await tar.c(\n      {\n        gzip: true,\n        file: archivePath,\n        cwd: parentDir,\n      },\n      relativePathsToArchive\n    );\n    suffix = '.tar.gz';\n    localPath = archivePath;\n  }\n  const artifactName = `build-${Date.now()}${suffix}`;\n  const destPath = config.artifactPath ?? path.join(config.artifactsDir, artifactName);\n  await fs.copy(localPath, destPath);\n  l?.info({ phase: 'PREPARE_ARTIFACTS' }, `Writing artifacts to ${destPath}`);\n  return destPath;\n}\n\nfunction getCommonParentDir(path1: string, path2: string): string {\n  const normalizedPath1 = path.normalize(path1);\n  const normalizedPath2 = path.normalize(path2);\n  let current = path.dirname(normalizedPath1);\n  while (current !== '/') {\n    if (normalizedPath2.startsWith(current)) {\n      return current;\n    }\n    current = path.dirname(current);\n  }\n  return '/';\n}\n"]}