"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAsync = void 0;
const path_1 = __importDefault(require("path"));
const eas_build_job_1 = require("@expo/eas-build-job");
const pickBy_1 = __importDefault(require("lodash/pickBy"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const build_tools_1 = require("@expo/build-tools");
const nullthrows_1 = __importDefault(require("nullthrows"));
const android_1 = require("./android");
const config_1 = __importDefault(require("./config"));
const ios_1 = require("./ios");
const workingdir_1 = require("./workingdir");
async function buildAsync(job, metadata) {
    var _a, _b, _c, _d, _e;
    const workingdir = await (0, workingdir_1.prepareWorkingdirAsync)();
    try {
        let username = metadata.username;
        if (!username && job.type === eas_build_job_1.Workflow.MANAGED) {
            username = job.username;
        }
        // keep in sync with worker env vars
        // https://github.com/expo/turtle-v2/blob/main/src/services/worker/src/env.ts
        const unfilteredEnv = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, process.env), (_a = job.builderEnvironment) === null || _a === void 0 ? void 0 : _a.env), { EAS_BUILD: '1', EAS_BUILD_RUNNER: 'local-build-plugin', EAS_BUILD_PLATFORM: job.platform, EAS_BUILD_WORKINGDIR: path_1.default.join(workingdir, 'build'), EAS_BUILD_PROFILE: metadata.buildProfile, EAS_BUILD_GIT_COMMIT_HASH: metadata.gitCommitHash, EAS_BUILD_USERNAME: username }), (job.platform === eas_build_job_1.Platform.ANDROID && {
            EAS_BUILD_ANDROID_VERSION_CODE: (_b = job.version) === null || _b === void 0 ? void 0 : _b.versionCode,
            EAS_BUILD_ANDROID_VERSION_NAME: (_c = job.version) === null || _c === void 0 ? void 0 : _c.versionName,
        })), (job.platform === eas_build_job_1.Platform.IOS && {
            EAS_BUILD_IOS_BUILD_NUMBER: (_d = job.version) === null || _d === void 0 ? void 0 : _d.buildNumber,
            EAS_BUILD_IOS_APP_VERSION: (_e = job.version) === null || _e === void 0 ? void 0 : _e.appVersion,
        }));
        const env = (0, pickBy_1.default)(unfilteredEnv, (val) => !!val);
        let artifacts;
        switch (job.platform) {
            case eas_build_job_1.Platform.ANDROID: {
                artifacts = await (0, android_1.buildAndroidAsync)(job, { env, workingdir, metadata });
                break;
            }
            case eas_build_job_1.Platform.IOS: {
                artifacts = await (0, ios_1.buildIosAsync)(job, { env, workingdir, metadata });
                break;
            }
        }
        if (!config_1.default.skipNativeBuild) {
            console.log();
            console.log(chalk_1.default.green('Build successful'));
            console.log(chalk_1.default.green(`You can find the build artifacts in ${(0, nullthrows_1.default)(artifacts.APPLICATION_ARCHIVE)}`));
        }
    }
    catch (e) {
        if (e instanceof build_tools_1.SkipNativeBuildError) {
            console.log(e.message);
            return;
        }
        console.error();
        console.error(chalk_1.default.red(`Build failed`));
        if (config_1.default.logger.level === 'debug') {
            console.error(e.innerError);
        }
        throw e;
    }
    finally {
        if (!config_1.default.skipCleanup) {
            await fs_extra_1.default.remove(workingdir);
        }
        else {
            console.error(chalk_1.default.yellow(`Skipping cleanup, ${workingdir} won't be removed.`));
        }
        if (job.projectArchive.type === eas_build_job_1.ArchiveSourceType.PATH) {
            await fs_extra_1.default.remove(job.projectArchive.path);
        }
    }
}
exports.buildAsync = buildAsync;
//# sourceMappingURL=build.js.map