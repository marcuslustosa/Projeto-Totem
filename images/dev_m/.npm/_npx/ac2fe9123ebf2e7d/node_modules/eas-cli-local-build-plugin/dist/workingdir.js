"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareWorkingdirAsync = void 0;
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const config_1 = __importDefault(require("./config"));
const logger_1 = __importDefault(require("./logger"));
const exit_1 = require("./exit");
async function prepareWorkingdirAsync() {
    const { workingdir } = config_1.default;
    logger_1.default.info({ phase: 'SETUP_WORKINGDIR' }, `Preparing workingdir ${workingdir}`);
    if ((await fs_extra_1.default.pathExists(workingdir)) && (await fs_extra_1.default.readdir(workingdir)).length > 0) {
        throw new Error('Workingdir is not empty.');
    }
    await fs_extra_1.default.mkdirp(path_1.default.join(workingdir, 'artifacts'));
    await fs_extra_1.default.mkdirp(path_1.default.join(workingdir, 'build'));
    (0, exit_1.registerHandler)(async () => {
        if (!config_1.default.skipCleanup) {
            await fs_extra_1.default.remove(workingdir);
        }
        else {
            console.error(chalk_1.default.yellow("EAS_LOCAL_BUILD_SKIP_CLEANUP is set, working dir won't be removed."));
        }
    });
    return workingdir;
}
exports.prepareWorkingdirAsync = prepareWorkingdirAsync;
//# sourceMappingURL=workingdir.js.map