{"_id":"expo-updates","_rev":"233-f98bbe8e81ae9d95e9f681709e08141d","name":"expo-updates","dist-tags":{"latest":"0.15.6"},"versions":{"0.0.1-alpha.0":{"name":"expo-updates","version":"0.0.1-alpha.0","description":"ExpoUpdates standalone module","main":"build/index.js","types":"build/index.d.ts","scripts":{},"keywords":["react-native","expo","expo-updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://github.com/expo/expo/tree/master/packages/expo-updates","peerDependencies":{"@unimodules/core":"~1.0.0"},"gitHead":"8413e821076a2eca36b302e68dd628ce2e1f591a","_id":"expo-updates@0.0.1-alpha.0","_nodeVersion":"10.16.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-fh92vSjatvR0spJv8LW+g4zM4/8HZF1bNsmGoCtsDDMHFZZb1cxPmaCysC+rq1e75y0RzzSH3gyzWKJPVGxmSw==","shasum":"6500e639e88bcc72badbf62f7a420547c14d0c8b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.0.1-alpha.0.tgz","fileCount":14,"unpackedSize":5623,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdQeLRCRA9TVsSAnZWagAAvKAP/imhPsHsuQDMGGbqymuR\nmbmj8WjNELjI6mCNPZJMKtYaBk+SP9ARKB3BgmpZi6YAGqF2W8gyHWbcJELo\n4PzwUaUEsVpmR99NLTCGAVfh3+YxpEIOPrQnY92lC2L1ysvhqGy/5/IY0aAT\ntFncbNmbSjC0T6MhvlbJ43J6bh8mzSMwZdxE3SumJv039aiKxVi7YskEWp/b\np+cpF3T5+JXxwAHfqG5bL1/2P2qUJHIKFhRwLovCejoLr2w2ZlYLj25VCU1t\nD2gjgKgM4XdYQdLckyHXhqXcrYnrzOJspUBBb4mK1P3jchGet91T1JRnB2jE\nIINTsvTIkJZ5OQNbZHdMVi2LCgIsPUrTdWG+MK88pNdLEP6pmgWFPqfmWybZ\n/MhoeEpCO85Ymo89ghWV8ldY+W6jQJPVpHqrni6KqkSkp0PKBncHEoAWGRnO\nuEI/4YRPA/aQZMksjPnlWRhNzmw0DSaO/p3425uIOmx9DePaPC8k1KAmTJZK\nee3GiMrgRVbJtwPfnpAQ8aRwUP2TuotgIe5DAMAeqTIeTAgLanY18EE4m25L\nTmLKCLysMW83YZwteonoDGR6YY+uj9J9jE3p7/AB5QK5W9ABV2PKPVoLsdq4\nx89Nee0xUsW9Mwk0JJqT5g2P/KwlLDbHzbTV+NUHUsNUHuhN7wt9Aw1zW9OK\nMiQ8\r\n=9DyN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDYppi0tC42XUdHa9CiFasCker6qtZUfdVf3KWlCRX8RAiEAz2DMphdj2Y7bewVMfz32bYV3xmTC6jKUHDAZ6yryDmE="}]},"maintainers":[{"name":"esamelson","email":"eric@expo.io"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.0.1-alpha.0_1564598993339_0.07218528401689284"},"_hasShrinkwrap":false},"0.0.1-rc.0":{"name":"expo-updates","version":"0.0.1-rc.0","description":"ExpoUpdates standalone module","main":"build/index.js","types":"build/index.d.ts","scripts":{},"keywords":["react-native","expo","expo-updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://github.com/expo/expo/tree/master/packages/expo-updates","peerDependencies":{"@unimodules/core":"~1.0.0"},"gitHead":"5d4fcf318390f59cecd1ae5d191afb15488a4447","readmeFilename":"README.md","readme":"# expo-updates\n\n`expo-updates` provides some great stuff.\n\nSee [<ModuleName> docs](https://docs.expo.io/versions/latest/sdk/<module-docs-name>) for documentation of this universal module's API.\n","_id":"expo-updates@0.0.1-rc.0","dist":{"shasum":"ea3af0ebab6e6344dbb46179947c4acd26ba25a2","integrity":"sha512-Qcg8GqcAsYpgLKSLo88CgOeAlHmo1eWCbDwqkfxE6yzL0S0ye2eYFkJd+Vm8OOGABQYejN23LDzirfkdJJdg4w==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.0.1-rc.0.tgz","fileCount":14,"unpackedSize":5666,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdfJqbCRA9TVsSAnZWagAA4W4QAIxu8yuEvY3rLvZhPdMG\n9qdX5QIJmymrdUotwjLNSN2QFuoktGvm8dhMqJiHHv4zGMs5FFMmbq0Rj8A7\nqtZ0AXzpWWP8kuwfFQ3xTEZ0yA4Ejz6rOCoPTjgntovUbyeM9O1gf5sXmO7t\nXUwghVzzpXw6Gfldnff60wE1EfYzVdohNP1CvibG4zK3uPKzTFJNZm2IykAL\nv6azSvuJ9eUJ0SmtXi3ip/c5x+Xj6x18hnkxJVfXUx13UK69j2x1LGD1ioJT\n3PVMWt/LFSSbGL39zaeohHJLwR+RDKzAJvLZA7qmzcEwScpNzu36KwcAi11p\neeo/G6Kh+i6nA9rVqsdvCGtrc6KJXyolJbzJ//pTZMOykEIcGWn2tPUNyvY+\nfTFisdmyKNNGgBSpB7BhI2n/MSb5OSaU9AhW/nXaJcRDmXfA4Sv2En89SnKv\nJZDDBg9GRuX+0bZQpQQcbUOxSq1lIbx4prsShQqE2sM79LEX6V3s1QIi4/EH\nI8bhVN7wwOHKWE/5/o+ALizHGKlQMumX+gk4+4DM+5UjDnehAHVdrXItljhA\ntGAR8UyFzB4efrI0k73HzhEGF2oyL0WUXpfOHo3lN2/ifB5/yeskYbYzbCCJ\ncawJSsOLDvYGyvTeBMYOi0+19U4U7ndRJCDZktBy5riilT72ZQ5/hHTOJL5Y\neb2j\r\n=ElmX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD1bliMnShmi3Sg1yI7VYbHc9FYDwF6EzvoIrDLBzNWrQIgMAwbXwVfrSTWDaVDz6BAPnA4NFKWpd713VqPFeBeHvY="}]},"maintainers":[{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"}],"_npmUser":{"name":"tsapeta","email":"sapeta.tomasz@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.0.1-rc.0_1568447130897_0.4717602375050869"},"_hasShrinkwrap":false},"0.0.1-rc.1":{"name":"expo-updates","version":"0.0.1-rc.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/Updates.js","types":"build/Updates.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts/ios"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"d766e90826c0d45eb1190bf91aed6dd5ca551512","_id":"expo-updates@0.0.1-rc.1","dist":{"shasum":"e60c666fbfee6e37557687caabd73975abd1c21d","integrity":"sha512-B/y0KANo4KIqbt1c686ZAakRZGoAtn2/TpQ4SwHns1+XcBlfKebLxtk/6djT2qGtaI1/rkQ3TuNAShILs7YplQ==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.0.1-rc.1.tgz","fileCount":71,"unpackedSize":166006,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeaT5dCRA9TVsSAnZWagAArGsP/jpTltaxv1VgL5m/Qlo1\nOZvYg+PXJCvFdU2ObhTYVJzbocPGOlq5lU7A84m8j5bESsAUhDMClYyaili2\nGZ9pjdqR4kZXKKh0wcjiwYHjX/m4ekthc07jszlfRuLhWyyop6EbQ3AAX6vm\niIgRGwa9bz+8A0wFgxi2B2zpXc9F/qmHD+lCR/mFV0Fh8WKnDlAlSspP7AnI\nFq+CPjGW/9274OGsK7O/wQ6tbo0LfBEyBHUABWCQ4rOO4/hsi3UvG9jwiC83\n6uzVwcfzbqEn/7+RM4FUZSVNC/wYvwzbdtYjen3rkOtKUpUmPoAcJhSM7ZMl\nxr5qeDUahSVdjmWR4qtuyv+tgnSgiHAZ63XKuAZq0QE/idJUnpHStK6ZTieS\nzEgmREQ95VgUAY5J3ZUOrdk2ERZ4+/KQinIkQxTO8Ll6aQiB+BoMC0OqQf4Q\nhzYL5e1+7vkQ+2Oqpm01kv0Lnq8IZ9VTwh+9d2JvCTA03KMm74N6lSrw8Ssm\nszHn6sVd76Crk+a3CIeTfR7aPePgjF7Kjg45oCSwjD+n57vTRu3Pt4Ue34KU\nBch6VNgunHvToojs/asoXzT/SERDJXc1ZB3v0nv5jD3z7H75fF7ok9dqH8oH\nSHTTHFtUOC/aHfP4aSxXPmnSjK+nl16Wh3wx5EDRD6sS0Uq0ZJSD/H6y/2Fd\nzKoY\r\n=3JA5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC44jsk1Mb8r6JL9HE7WayyB108xrmMyCS37hpjVJVXLwIhAN8hvvKNbE/2dFPmn7R9/clCsEP2tLUV8Ef1PRroHg9G"}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.0.1-rc.1_1583955548683_0.3229835486761141"},"_hasShrinkwrap":false},"0.0.1-rc.2":{"name":"expo-updates","version":"0.0.1-rc.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/Updates.js","types":"build/Updates.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts/ios"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"da37f8fe5d4f87140fbc134496cce487d35a3e3f","readmeFilename":"README.md","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\nSee [Updates docs](https://docs.expo.io/versions/latest/sdk/updates) for documentation of this universal module's API.\n\n# Installation\n\nThis package is pre-installed in [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects. You may skip the rest of the installation guide if this applies to you.\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `react-native-unimodules` package](https://github.com/unimodules/react-native-unimodules) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nexpo install expo-updates\n```\n\n### Setup app.json\n\nExpo can automatically bundle your most recent update into your iOS and Android binaries, so that users can launch your app immediately for the first time without needing an internet connection. Add the following fields under the `expo` key in your project's app.json:\n\n```json\n  \"ios\": {\n    \"publishBundlePath\": \"ios/<your-project-name>/Supporting/shell-app.bundle\",\n    \"publishManifestPath\": \"ios/<your-project-name>/Supporting/shell-app-manifest.json\"\n  },\n  \"android\": {\n    \"publishBundlePath\": \"android/app/src/main/assets/shell-app.bundle\",\n    \"publishManifestPath\": \"android/app/src/main/assets/shell-app-manifest.json\"\n  },\n```\n\nAdditionally, ensure that these directories (`ios/<your-project-name>/Supporting/` and `android/app/src/main/assets/`) exist. After running `expo publish` at least once, you'll need to manually add the `shell-app.bundle` and `shell-app-manifest.json` files to your Xcode project.\n\nFinally, if you have other assets (such as images or other media) that are `require`d in your application code and you would like these to also be bundled into your application binary, add the `assetBundlePatterns` field under the `expo` key in your project's app.json. This field should be an array of file glob strings which point to the assets you want bundled. For example:\n\n```json\n  \"assetBundlePatterns\": [\"**/*\"],\n```\n\n### Configure for iOS\n\nRun `pod install` in the ios directory after installing the npm package.\n\n#### Build Phases\n\nIn Xcode, under the `Build Phases` tab of your main project, expand the phase entitled \"Bundle React Native code and images.\" Optionally rename the phase to \"Bundle Expo Assets,\" and replace the entire body of the script with the following:\n\n```\n../node_modules/expo-updates/bundle-expo-assets.sh\n```\n\n#### `Expo.plist`\n\nCreate the file `ios/<your-project-name>/Supporting/Expo.plist` with the following contents, and add it to your Xcode project.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>EXUpdatesSDKVersion</key>\n        <string>YOUR-APP-SDK-VERSION-HERE</string>\n        <key>EXUpdatesURL</key>\n        <string>YOUR-APP-URL-HERE</string>\n</dict>\n</plist>\n```\n\n#### `AppDelegate.h`\n\n```diff\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n+#import <EXUpdates/EXUpdatesAppController.h>\n+\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\nMake the following changes to `AppDelegate.m`.\n\nIf your `AppDelegate` has been customized and the diff doesn't apply cleanly, the important part is calling `[[EXUpdatesAppController sharedInstance] startAndShowLaunchScreen:self.window]` in the `application:didFinishLaunchingWithOptions` method, and moving the initialization of the `RCTBridge` to the `EXUpdatesAppControllerDelegate`.\n\nIn general, iOS will only show your app's splash screen for a few seconds, after which you must provide a UI. If you use the `startAndShowLaunchScreen:` method, expo-updates will attempt to create a view from your `LaunchScreen.nib` file in order to continue showing the splash screen if the update is taking a long time to load. If you have custom logic around your splash screen and do not want this, feel free to use the `start` method instead.\n\nProviding `EXUpdatesAppController` with a reference to the `RCTBridge` is optional, but required in order for reloading and updates events to work.\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n+@interface AppDelegate ()\n+\n+@property (nonatomic, strong) NSDictionary *launchOptions;\n+\n+@end\n+\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n+  self.launchOptions = launchOptions;\n+\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n+#ifdef DEBUG\n+  [self initializeReactNativeApp];\n+#else\n+  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n+  controller.delegate = self;\n+  [controller startAndShowLaunchScreen:self.window];\n+#endif\n+\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n+}\n+\n+- (RCTBridge *)initializeReactNativeApp\n+{\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n+  return bridge;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n+  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n #endif\n }\n\n+- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n+{\n+  appController.bridge = [self initializeReactNativeApp];\n+}\n+\n @end\n```\n\n### Configure for Android\n\n#### `app/build.gradle`\n\nMake the following change in order to bundle assets from expo-updates instead of your local metro server.\n\n```diff\n-apply from: \"../../node_modules/react-native/react.gradle\"\n+apply from: \"../../node_modules/expo-updates/expo-updates.gradle\"\n```\n\n#### `AndroidManifest.xml`\n\nAdd the following lines inside of the `MainApplication`'s `<application>` tag.\n\n```xml\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\" />\n<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\" />\n```\n\n#### `MainApplication.java`\n\nMake the following changes to `MainApplication.java` (or whichever file you instantiate your `ReactNativeHost`). `UpdatesController.initialize()` expects to be given an instance of `ReactApplication`, but if not, you can also call `UpdatesController.getInstance().setReactNativeHost()` to directly set the host. Providing `UpdatesController` with a reference to the `ReactNativeHost` is optional, but required in order for reloading and updates events to work.\n\n```diff\n+import android.net.Uri;\n+import expo.modules.updates.UpdatesController;\n+import javax.annotation.Nullable;\n+\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n+\n+    @Override\n+    protected @Nullable String getJSBundleFile() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getJSBundleFile();\n+      } else {\n+        return UpdatesController.getInstance().getLaunchAssetFile();\n+      }\n+    }\n+\n+    @Override\n+    protected @Nullable String getBundleAssetName() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getBundleAssetName();\n+      } else {\n+        return UpdatesController.getInstance().getBundleAssetName();\n+      }\n+    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n+\n+    if (!BuildConfig.DEBUG) {\n+      UpdatesController.initialize(this);\n+    }\n   }\n }\n```\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Description | Default | Required? |\n| --- | --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | Whether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary. | `true` | ❌ |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | URL to the remote server where the app should check for updates | (none) | ✅ |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | SDK version to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server. | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | Runtime version to send under the `Expo-Runtime-Version` header in the manifest request. | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | Release channel to send under the `Expo-Release-Channel` header in the manifest request | `default` | ❌ |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | Condition under which expo-updates should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches). | `ALWAYS` | ❌ |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | Number of milliseconds expo-updates should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible. | `0` | ❌ |\n\n## API\n\n```js\nimport * as Updates from 'expo-updates';\n```\n\n### Constants\n\n- **`Updates.manifest` (_object_)** - The [manifest](https://docs.expo.io/versions/latest/workflow/how-expo-works/#expo-development-server) object for the update that's currently running.\n- **`Updates.isEmergencyLaunch` (_boolean_)** - `expo-updates` does its very best to always launch monotonically newer versions of your app so you don't need to worry about backwards compatibility when you put out an update. In very rare cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in the app binary, even after newer updates have been downloaded and run (an \"emergency launch\"). This boolean will be `true` if the app is launching under this fallback mechanism and `false` otherwise. If you are concerned about backwards compatibility of future updates to your app, you can use this constant to provide special behavior for this rare case.\n\n### `Updates.reloadAsync()`\n\nInstructs the app to reload using the most recently downloaded version. This is useful for triggering a newly downloaded update to launch without the user needing to manually restart the app.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves right before the reload instruction is sent to the JS runtime, or rejects if it cannot find a reference to the JS runtime.\n\nIf the `Promise` is rejected in production mode, it most likely means you have installed the module incorrectly. Double check you've followed the instructions above. In particular, on iOS ensure that you set the `bridge` property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on Android ensure you either call `UpdatesController.initialize` with the instance of `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the proper instance of `ReactNativeHost`.\n\n### `Updates.checkForUpdateAsync()`\n\nChecks the server at the provided remote URL to see if a newly deployed version of your project is available. Does not actually download the update.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves to an object with the following keys:\n\n- **isAvailable (_boolean_)** -- `true` if an update is available, `false` if you're already running the most up-to-date JS bundle.\n- **manifest (_object_)** -- If `isAvailable` is true, the manifest of the available update. Undefined otherwise.\n\nThe `Promise` rejects if the app is in development mode, or if there is an unexpected error communicating with the server.\n\n### `Updates.fetchUpdateAsync()`\n\nDownloads the most recently deployed version of your project from server to the device's local storage.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves to an object with the following keys:\n\n- **isNew (_boolean_)** -- `true` if the fetched bundle is new (i.e. a different version than what's currently running), `false` otherwise.\n- **manifest (_object_)** -- If `isNew` is true, the manifest of the newly downloaded update. Undefined otherwise.\n\nThe `Promise` rejects if the app is in development mode, or if there is an unexpected error communicating with the server.\n\n### `Updates.addListener(eventListener)`\n\nAdds a callback to be invoked when updates-related events occur (such as upon the initial app load) due to auto-update settings chosen at build-time.\n\n#### Arguments\n\n- **eventListener (_(event: [UpdateEvent](#updateevent)) => void_)** -- A function that will be invoked with an instance of [`UpdateEvent`](#updateevent) and should not return any value.\n\n#### Returns\n\nAn [`EventSubscription`](#eventsubscription) object on which you can call `remove()` if you would like to unsubscribe from the listener.\n\n### Related types\n\n### `EventSubscription`\n\nAn object returned from `addListener`.\n\n- **remove() (_function_)** -- Unsubscribe the listener from future updates.\n\n### `UpdateEvent`\n\nAn object that is passed into each event listener when an auto-update check has occurred.\n\n- **type (_string_)** -- Type of the event (see [`EventType`](#eventtype)).\n- **manifest (_object_)** -- If `type === Updates.EventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded update. Undefined otherwise.\n- **message (_string_)** -- If `type === Updates.EventType.ERROR`, the error message. Undefined otherwise.\n\n### `EventType`\n\n- **`Updates.EventType.UPDATE_AVAILABLE`** -- A new update has finished downloading to local storage. If you would like to start using this update at any point before the user closes and restarts the app on their own, you can call `Updates.reloadAsync()` to launch this new update.\n- **`Updates.EventType.NO_UPDATE_AVAILABLE`** -- No updates are available, and the most up-to-date bundle of this experience is already running.\n- **`Updates.EventType.ERROR`** -- An error occurred trying to fetch the latest update.\n","_id":"expo-updates@0.0.1-rc.2","dist":{"shasum":"a260a7b05aec8cab455633c0c85cdc63f66d97f9","integrity":"sha512-ylgO9a0prIzMieKZ1GzDU7orU9s0f+MA4tDDULNzXQaf7AdOiZ9thID1e8iCyX4v3f2ypALYA3ADDKfanjA40g==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.0.1-rc.2.tgz","fileCount":95,"unpackedSize":266837,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJefMsICRA9TVsSAnZWagAAD/kP/iNaiY7EHIfwB42Vog9K\nTAV5nWfXxFbCSZiG2C0zaeArfAfxDLE7E4tIh77JwyMKnl9zyOaKBMt1SE97\nJ9u7fw9kno2dXwRe46hbJmjBg12ZKQ2Ue9I3NXWRiuryVzOE2UJbV0W4lBw4\nTBxXOqIkRKQ4wOVqrvidwKDKeSUPrNUtAYXRxxMoidhYmU3PLTcutVm+juLr\nWKgl8hPczQKD2EaYj0GxZfjiEk9iEBDRAGArnKFBNSBH0LOcvsMGPskoiQCJ\nB9sAQaSNRrUoLB60iVdyxSilVSUMqebaKg0y6otM9Z/oq5Q8RR2U+DS6CD3z\noytjr5q6pi1m9gImRlKF7z9w0yfzqqvR2xteyJST+WL3Wc/D7XdtndT3GssG\nVaQ9DJv+GLz4yxzX3ts2E8nkZoHUXGpvNfJ6fd9FjBeFUoQn0qC7AAbwpqYs\n2S2QRdrZXx3pAXPEcIpFJ9sulG7toQX2YXup6/smSC3kFcUcvcK6kl+0+jew\ns5JZksrPVwzpE+NxE2R+T+/whbvaRPLLqoLX6ApgSctYXQBzjVqAVIb1W37y\nAb8i0kPH5f/A8zMXGXSA0OWGBgpBF3WEHS398UnLfWg6dca4R7BavApBkaVS\nIoDnOl6M8Ex4rjHz5ScwXJNWEXmfjvchkOftm/TUgUatHPFfVtyB71rFGpBz\naqMs\r\n=KDC6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCrAS0ogIDfJLlQn72LOpDNC2UKVlhzJHB4Y9VzQa7omAIgLUg5vmHXrJKFRl8jotwjhVPcZRQgU+EHxPd8io1YEZQ="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.0.1-rc.2_1585236744187_0.6996272415160363"},"_hasShrinkwrap":false},"0.0.1-rc.3":{"name":"expo-updates","version":"0.0.1-rc.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts/ios"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"e6fa3c621d15ad97525ce4d2f6e16d927994dc94","_id":"expo-updates@0.0.1-rc.3","dist":{"shasum":"0d925038d8d4eb9890d72de8076535ed5603b782","integrity":"sha512-3M4zteIuaYlVSSvyIWP1h0X6KpyZliL00Zge2MdlGtH+Mda6byNA7UyVOgaP+QYQL1zzgM0YjPucQRLJ9dZpRg==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.0.1-rc.3.tgz","fileCount":115,"unpackedSize":284773,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJefXLXCRA9TVsSAnZWagAA/DoP/27SSCAY13cO26N4fX6p\nsK5H572j+jHQpw9lHTJ44vaL7ryIh+8JIMT5ka5cfKKa1SHqttmYDzOk40we\nZVIhuJXpdWGTN1lKifGySiR1Z894xh5c56UgnifoCkBIlRED04lrVLq4J6iy\n31MHjarT6Y2rgDwBCkaTiPl8giIrJZ7/MeR3Sbyaia69XXY9ygLQLiSuN0Ig\nrOzRLS6SluRn1DvHnaDxpkf8pOFyXdSSZufSERk4U76L+XhycCcqNjILLaGH\n/+h5IdzfjJwv4+TfvOPyIlP3o1w352v7O7dwpxtZVToyFsOr8OM/DKyPtICk\nFOqoxtRk4anoD+iBXaETCrJvpmsDqa2g4u7bFApXHUdKSdboHS+34Wr5CMlr\niHD0cghcGSP+KPhHF8NQuETK2a6STyHyPxO+21uGLgm1ohATigKir5HzZxMn\nUaN/KvsoPHoQelt9PsA2tQxWa0AQt1olR7PXhdjWblHIK1sZ4ruTADUV0aT0\nEyAGLgP57zKhugZGX4hvMWQYpJ9JhkR60rpSyERKvAn8+HYbmE4IzYQrnteQ\n49gF2o08Z2+x5xV7tWmuLvoar+wWnVf7osUycFgpJV5t48lVTc4XXuArr/6S\nl//oaiqL7Y5ClNp26t4bTQ08dOtcDkslVO+ZYfxNC1+Dhn+cNKqis32IJmae\neMKt\r\n=QEXh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC8DS+cWrxarodTjvkUXf9vEQsIrMdP1uz8O9l0eg3V0AIgGI+u5mbDuiq7NqQHGTPaMhhwftIUjQWUYB6g24fUa7I="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.0.1-rc.3_1585279702703_0.7961402974506557"},"_hasShrinkwrap":false},"0.1.0":{"name":"expo-updates","version":"0.1.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts/ios"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"691527b37b3ecf241c65db632bfe70b3bbb5da24","_id":"expo-updates@0.1.0","dist":{"shasum":"3ea0afef9d431bb8377fc302d04c26fef222f77d","integrity":"sha512-H3km1cYU1ejrFqI/JqOmuVNevXnPiNIGqYJFmHsYA87DajMX9/badKkgbulN7QTx0IopBSGY59DJkNFoAt6HXA==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.1.0.tgz","fileCount":115,"unpackedSize":291812,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeg5ZVCRA9TVsSAnZWagAAWLQP/jVGDF1NN05QZNcTh+3N\nPGlV++aYWSL1ZAeSUZLkfXtbiULNQxLsWsl8MCLppOE3k4+ynsbH4onCfnlX\nyME0iYzgCY2Am/CqdWBIz9XqLW81uEHYS2L0pm9LDzwN2YHUAN59x34ApXkA\n0Ac2AzbbpJxAL5VniXdQAL/b9y+bA72QxAWH+19wWZ+UCRQ2g+XZoXMnhOzL\nvcQlXQ4/OkpgwNz3syuXgZxQGWpXTqJMBsaMgM+JsTzqMvKZ7TRqfwDTUAv3\n0HVLSDQdTU/2IwKjWn32I3EcrTyeVV0lrtR3sSXroJnmRWh4hcFtij3s29l+\nebOE7yzhlr6l3pqrIsgieJnmWhvpbZtz/mzBol34Ac1fyExWVK2DitirKKvr\n91QNTrvQHKRnPDamM2t1wbVswNkCc/u/EnqTd1EQaZFgVO038V4yu3tvNAhq\nzlhR2ZcPTAlWcpHFEyAetJStiTnSivs+v/xNIJRpVleNMsDTGg6//GPGXXXL\niXZrFk+FPC0MmCcqLu8ubU+MSxhhf8D73d7kffuP0mfFqCzXyiErqRdrkfy6\nTa6LpgCVuMEyp3mByOnnZgCQHKDr/ZB3j4kWfxfC6KN4ObRLMl+VwITC59Ez\n87zF4cB5rueQeVvKBXT/pORi5ALR9wH8LExp8psSutuBQwoZX8bxcRbUj+5O\nK9+V\r\n=VPy1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEoaIwPq/xi4v9ZSbE4He2IqDj9J1ABv5988ALUAeRYiAiEAvBhIa9gmffxp4l8z2J1hnCQzHhXVlKYRrNFWi9qMghc="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.1.0_1585682004676_0.09891800716579269"},"_hasShrinkwrap":false},"0.1.1":{"name":"expo-updates","version":"0.1.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts/ios"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"f3268e9e0bf612bdf401d8211fb722eb0ace919a","_id":"expo-updates@0.1.1","dist":{"shasum":"b9bd74959174633a9b2217b0f1faa96e4c889348","integrity":"sha512-INj6MDlaJ0jx6sZKFv1DeKMh2ufIC+XvzCDA7cEHj4p+MHIvlwn4qGsnyRxYDtvCMmzZ4vJxq35NAnw6Npb5sQ==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.1.1.tgz","fileCount":114,"unpackedSize":291485,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJehMkrCRA9TVsSAnZWagAADoYQAJ6t8DldnbPUFW7YISXO\nXE9+UEnrrmRc3gzqN8H5nmDsVGJ5WI4H7S67f3nTE2bzTCjMZD3iufq6BGIF\nxKJFzBCaBgzpHktOVHhyihugPC7Z8tVJD/2dxWWkr3Vi4ydNSTVOvFgTuus9\nPEfHc5pUXb3K55xs7Ce215tigr9GGB0J91yFki6cHtH4Y5Xj4hmmG1V3Xjg5\nZyBRGGt5hEWD2oFK4RxlClgYUXuhtOL/XqHRZbkKvfcJeKg+jYTY9N1u3U28\nM906tBF9BvIG/iB7/k5/qaeQCVej+DYSLaxvPW4vu+H2tHtxVgvGIv8zF9Fb\nMEbgA97pGK1ZBpQjvRNDM+pWHbAUHGv/6aihsEACQcANyrjUi4QC0Onkk2W/\nfm0Ha/gkTiBUdCvh6o1PQ8U4tyrYdoWACABaXUBtFIuLYe2xZGSUgr4UMh3j\nav8+5D1Eq1PoL+gGBE/U9LzriOTXXATqbwgcSsdOwmYGGELhIltWRse5j1Jt\nKAJQEyxvVqDiAppCicuKZKTN3Et1wDy8uRqV+Tpc+1hJZgZSbyWsrI7pbJ4i\naBkel5Cbo40pBXjV/bCwZMik0WRs4RcoJUSCmL4PRoVJyURcvNT/qEB5G5I5\nTDh502kLga5w+Xk51g4RyDeRuEGo8uMpdCWzK7ndnVUYOpwHIIFOlrFcICkL\n7SwS\r\n=ggAk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDt+6KjcQNmql2N0sLzI/trv3XqBq+g460PC9Zz0CKktQIgTHhzDboOuA+lNEz6uoZs5nPiE7my1W5rgVqm7Xmb8n0="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.1.1_1585760554513_0.5184570391714678"},"_hasShrinkwrap":false},"0.1.2":{"name":"expo-updates","version":"0.1.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"f1a9aa49db166f7e571ef7031873a6db9bc83956","_id":"expo-updates@0.1.2","dist":{"shasum":"d3241a55cd2f282dc5941a59b47a595c3bb4003c","integrity":"sha512-RasaaxMBSjw7Sy9VDP6EceBnUPGt86IysGj7Mc6LNKLsmUwd6DbA03SyTqJd8R2e+T2dDM82BMWIJq+8TD6e6Q==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.1.2.tgz","fileCount":116,"unpackedSize":293281,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJej7iuCRA9TVsSAnZWagAAKh8QAJjfNoRipDg12DPkLpvR\ny8NmkMxdpBY11hbjFIvyWUPEywJI0jZhjDYbvvMtVuOpZDf1sIr6QvS5riZ8\nE1s6/d+jiSOBFZw7AruL3Vftb9KhLXftsI4Q9TC78rnW+28aQOsq37FOotRg\ntHGOIt2n+/PqqW+zKwCH2TMjVdcpcwbDxRZhhSCKQa4q7awhV/WgC4YG4yqn\nPh7+c3bNStI3O9hZDq40oNyucdIftsD/X6h8PPAieqivBafpvJdwU+BynK4/\n5IV9zem6hRVtNPKdNHYNue89SML9eMw3LwgHzCbm9OjUSuQm9PWpLYJMdKSK\njQNIxo9ZXO2Oft8rIl5Lgcum8GsB9ojDAGOREuIqJYCDiuvPu3QTFtvdQFlV\nF1qArxXfvKFA44rVuzSNLppWgN0m8xWOCiqSIZW/qazkhxJ9iC0FWItZv+Md\nN7Hx3EEvYoZH4t21wiFqLRQikxXbuVfK5QGniG1g/gd41sWfRNKwooZrZ92c\nWJMTuYL2SyYZ5pL4uFyDTAkI7PkKLGd3zF5/IKYr3vGX3SLtHcNHby42fj6m\nqcW4U7mk+bDRhjbFaev6J5g1CCZ7nzZFnK3vTdTfkLJh3zo/6ZTBpk7l9vj2\nsVVqGEahuOKqHL7e07TKJ7vVtuzFEmqa9age25vllgH8LqURFLebDbbb4m/P\nlAFf\r\n=yNMG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICOv8UV5CJKx9PL+AGb3zxdVTG1Z6vSmrZIgbIh4PyNqAiEAl9ngQqllfjeAO+JG67SwKIHozj8gVjZTteKi1YN1xrc="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.1.2_1586477229851_0.5637113966099931"},"_hasShrinkwrap":false},"0.1.3":{"name":"expo-updates","version":"0.1.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"5bf8f4b963e66639144e57795693a9d572a7dcd3","_id":"expo-updates@0.1.3","dist":{"shasum":"c0f44c98dd241b63c6b7dc122c67bf57e2ede8a1","integrity":"sha512-1uD7HeyJlJ5kNkuznZU/wt7MoHTfX3vHG1Hds0Bkj7cBkXOL4oZDB1X/sUBhIZRkfMccbBONZTDQsVkH1p8z4g==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.1.3.tgz","fileCount":117,"unpackedSize":294655,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeqeI7CRA9TVsSAnZWagAAp90P/Rpivgkv98w/Hy/3qH0L\njr5BkeBHOh+xiHVTqskrh7/g3gBsk05j+jC9g5zE2mt5w/l/RjcFxJ6pNikd\nQK5+4NZ+dccgr2Z+kAOAlHklCjTAcdHIfksVh8CTwYHVZs7n9GrGaulzRNth\nBNE8J1JojVezP34M6F0sI1bWVqmfioptZeM3yfwkZjgRBd//9WsBTdw/q4Uj\nteohMs+HNaF73uSpCZIfY1me131vlm1k9VyRZVinyGEn49+7f8NB6HnMx34J\nrYWvdlHbb+JbM5i/EwbogEFExIkc77i/wjeaKYK/f/B84+eoE4yV9GaRpAec\n8EaANLpzDKSZvd1Rr/1+59ebH7T1AZeuci0uKV98QhrFfs0OYBm6uZxYZJkr\nSYmFsQH3Dz40rWhGMdRpDNlXj2Z8B7T2oqgYTtYpxJ0atJW2ngja9BbFlYeV\nNw73aWd+J1W+KPDzGVSBNvzpoBP7X/nYq8YR7p5chHJMAWmVzwZAQBrtYVln\n22wamEf4j7i//bTDHKynHGTa/SGQMbMOKYs51V3/MTvFU2nWkeL58dI+AKXM\nVHhMGuxMkIMDbsnHveT4BBj1GNkbjCLQxvxx+zPSELclJq8F75oBg2V3/nzv\n5VRR1FjkdlnPnk1d+LOZjRkm06Od1WQ83iggvnLBovcRuD7ORI88vhCUYFoP\n294A\r\n=YQIY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFx7wjwKtrBFn5iHo1TRHDeWrFQUJ3m6QYL2ACv4illQAiEA/JiO4olUIb4/nEsRU3WfEi0vzdV0xnvFtOrVQY/LJyU="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.1.3_1588191802945_0.6193506028655136"},"_hasShrinkwrap":false},"0.2.0":{"name":"expo-updates","version":"0.2.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"c5524ba7e67997d7021fcd3d2ccc3821a3e839a7","readmeFilename":"README.md","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\nSee [Updates docs](https://docs.expo.io/versions/latest/sdk/updates) for documentation of this universal module's API.\n\n# Installation\n\nThis package is pre-installed in [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects. You may skip the rest of the installation guide if this applies to you.\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `react-native-unimodules` package](https://github.com/unimodules/react-native-unimodules) before continuing.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before this module.\n\n### Add the package to your npm dependencies\n\n```\nexpo install expo-updates\n```\n\n### `expo-asset`\n\n(If you have the `expo` package installed in your project already and use `registerRootComponent` in your project entry point, you can skip this section!)\n\nIf you have assets (such as images or other media) that are `require`d in your application code, and you'd like these to be included in updates, you'll also need to install the `expo-asset` helper package:\n\n```\nexpo install expo-asset\n```\n\nAdditionally, add the following line in your root `index.js` or `App.js` file:\n\n```js\nimport 'expo-asset';\n```\n\n### Set up app.json\n\nIf you're going to be using Expo CLI to package your updates (either with `expo export` or `expo publish`), you will need to add some fields to your app.json. If not, you can skip this section.\n\nFirst, if your app.json file does not yet include an `expo` key, add it with the following fields:\n\n```json\n  \"expo\": {\n    \"name\": \"<your app name -- must match your iOS project folder name>\",\n    \"slug\": \"<string that uniquely identifies your app>\",\n    \"privacy\": \"unlisted\",\n    \"sdkVersion\": \"<SDK version of your app. See note below>\",\n  }\n```\n\nCurrently, all apps published to Expo's servers must be configured with a valid SDK version. We use the SDK version to determine which app binaries a particular update is compatible with. If your app has the `expo` package installed in package.json, your SDK version should match the major version number of this package. Otherwise, you can just use the latest Expo SDK version number (at least `37.0.0`).\n\nIf you installed `expo-asset` and have other assets (such as images or other media) that are `require`d in your application code, and you would like these to also be bundled into your application binary, add the `assetBundlePatterns` field under the `expo` key in your project's app.json. This field should be an array of file glob strings which point to the assets you want bundled. For example:\n\n```json\n  \"assetBundlePatterns\": [\"**/*\"],\n```\n\nFinally, if you're migrating from an ExpoKit project to the bare workflow with `expo-updates`, remove the `ios.publishBundlePath`, `ios.publishManifestPath`, `android.publishBundlePath`, and `android.publishManifestPath` keys from your app.json.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n#### Build Phases\n\nIn Xcode, under the `Build Phases` tab of your main project, expand the phase entitled \"Bundle React Native code and images.\" Add the following line to the bottom of the script:\n\n```\n../node_modules/expo-updates/scripts/create-manifest-ios.sh\n```\n\nThis will configure your project to bundle assets from your published update when making release mode builds. For more information, see the section below on [Embedded Assets](#embedded-assets).\n\n#### `Expo.plist`\n\nCreate the file `ios/<your-project-name>/Supporting/Expo.plist` with the following contents, and add it to your Xcode project.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>EXUpdatesSDKVersion</key>\n        <string>YOUR-APP-SDK-VERSION-HERE</string>\n        <key>EXUpdatesURL</key>\n        <string>YOUR-APP-URL-HERE</string>\n</dict>\n</plist>\n```\n\nEXUpdatesURL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXUpdatesSDKVersion should match the SDK version in your app.json.\n\nIf you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `AppDelegate.h`\n\nIn this file, you need to import the `EXUpdatesAppController` header and add `EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`. A diff for a typical bare project might look like this (but yours might look different):\n\n```diff\n+#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\nMake the following changes to `AppDelegate.m`.\n\nIf your `AppDelegate` has been customized and the diff doesn't apply cleanly, the important part is calling `[[EXUpdatesAppController sharedInstance] startAndShowLaunchScreen:self.window]` in the `application:didFinishLaunchingWithOptions` method, and moving the initialization of the `RCTBridge` to the `EXUpdatesAppControllerDelegate`.\n\nIn general, iOS will only show your app's splash screen for a few seconds, after which you must provide a UI. If you use the `startAndShowLaunchScreen:` method, expo-updates will attempt to create a view from your `LaunchScreen.nib` file in order to continue showing the splash screen if the update is taking a long time to load. If you have custom logic around your splash screen and do not want this, feel free to use the `start` method instead.\n\nProviding `EXUpdatesAppController` with a reference to the `RCTBridge` is optional, but required in order for reloading and updates events to work.\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n+@interface AppDelegate ()\n+\n+@property (nonatomic, strong) NSDictionary *launchOptions;\n+\n+@end\n+\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n+  self.launchOptions = launchOptions;\n+\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n+#ifdef DEBUG\n+  [self initializeReactNativeApp];\n+#else\n+  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n+  controller.delegate = self;\n+  [controller startAndShowLaunchScreen:self.window];\n+#endif\n+\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n+}\n+\n+- (RCTBridge *)initializeReactNativeApp\n+{\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n+  return bridge;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n+  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n #endif\n }\n\n+- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n+{\n+  appController.bridge = [self initializeReactNativeApp];\n+}\n+\n @end\n```\n\n### Configure for Android\n\n#### `app/build.gradle`\n\nMake the following change in order to bundle assets from expo-updates instead of your local metro server when making release mode builds. For more information, see the section below on [Embedded Assets](#embedded-assets).\n\n```diff\n apply from: \"../../node_modules/react-native/react.gradle\"\n+apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"\n```\n\n#### `AndroidManifest.xml`\n\nAdd the following lines inside of the `MainApplication`'s `<application>` tag.\n\n```xml\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\" />\n<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\" />\n```\n\nEXPO_UPDATE_URL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXPO_SDK_VERSION should match the SDK version in your app.json.\n\nAs with iOS, if you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `MainApplication.java`\n\nMake the following changes to `MainApplication.java` (or whichever file you instantiate your `ReactNativeHost`). `UpdatesController.initialize()` expects to be given an instance of `ReactApplication`, but if not, you can also call `UpdatesController.getInstance().setReactNativeHost()` to directly set the host. Providing `UpdatesController` with a reference to the `ReactNativeHost` is optional, but required in order for reloading and updates events to work.\n\nIf the diff doesn't apply cleanly, the important parts here are (1) overriding `getJSBundleFile()` and `getBundleAssetName()` from `ReactNativeHost` with the values provided by expo-updates, and (2) initializing `UpdatesController` as early as possible in the application's lifecycle.\n\n```diff\n+import android.net.Uri;\n+import expo.modules.updates.UpdatesController;\n+import javax.annotation.Nullable;\n+\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n+\n+    @Override\n+    protected @Nullable String getJSBundleFile() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getJSBundleFile();\n+      } else {\n+        return UpdatesController.getInstance().getLaunchAssetFile();\n+      }\n+    }\n+\n+    @Override\n+    protected @Nullable String getBundleAssetName() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getBundleAssetName();\n+      } else {\n+        return UpdatesController.getInstance().getBundleAssetName();\n+      }\n+    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n+\n+    if (!BuildConfig.DEBUG) {\n+      UpdatesController.initialize(this);\n+    }\n   }\n }\n```\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all `require`d assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\nNote that when you make a release build, the update that will run on first launch is the update whose manifest and bundle are embedded in the binary at build time -- i.e. your most recently exported/published update. **This is different behavior from plain React Native projects**, which create a new bundle on-demand each time you make a release build. This means that if you make a change to your JavaScript app, you need to export/publish a new update in order to see that change in a release build. In future versions of `expo-updates` we hope to support on-demand updates created at build-time.\n\n### Embed an initial update\n\nBefore building an `expo-update`-enabled release build of your app, you need to create an initial update to embed into the app binary.\n\nIf you're not using Expo CLI, you need to create a manifest and bundle for this initial update. The files should be named `app.manifest` and `app.bundle`. (See the documentation on [Updating your App](https://docs/expo.io/versions/latest/bare/updating-your-app/) for the format of the manifest.) To embed them into your Android project, place a copy in the `android/app/src/main/assets` folder. To embed them into your iOS app, place them in the `ios/<your-project-name>` folder (or any subfolder) and add them to your Xcode project in the Xcode GUI.\n\nIf you're using Expo CLI, you just need to run `expo export` or `expo publish` once before making a release build. After doing so, be sure to **add `ios/<your-project-name>/Supporting/app.manifest` and `ios/<your-project-name>/Supporting/app.bundle` to your Xcode project**.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nURL to the remote server where the app should check for updates\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nSDK version to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nRuntime version to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nRelease channel to send under the `Expo-Release-Channel` header in the manifest request\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nCondition under which expo-updates should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nNumber of milliseconds expo-updates should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## API\n\n```js\nimport * as Updates from 'expo-updates';\n```\n\n### Constants\n\n- **`Updates.manifest` (_object_)** - If `expo-updates` is enabled, this is the [manifest](https://docs.expo.io/versions/latest/workflow/how-expo-works/#expo-development-server) object for the update that's currently running. In development mode, or any other environment in which `expo-updates` is disabled, this object is empty.\n- **`Updates.releaseChannel` (_string_)** - The name of the release channel currently configured in this standalone or bare app. In development clients, this is the name of the release channel of the currently running update.\n- **`Updates.updateId` (_string | null_)** - If `expo-updates` is enabled, the UUID that uniquely identifies the currently running update. The UUID is represented in its canonical string form (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`) and will always use lowercase letters. In development mode, or any other environment in which `expo-updates` is disabled, this value is null.\n- **`Updates.isEmergencyLaunch` (_boolean_)** - `expo-updates` does its very best to always launch monotonically newer versions of your app so you don't need to worry about backwards compatibility when you put out an update. In very rare cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in the app binary, even after newer updates have been downloaded and run (an \"emergency launch\"). This boolean will be `true` if the app is launching under this fallback mechanism and `false` otherwise. If you are concerned about backwards compatibility of future updates to your app, you can use this constant to provide special behavior for this rare case.\n\n### `Updates.reloadAsync()`\n\nInstructs the app to reload using the most recently downloaded version. This is useful for triggering a newly downloaded update to launch without the user needing to manually restart the app.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves right before the reload instruction is sent to the JS runtime, or rejects if it cannot find a reference to the JS runtime.\n\nIf the `Promise` is rejected in production mode, it most likely means you have installed the module incorrectly. Double check you've followed the instructions above. In particular, on iOS ensure that you set the `bridge` property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on Android ensure you either call `UpdatesController.initialize` with the instance of `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the proper instance of `ReactNativeHost`.\n\n### `Updates.checkForUpdateAsync()`\n\nChecks the server at the provided remote URL to see if a newly deployed version of your project is available. Does not actually download the update.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves to an object with the following keys:\n\n- **isAvailable (_boolean_)** -- `true` if an update is available, `false` if you're already running the most up-to-date JS bundle.\n- **manifest (_object_)** -- If `isAvailable` is true, the manifest of the available update. Undefined otherwise.\n\nThe `Promise` rejects if the app is in development mode, or if there is an unexpected error communicating with the server.\n\n### `Updates.fetchUpdateAsync()`\n\nDownloads the most recently deployed version of your project from server to the device's local storage.\n\nThis method cannot be used in development mode, and the returned `Promise` will be rejected if you try to do so.\n\n#### Returns\n\nA `Promise` that resolves to an object with the following keys:\n\n- **isNew (_boolean_)** -- `true` if the fetched bundle is new (i.e. a different version than what's currently running), `false` otherwise.\n- **manifest (_object_)** -- If `isNew` is true, the manifest of the newly downloaded update. Undefined otherwise.\n\nThe `Promise` rejects if the app is in development mode, or if there is an unexpected error communicating with the server.\n\n### `Updates.addListener(eventListener)`\n\nAdds a callback to be invoked when updates-related events occur (such as upon the initial app load) due to auto-update settings chosen at build-time.\n\n#### Arguments\n\n- **eventListener (_(event: [UpdateEvent](#updateevent)) => void_)** -- A function that will be invoked with an instance of [`UpdateEvent`](#updateevent) and should not return any value.\n\n#### Returns\n\nAn [`EventSubscription`](#eventsubscription) object on which you can call `remove()` if you would like to unsubscribe from the listener.\n\n### Related types\n\n### `EventSubscription`\n\nAn object returned from `addListener`.\n\n- **remove() (_function_)** -- Unsubscribe the listener from future updates.\n\n### `UpdateEvent`\n\nAn object that is passed into each event listener when an auto-update check has occurred.\n\n- **type (_string_)** -- Type of the event (see [`EventType`](#eventtype)).\n- **manifest (_object_)** -- If `type === Updates.EventType.UPDATE_AVAILABLE`, the manifest of the newly downloaded update. Undefined otherwise.\n- **message (_string_)** -- If `type === Updates.EventType.ERROR`, the error message. Undefined otherwise.\n\n### `EventType`\n\n- **`Updates.EventType.UPDATE_AVAILABLE`** -- A new update has finished downloading to local storage. If you would like to start using this update at any point before the user closes and restarts the app on their own, you can call `Updates.reloadAsync()` to launch this new update.\n- **`Updates.EventType.NO_UPDATE_AVAILABLE`** -- No updates are available, and the most up-to-date bundle of this experience is already running.\n- **`Updates.EventType.ERROR`** -- An error occurred trying to fetch the latest update.\n","_id":"expo-updates@0.2.0","dist":{"shasum":"b832ecfb8f17ed43ff175c5d0a857578e02c067f","integrity":"sha512-qVKhGF4ZDaon7DEckQW6tAARaSBGkzfaVO3kE8rGH/p/zUqn11kpjOX3HV979vNULZtkFuWhGSE7l60Hx3s4mA==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.0.tgz","fileCount":123,"unpackedSize":327643,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeudH8CRA9TVsSAnZWagAAgvsQAIndCmnyavfGSqk2NeN8\nW4ZZhHjygWnk3QOVzNIkHMwEDCfWJHNDIc1ZYdmeqi1IYYz4nM+ZFnHdOgEb\nYizsfstpUd5ao0Ba3uTflcon7BU+Un5GiETF1gNDm0318nKvyQsaxs/YIof+\nIcQV4BqE21AvEedkOb+iYZLeE4G0tBITOQcrYB7ZQ5FPcJGiLJsIfcPS1Hhb\ndU607quzq4lIR8J3kmCy3y0EMzyOsPi8bFAe0iovXM5VtyVJCVQcQETii7oZ\nhF+2GBYT6v0WboW2t/2w2WfYJrOfo/cHkEpv/rZLx/EXfvgzKGHgU/NVTO1m\n2QKLBmgGs6hgT/bczpkrrozF2Mf/RIAyoLb1JXWoTXBstLBEK+nGOpAJXuks\n7FsA6b00dMTVfCjtwZx4bGiAQfGHFcjU1BIkOhIVdwQMY47FuR6gOm45LkES\ngBpFYNdYRmtn0xsz0pjNT3XRKDi6R6B7KuoQC1jtPYRY2L95ey4Qd7/VTAga\nGYw/oqiGGLI95WbdZShFuOhPYoBlzFOcEqTBxRdPldeRabEjSQToO9ZBaRDH\nRA9O2qWndowblSzoHK9yn1bIhl/Q7/jiewrMdJ6r34mMqd7wW83cZrKydHG3\nb2TLJ8QI/c/gwKDxTtmId9XJAXsT18R6bSrwAUKs8WhF9nCcJ8oNuvKmCwkr\n0aw1\r\n=icdG\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAIrsrY/UuMK7JFXvJniBjR5s5kG8t+SMa16M+fmFdKRAiEA0LSQzEfEKHHfKT0iADxd22ahbl+PB/1vXyDEkDTyzFo="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.0_1589236219605_0.32896073253689506"},"_hasShrinkwrap":false},"0.2.1":{"name":"expo-updates","version":"0.2.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"51e3f5106504cd8761ac5c573f7fff3670727fb3","_id":"expo-updates@0.2.1","dist":{"shasum":"28db925202f9d021706c1296d8cfc1041865fa64","integrity":"sha512-GNuqbxW3CpXVsCcinIaG6CilE8KF3brSzd4VD/uAPEGpMDBXoxBGVfrdc3S07gSgxVW9ozbW5oj9wG1u31MiVw==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.1.tgz","fileCount":123,"unpackedSize":327347,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeuu0wCRA9TVsSAnZWagAArOQP/222MUXA7qIEECqOAyKO\n7WJzqmfZXpM9j6yEe247eidxY0MtZEzSmCKYgZPm/6qu7k0FY4PKpnlLD+tU\nJ9TImSNajaulgwTiy0VA25jdvB+Y0Wpkk+EfLH+rAprMKAt+QaV5R0NAeU7T\nxaw1HdtbpLexHY2DLFOOt+yzMVNbDdzbMjgbHg6Hcuy71YUQRXc+ZSY8NDUE\n1GWCq7KZvhHpCHiXerIFYaSkNMODYqqvJ5J+3IyhCo44uUWxazlTtAo78vpf\nJFPqXSpXIy7SqWiqqXHceVhemZCW0ZdtyezRTbeV7G6jMbB1Nger1mqXa3fM\ndLGhPZAz3JOUGr/O78OHHzlzuOPfhtk+9pdKX770Re3GFddDvIy92x4GrwCY\nbeKXTdk5pMiCw1CY2flfbnjdpd39K750nGrQ3q6BlsJjO0gibhe7zPKUEGbe\nWFf+aqfBYVYEx3x9klT1pOzWGLnOmDjI7RaMCEgjs0qMdI/KhviEnDmfoNur\ntX3ihlF+qGDOm1oKQhbho6t4/9F31k0Kb4TTXJe+iXFnRDCslbo//A26UDKz\nbvfQQ3M/yOpESyi5czDOxeoCaxDD71xLPXL4PUB06YvuM2xe4a4pIUW6gqhs\nGbPj5qB6a9eizkOWzgnxBCfLqKOjrQWQWdH+Ma7wkIDMupWp8N4LkvIMSStL\n6Txq\r\n=Ew00\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC1HH2r3iSGp/B88z2AqV9YobIB61SgWptq5VcJSSGgEwIgGxkqv/YrbSLc8VQ+s+1mbFF0J41JDXQLnMG6NRn2NjE="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.1_1589308719847_0.24336338943066083"},"_hasShrinkwrap":false},"0.2.2":{"name":"expo-updates","version":"0.2.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"df27f1d180e5aad1310e4077944b7836e4adc3bb","_id":"expo-updates@0.2.2","dist":{"shasum":"1da35cea17f9807a6079e2889173b0d51ed9101a","integrity":"sha512-qJQsFah5olREc0NSn2EZmxRncCppYFlgKRgAcKcZMWF/2fzLdhK30wOyPxy0ForrcgCFSRKtvmnjUMqV0yxv9w==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.2.tgz","fileCount":123,"unpackedSize":328150,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJevyH/CRA9TVsSAnZWagAAP/0P/2NGtQbLHlNCJVVf6oKV\n95naN7uBn+K31DYkyHD08oZFd53q/7YthYl7E+StC0ZOYGlUzDh/sfsoh80R\nUJ0QXuHgDY5MxZIvVBuIoRAvVPlxKyUsw2og6jetpBDh4F9WTHVLNT11+HbO\nnM15hgIaUNJuIkUVVH/dvn9ecXLirvBYsTpvqNNjn+5+0JSKKZsvmuXXMAY6\nGHi2m6OTgQW4fSAbXSX8m56aDoZWG9CURsJyCkJ3Daouxd6qvyr+yAskwCZB\n9v4JVLVFAauj+JG0llAJCLcKUQAU1p3gKk1wc9UhIJ0N3AEmTUDF+GQIPuHk\n6NrNqnZlDkHndI+aE510vs5uBTqMnpsF5Yr0lCH7k6EINHrFsnICNbyq+7W0\n6F5P3B+NqTNv39Gizmi0unHF0vpa3qJp7I72DoYcSyuBgWCLgxBfReTx6zdJ\nEtVb4+fSHlpAb9feS5F9mwW1GLp5/cWvngUgCy3M2CPlfloZmLQ0kzC/8OPG\nOpZK2KGuEiPtMrZ8phQwNWxwrbXgpGONRFIaEAOl0CnmmBRUfmC3wF310/GJ\nzTmG9PXy6SvC4RYBZbbBqjEAyQXpd3+/9buAcf0reHr9IG053ziNm5qWrI7w\nS7ZHtajm1WhysiWBJJ3NotWcUXq4oLxEMDDGom6sqZ5E3/BScEkUmJvx5E4L\nGqMD\r\n=SIsd\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFeYJDjTq7n9qEguE12gaNApbhFa3wVIxZ9IR/XWJhxyAiB9j8vk5mxQwJpfpokSf17Njm/6m5Nyib89Z+8cYgPdAw=="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.2_1589584383123_0.6413540781798133"},"_hasShrinkwrap":false},"0.2.3":{"name":"expo-updates","version":"0.2.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"d2f093be8abf8f20e9905ab7ef35fa6ef97eac47","_id":"expo-updates@0.2.3","dist":{"shasum":"b8019177385faec69d888ff7ea91d90c220191f9","integrity":"sha512-cg99D7cxNRNUgss6x3XHuVP0OhcEIqkZLP7XeH1frz/Q6zv8SbjLToj6AwLeuP4DCvhD7M64yaGUjM5+sLFS+w==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.3.tgz","fileCount":124,"unpackedSize":331641,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJexHu5CRA9TVsSAnZWagAAQvUQAI+WB1X7yk5eYWexziaW\nbvE7Z8421DmMQxPx70xaoxB2V78z2/ndHgg1b5baY6lFHLSGQSQwJKct5ECs\n4NbqVd/pRvfSa56WoL7S+OV2Z8Qz6iPjkjg/+pFErWM0HjDpRu8jKCtM/5np\nhilDam4MvBmH/bG3IE3PToBynlFaiEsNvehunLQNMV74gZDYuIvLQmoP20cm\ncl4Pce28M0AJy1wKjqMgsjtAfPuuxrkHCpOKC9n0OnlXz8YS4Twfe//Sjboi\n36C7cm9G/T4kmLEcHmw+Kz9AhVq/hWCZ8aRDwKwRjZyceCz8KVpcMn9BMcsu\nqg/RFCvbVPT+SVh2NIySZ1iApOtVYGD5fknknTHzxd9sikLVoROzdex2WcfJ\nYnhj7lbhShX2Xa3sMII6Ap9g5MRTal02VEBt11U10EFquTP9PrOdl25IBQsB\nTat+/YH3XOh/OlfX/rK2l4CsfhrNb60IOIyt+JJL4OmzR1vdFyfQQwjyvwn2\nq7KqqKMUZqtvjxJ7wjmjATmExLUS0mh8EPtS8jJE1AqtVGAFC0QZErn92fiq\nxoupmM1POj7A1KGHuN4s2CNi7B7RMrteXURhRjAcSHI1DhjGONAu9xIk5nHM\nbKiK/hNQHtUcQBeikzS7xUl+iSV1x35n+dPFYl2Ovre4fyWkh0cNCEPpi15y\nTqEh\r\n=LDcO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC0fsMNEiBIw6MViuoqU/AJwANmcGbrvPsLTGNju0wUAQIgXxcyHF1j9hWCQOxorP7MfuIzys1BaMM7hG5u4i5jwjc="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.3_1589935032870_0.8768902943731574"},"_hasShrinkwrap":false},"0.2.4":{"name":"expo-updates","version":"0.2.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"17bf176923f74689adbc6a2c564301e304be3617","_id":"expo-updates@0.2.4","dist":{"shasum":"dfb195b0873cee5a7165e85b574a0b6a877098a3","integrity":"sha512-YW4cA2hLTsflZDoY/Lrnpxp11cxrK3h58CQHl9XpGAOvKul8TVU2moewiZ2Mrn9QrJmW18jJgss4cemrDNmmNQ==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.4.tgz","fileCount":122,"unpackedSize":330504,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJexx+UCRA9TVsSAnZWagAAY64P/jvqHftWr5OKp6loP70o\nBnGwyN1Fs7B1HJ0bxYbw9Wr4Ja0T6K+whja4I9VtPB+Begh0ZyZKqfB8IV41\n94OYE2IQC622t7ImGVix7uqmXQNOF50oY/nIJIPM6B8EP76mZIrNTPQpkWJh\nYea3EG6QjZIlmD3lXe+DAkzsjISIfJQT8psKgOF5ICgiZIeWtM3LTY3zRlQ0\nS/0qRVNyfJlRkPOlqPFBF4nDL3XlshDdU1c0KO4SILzguPUhfL1awpllsGlw\naCnMEx0g9ZOghfCZmZ177GCN/tapwfgvIWe8HqCdpmCrpsXFj0O41YIJEtqx\nYoLrj0uaD7CJYP5w3C96tSB08rAAudCs/dT32zUSUJK7kH5O53OvmvxPZUFJ\ni8TBV7zEZJ4weScJ559iQCs/kTbbzz2G9AqW2Q+DyR7NqkOzGkSDLC+9bIT6\n8KfhJ/TV5S7X6olm51ff6/fwIg1eEjnH+f4NxPfy0Jouqi/Y2tE7DfJY4/al\nU6wkMneXiBmvCFk26/mTuAhiavaEJgKIacuQbNz1m3+blin1UmlEkdkoZ8o2\nusCtXx46UAMaBtxzz690T3ebXPRQ6mQvRTc56KjaMSutEzpybEwlf9AV0Qu+\nhnisFZn8YDOXZlyBlbZA0q3Vf47jZdanBZToToiKjMspdB2M5hNjAn8xFb8I\n/JXI\r\n=nyN7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAjKcehBBGD00rWc4vnfi9rQ0BTLUlF6A1RuwABCaFiOAiEAqOaB3j/DV4sbdf6QIiOJjd9aT4D0142ZTzlxoGADe/I="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.4_1590108051432_0.3120621698498043"},"_hasShrinkwrap":false},"0.2.5":{"name":"expo-updates","version":"0.2.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"723cc9b4f9d327eedea8b769bc64e08004aa151e","_id":"expo-updates@0.2.5","dist":{"shasum":"37acfb4319497250b4d058a744ab73a13d40f8b4","integrity":"sha512-CHE3XGvGm2SGO3aJQj5dgHjG71XwW/i3/OhMiQdZdGEXI1mW0byZ/y/VsO9BRGOD/zTTYmxMJiFCORVnFDNIPQ==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.5.tgz","fileCount":122,"unpackedSize":330674,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeyGpmCRA9TVsSAnZWagAAnJwP/3za+fV0A1GuQbwbsnDV\nz9OHzTzCbD6lqsocfbz48UNMT0AA/hvOEMujsw1lb1wKoD9E4HtdX3QbsL3t\n1Yw6dpxXADWiZAPqLPICbrmq7AfDskCevHsPl5ksjqkGQJ/pbeXjuSC1tVII\n0/luz7ZnYRz5R5Q/cicDj+72rTOXd63DF6AnAMSlYpCdHJOYAPO5UecWoa8w\nCbTVrRYDmFwFiFemvu+DHgV7OSy5+vWqbN99s8JnG+npPY01jikML+hiDErd\n8EeEIfsY9nvtTpB4GLoCJwUob8DT77xKLyGoisaUQjcFGuUHktJ8ghxoP9d+\nJTpmmBVHkGd/9ka2iaDe3Ox/dDZYzUv8QGXCNADB20VRu3p0sDGNRu04eHHc\nTGa8Dc2sRhscqrYqjqj44d+zjuWuP8rel4GG3Ly24KFaY7fUcHKjOLqCRD+x\nfJhwiR6emUTv9+oomJLHG/Qt55B7fJz5Xyb+rk17qW4NXFqiCNjUy5nlz8ec\nZ3MV0kletHz7AN0f6RSZRzO+PkHU6DJRJ+gtwQf+d67d2l9PFbcqLBKdy/m6\nC6rj9S5BldCTS7ClJ8+3oCfCeMxQCpWLncLRgKea6rbM1jKc7NRflW+8/A6W\nm8KKAx51igdsPDopAG3xlvznebM/9fbva3/XjVIPL3x1UQOk0H5ipcyiKFkQ\nb2+6\r\n=hbw9\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEQij2tvFmHVzHLWdHcj9e4jcKB2fEWbYp4YR+CScx1vAiALU7UvpvhFMEbtCPrOG8nwhJzqTpgOJYlaMZzH2UOI9w=="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.5_1590192742380_0.5275557890333074"},"_hasShrinkwrap":false},"0.2.6":{"name":"expo-updates","version":"0.2.6","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"dfc7fdb9aee4ef6fa10a9693e3d0935a2d500ae2","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor managed [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/media-library/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `react-native-unimodules` package](https://github.com/unimodules/react-native-unimodules) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nexpo install expo-updates\n```\n\n### `expo-asset`\n\n(If you have the `expo` package installed in your project already and use `registerRootComponent` in your project entry point, you can skip this section!)\n\nIf you have assets (such as images or other media) that are `require`d in your application code, and you'd like these to be included in updates, you'll also need to install the `expo-asset` helper package:\n\n```\nexpo install expo-asset\n```\n\nAdditionally, add the following line in your root `index.js` or `App.js` file:\n\n```js\nimport 'expo-asset';\n```\n\n### metro.config.js\n\nYou need to add a metro.config.js to your project with the following contents:\n\n```js\nmodule.exports = {\n  transformer: {\n    assetPlugins: ['expo-asset/tools/hashAssetFiles'],\n  },\n};\n```\n\n### Set up app.json\n\nIf you're going to be using Expo CLI to package your updates (either with `expo export` or `expo publish`), you will need to add some fields to your app.json. If not, you can skip this section.\n\nFirst, if your app.json file does not yet include an `expo` key, add it with the following fields:\n\n```json\n  \"expo\": {\n    \"name\": \"<your app name -- must match your iOS project folder name>\",\n    \"slug\": \"<string that uniquely identifies your app>\",\n    \"privacy\": \"unlisted\",\n    \"sdkVersion\": \"<SDK version of your app. See note below>\",\n  }\n```\n\nCurrently, all apps published to Expo's servers must be configured with a valid SDK version. We use the SDK version to determine which app binaries a particular update is compatible with. If your app has the `expo` package installed in package.json, your SDK version should match the major version number of this package. Otherwise, you can just use the latest Expo SDK version number (at least `37.0.0`).\n\nIf you installed `expo-asset` and have other assets (such as images or other media) that are imported in your application code, and you would like these to be downloaded atomically as part of an update, add the `assetBundlePatterns` field under the `expo` key in your project's app.json. This field should be an array of file glob strings which point to the assets you want bundled. For example:\n\n```json\n  \"assetBundlePatterns\": [\"**/*\"],\n```\n\nFinally, if you're migrating from an ExpoKit project to the bare workflow with `expo-updates`, remove the `ios.publishBundlePath`, `ios.publishManifestPath`, `android.publishBundlePath`, and `android.publishManifestPath` keys from your app.json.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n#### Build Phases\n\nIn Xcode, under the `Build Phases` tab of your main project, expand the phase entitled \"Bundle React Native code and images.\" Add the following line to the bottom of the script:\n\n```\n../node_modules/expo-updates/scripts/create-manifest-ios.sh\n```\n\nThis provides expo-updates with some important metadata about the update and assets that are embedded in your IPA.\n\n#### `Expo.plist`\n\nCreate the file `ios/<your-project-name>/Supporting/Expo.plist` with the following contents, and add it to your Xcode project.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>EXUpdatesSDKVersion</key>\n        <string>YOUR-APP-SDK-VERSION-HERE</string>\n        <key>EXUpdatesURL</key>\n        <string>YOUR-APP-URL-HERE</string>\n</dict>\n</plist>\n```\n\nEXUpdatesURL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXUpdatesSDKVersion should match the SDK version in your app.json.\n\nIf you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `AppDelegate.h`\n\nIn this file, you need to import the `EXUpdatesAppController` header and add `EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`. A diff for a typical bare project might look like this (but yours might look different):\n\n```diff\n+#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\nMake the following changes to `AppDelegate.m`.\n\nIf your `AppDelegate` has been customized and the diff doesn't apply cleanly, the important part is calling `[[EXUpdatesAppController sharedInstance] startAndShowLaunchScreen:self.window]` in the `application:didFinishLaunchingWithOptions` method, and moving the initialization of the `RCTBridge` to the `EXUpdatesAppControllerDelegate`.\n\nIn general, iOS will only show your app's splash screen for a few seconds, after which you must provide a UI. If you use the `startAndShowLaunchScreen:` method, expo-updates will attempt to create a view from your `LaunchScreen.nib` file in order to continue showing the splash screen if the update is taking a long time to load. If you have custom logic around your splash screen and do not want this, feel free to use the `start` method instead.\n\nProviding `EXUpdatesAppController` with a reference to the `RCTBridge` is optional, but required in order for reloading and updates events to work.\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n+@interface AppDelegate ()\n+\n+@property (nonatomic, strong) NSDictionary *launchOptions;\n+\n+@end\n+\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n+  self.launchOptions = launchOptions;\n+\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n+#ifdef DEBUG\n+  [self initializeReactNativeApp];\n+#else\n+  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n+  controller.delegate = self;\n+  [controller startAndShowLaunchScreen:self.window];\n+#endif\n+\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n+}\n+\n+- (RCTBridge *)initializeReactNativeApp\n+{\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n+  return bridge;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n+  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n #endif\n }\n\n+- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n+{\n+  appController.bridge = [self initializeReactNativeApp];\n+}\n+\n @end\n```\n\n### Configure for Android\n\n#### `app/build.gradle`\n\nAdd the following Gradle build script. This provides expo-updates with some important metadata about the update and assets that are embedded in your APK.\n\n```diff\n apply from: \"../../node_modules/react-native/react.gradle\"\n+apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"\n```\n\n#### `AndroidManifest.xml`\n\nAdd the following lines inside of the `MainApplication`'s `<application>` tag.\n\n```xml\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\" />\n<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\" />\n```\n\nEXPO_UPDATE_URL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXPO_SDK_VERSION should match the SDK version in your app.json.\n\nAs with iOS, if you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `MainApplication.java`\n\nMake the following changes to `MainApplication.java` (or whichever file you instantiate your `ReactNativeHost`). `UpdatesController.initialize()` expects to be given an instance of `ReactApplication`, but if not, you can also call `UpdatesController.getInstance().setReactNativeHost()` to directly set the host. Providing `UpdatesController` with a reference to the `ReactNativeHost` is optional, but required in order for reloading and updates events to work.\n\nIf the diff doesn't apply cleanly, the important parts here are (1) overriding `getJSBundleFile()` and `getBundleAssetName()` from `ReactNativeHost` with the values provided by expo-updates, and (2) initializing `UpdatesController` as early as possible in the application's lifecycle.\n\n```diff\n+import android.net.Uri;\n+import expo.modules.updates.UpdatesController;\n+import javax.annotation.Nullable;\n+\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n+\n+    @Override\n+    protected @Nullable String getJSBundleFile() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getJSBundleFile();\n+      } else {\n+        return UpdatesController.getInstance().getLaunchAssetFile();\n+      }\n+    }\n+\n+    @Override\n+    protected @Nullable String getBundleAssetName() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getBundleAssetName();\n+      } else {\n+        return UpdatesController.getInstance().getBundleAssetName();\n+      }\n+    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n+\n+    if (!BuildConfig.DEBUG) {\n+      UpdatesController.initialize(this);\n+    }\n   }\n }\n```\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nURL to the remote server where the app should check for updates\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nSDK version to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nRuntime version to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nRelease channel to send under the `Expo-Release-Channel` header in the manifest request\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nCondition under which expo-updates should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nNumber of milliseconds expo-updates should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n   }\n }\n","readmeFilename":"README.md","_id":"expo-updates@0.2.6","_nodeVersion":"14.3.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-1iLvqFxeqtTlGMColWqe4cPCprtKlzh1Ms1RYCckGqK9uc/+GOtOyH08Cns0rbwQ+aRRXHl0kXhQNjSvQYOLww==","shasum":"315bc7f98e2df53c4c6a4f53687fd7d6a7e0c239","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.6.tgz","fileCount":122,"unpackedSize":330797,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJezo6ICRA9TVsSAnZWagAAm7QQAJttzauWOCl2Q+xirkdq\nNGSA/tISbMxvzt6s0C5RAKXV93tos5MBfNbh+FpA9/80CiAHlX1aQaettOby\nDiGFtf5eEzrXyIDEQ+CZC3vzHy7fUKd2vwtpoHpj/ZZ6jGFUo900k+csuEF9\nhmhdRUfbqNa5Vw/Zlf+7mk3WOX/6a3360L3iqnqku+r+ryWdJlZognxCR0DP\nLJy5TP9df8XZOJX3CHCIi4a6S8+UZ+IOs+cGAz5vM+QPJY+hDJ0JM2Maupj8\n+mt/Dml9KkPXG1AaZcvISRMIgvky3VoQMdynd8bs+mFED8U7lRsca01f+dQq\nlVxHqbGJpP4HWHyS1MtEodT5WybeFu6XSPxF2b9yHO0T9CosWKCAu6eKjhuO\nVDs8DCS05hqvBJSPZPdQgLmnfOVJujTwwVVhDXnsXDHkVpAlPndGyGETqc9A\nGdhh+TXh3Xsud2WN4cc+EZcAzfWvcMRfcY9MRpViu2xmz1tGu0CDT4evI/Lc\nS9vP9yBEtD+5gfRz+VIMjFvR3AvifFGxf3LqmaPNPOqcSNe+elJK8RR/vKnu\nZelVBfFs/da7YfP+uXsm5ZhfwxZg+DdOzLiK6O4Y3n74mTD1LEAF7CAhrO4n\nb353w3DlIwWH6uOnoWkLkcSzg9lbu9UTuyE2ar4JEY6yaHqPw8OMPMgarxzs\naZ4D\r\n=6JsQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB16s25hjeN09K4qeGzcJev7zOAWDUPl7iZF5mJs2WY9AiAjr02dEazNk+y8Q6WH74C/3mokci99jMID2rPBCxxCYw=="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"tsapeta","email":"sapeta.tomasz@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.6_1590595208093_0.5025753391884964"},"_hasShrinkwrap":false},"0.2.7":{"name":"expo-updates","version":"0.2.7","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"8ac2f9e7301f50c68740d84fa2ae8a019ef61091","_id":"expo-updates@0.2.7","dist":{"shasum":"8197efebbb548181954f0aa5efbd2c02070bed9c","integrity":"sha512-6CACrRpx3Xj9zoYC1zuLyGfLBL4fvBRW3A1rGV9z573RIhd4Utq4XtlkzQ/VaK4Utw9cClqWZgWfwnanGmulnQ==","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.7.tgz","fileCount":122,"unpackedSize":331938,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJezwfjCRA9TVsSAnZWagAAsjcP/1T+UcVfgzes9+3xr1zd\nSOrWYCT95TgdPpAMU3JLvlh28nAUQ6XkR64OSXNk357ILLfESS9mKVPa696y\nuDj6hzBXYwtXlrTggCiqG2J8Ih0tweeManqyQ3E09MSBm2l1NVUx316FDcJu\ndqlWmGrCzo9GvZztY5ilNog0I4tY2IoiikktJ4IHK8ALiKBLY8gLB5aF3p9K\nCmuO/MzYAmasC/SRNjlR+79Ie6szC0HCeVH7EyxvcoPWFcIKz6OYm8NtiUz1\niHHcwpRH+IycT/AL9OxBi+ZbsvvcTNLDo98AJYM7jPRTQpaaaZpbwXJ0eAqZ\n7wX2PhxtQIX44Cec/S2qP7f7NhuX+epwF0o7rEySBv0+AV9Chykv5Dqr/07d\n0aNWEVJq9xzN2gbYKYyXgTBNkuaKJTAdYAoA0cmtn8jFMcFnynOmDUp7a7Vj\nZm7KUeqQu+yQNTGgEZcnoM/PUiUAfSb/ZCPRHJGXnVAUe22rriSaauOsizLu\n7dYZjFhBhmnCjXvsSrknsMJhkTv4GQGdAzxs8ci19ChTp1k7tl/njMJWsE75\n7i+nDi51JJATgsyleydXtvT2r7FHmFaa0LtNTBGKqimZd4HPPqOtlROEh/mf\nEekIg2WoE8RZ5isruF85P7cPFRaIvmn9fPZVz0/7XUJr6OvjztPpofAScXAk\nhRwP\r\n=6K4a\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFdtlm+2enMrWrROh97cbZF/wjDN1SbqkxT11pl6QDzvAiARQy38IhtskH/BsV+VhuK4LjUlNIp7ZjKGwWmq9t4kkA=="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.7_1590626274512_0.9808669513814725"},"_hasShrinkwrap":false},"0.2.8":{"name":"expo-updates","version":"0.2.8","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"1bc594b4a2f5154c335bdb35f984710a766d9199","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor managed [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/media-library/).\n\n# Installation in bare React Native projects\n\nFor bare React Native projects, you must ensure that you have [installed and configured the `react-native-unimodules` package](https://github.com/unimodules/react-native-unimodules) before continuing.\n\n### Add the package to your npm dependencies\n\n```\nexpo install expo-updates\n```\n\n### `expo-asset`\n\n(If you have the `expo` package installed in your project already and use `registerRootComponent` in your project entry point, you can skip this section!)\n\nIf you have assets (such as images or other media) that are `require`d in your application code, and you'd like these to be included in updates, you'll also need to install the `expo-asset` helper package:\n\n```\nexpo install expo-asset\n```\n\nAdditionally, add the following line in your root `index.js` or `App.js` file:\n\n```js\nimport 'expo-asset';\n```\n\n### metro.config.js\n\nYou need to add a metro.config.js to your project with the following contents:\n\n```js\nmodule.exports = {\n  transformer: {\n    assetPlugins: ['expo-asset/tools/hashAssetFiles'],\n  },\n};\n```\n\n### Set up app.json\n\nIf you're going to be using Expo CLI to package your updates (either with `expo export` or `expo publish`), you will need to add some fields to your app.json. If not, you can skip this section.\n\nFirst, if your app.json file does not yet include an `expo` key, add it with the following fields:\n\n```json\n  \"expo\": {\n    \"name\": \"<your app name -- must match your iOS project folder name>\",\n    \"slug\": \"<string that uniquely identifies your app>\",\n    \"privacy\": \"unlisted\",\n    \"sdkVersion\": \"<SDK version of your app. See note below>\",\n  }\n```\n\nCurrently, all apps published to Expo's servers must be configured with a valid SDK version. We use the SDK version to determine which app binaries a particular update is compatible with. If your app has the `expo` package installed in package.json, your SDK version should match the major version number of this package. Otherwise, you can just use the latest Expo SDK version number (at least `37.0.0`).\n\nIf you installed `expo-asset` and have other assets (such as images or other media) that are imported in your application code, and you would like these to be downloaded atomically as part of an update, add the `assetBundlePatterns` field under the `expo` key in your project's app.json. This field should be an array of file glob strings which point to the assets you want bundled. For example:\n\n```json\n  \"assetBundlePatterns\": [\"**/*\"],\n```\n\nFinally, if you're migrating from an ExpoKit project to the bare workflow with `expo-updates`, remove the `ios.publishBundlePath`, `ios.publishManifestPath`, `android.publishBundlePath`, and `android.publishManifestPath` keys from your app.json.\n\n### Configure for iOS\n\nRun `npx pod-install` after installing the npm package.\n\n#### Build Phases\n\nIn Xcode, under the `Build Phases` tab of your main project, expand the phase entitled \"Bundle React Native code and images.\" Add the following line to the bottom of the script:\n\n```\n../node_modules/expo-updates/scripts/create-manifest-ios.sh\n```\n\nThis provides expo-updates with some important metadata about the update and assets that are embedded in your IPA.\n\n#### `Expo.plist`\n\nCreate the file `ios/<your-project-name>/Supporting/Expo.plist` with the following contents, and add it to your Xcode project.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>EXUpdatesSDKVersion</key>\n        <string>YOUR-APP-SDK-VERSION-HERE</string>\n        <key>EXUpdatesURL</key>\n        <string>YOUR-APP-URL-HERE</string>\n</dict>\n</plist>\n```\n\nEXUpdatesURL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXUpdatesSDKVersion should match the SDK version in your app.json.\n\nIf you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `AppDelegate.h`\n\nIn this file, you need to import the `EXUpdatesAppController` header and add `EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`. A diff for a typical bare project might look like this (but yours might look different):\n\n```diff\n+#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\nMake the following changes to `AppDelegate.m`.\n\nIf your `AppDelegate` has been customized and the diff doesn't apply cleanly, the important part is calling `[[EXUpdatesAppController sharedInstance] startAndShowLaunchScreen:self.window]` in the `application:didFinishLaunchingWithOptions` method, and moving the initialization of the `RCTBridge` to the `EXUpdatesAppControllerDelegate`.\n\nIn general, iOS will only show your app's splash screen for a few seconds, after which you must provide a UI. If you use the `startAndShowLaunchScreen:` method, expo-updates will attempt to create a view from your `LaunchScreen.nib` file in order to continue showing the splash screen if the update is taking a long time to load. If you have custom logic around your splash screen and do not want this, feel free to use the `start` method instead.\n\nProviding `EXUpdatesAppController` with a reference to the `RCTBridge` is optional, but required in order for reloading and updates events to work.\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n+@interface AppDelegate ()\n+\n+@property (nonatomic, strong) NSDictionary *launchOptions;\n+\n+@end\n+\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n+  self.launchOptions = launchOptions;\n+\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n+#ifdef DEBUG\n+  [self initializeReactNativeApp];\n+#else\n+  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n+  controller.delegate = self;\n+  [controller startAndShowLaunchScreen:self.window];\n+#endif\n+\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n+}\n+\n+- (RCTBridge *)initializeReactNativeApp\n+{\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n+  return bridge;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n+  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n #endif\n }\n\n+- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n+{\n+  appController.bridge = [self initializeReactNativeApp];\n+}\n+\n @end\n```\n\n### Configure for Android\n\n#### `app/build.gradle`\n\nAdd the following Gradle build script. This provides expo-updates with some important metadata about the update and assets that are embedded in your APK.\n\n```diff\n apply from: \"../../node_modules/react-native/react.gradle\"\n+apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"\n```\n\n#### `AndroidManifest.xml`\n\nAdd the following lines inside of the `MainApplication`'s `<application>` tag.\n\n```xml\n<meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\" />\n<meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\" />\n```\n\nEXPO_UPDATE_URL is the remote URL at which your app will be hosted, and to which expo-updates will query for new updates. EXPO_SDK_VERSION should match the SDK version in your app.json.\n\nAs with iOS, if you use `expo export` or `expo publish` to create your update, it will fill in the proper values here for you (given the file exists), so you don't need to set these values right now.\n\n#### `MainApplication.java`\n\nMake the following changes to `MainApplication.java` (or whichever file you instantiate your `ReactNativeHost`). `UpdatesController.initialize()` expects to be given an instance of `ReactApplication`, but if not, you can also call `UpdatesController.getInstance().setReactNativeHost()` to directly set the host. Providing `UpdatesController` with a reference to the `ReactNativeHost` is optional, but required in order for reloading and updates events to work.\n\nIf the diff doesn't apply cleanly, the important parts here are (1) overriding `getJSBundleFile()` and `getBundleAssetName()` from `ReactNativeHost` with the values provided by expo-updates, and (2) initializing `UpdatesController` as early as possible in the application's lifecycle.\n\n```diff\n+import android.net.Uri;\n+import expo.modules.updates.UpdatesController;\n+import javax.annotation.Nullable;\n+\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n+\n+    @Override\n+    protected @Nullable String getJSBundleFile() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getJSBundleFile();\n+      } else {\n+        return UpdatesController.getInstance().getLaunchAssetFile();\n+      }\n+    }\n+\n+    @Override\n+    protected @Nullable String getBundleAssetName() {\n+      if (BuildConfig.DEBUG) {\n+        return super.getBundleAssetName();\n+      } else {\n+        return UpdatesController.getInstance().getBundleAssetName();\n+      }\n+    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n+\n+    if (!BuildConfig.DEBUG) {\n+      UpdatesController.initialize(this);\n+    }\n   }\n }\n```\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nURL to the remote server where the app should check for updates\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nSDK version to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nRuntime version to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nRelease channel to send under the `Expo-Release-Channel` header in the manifest request\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nCondition under which expo-updates should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nNumber of milliseconds expo-updates should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n   }\n }\n","readmeFilename":"README.md","_id":"expo-updates@0.2.8","_nodeVersion":"14.3.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-gBBsf8Uh2hhBqDjfBj/eWT8vetOQbv3zFH7R/CjEihmKRiXSJGRpX8qss8Qz0qFdWfNm1ytcZzMJs1gLdfVKiQ==","shasum":"cbc99069d0eeaa94ff3be34cd529e4c1836e479c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.8.tgz","fileCount":122,"unpackedSize":332070,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe0OiYCRA9TVsSAnZWagAAdLUP/14XayC6eY99l/YZ4Zp/\n/AXWz1oIpk4gskhxsZhG7kW/aQmf29Okjkiy594vfavCurtkGFvWZ5EJyH7i\nGakPTIyqAIRLb3huBsv/59Elbu4trCY6Rt4es9c82RQUZAcLpsiRXtnx1WUk\nLuRZXQMniBP5Vmxz8LP31kuUtbti8+O3tUk8wKrBDYQVl8T2jO7iZywGxmLE\nJ65XUpamJykMHYzB2TMS2VZO3TjegvUuw1djzumLQ4eAg/w5AsSfCDoV0Mav\noS2I4EU3mvABY8qcaQ1PGTk25ts5Y5c/z966wwz3WAXP3K+2nQ2xTTpZCqUG\n64dRTqv2gZhSH/oQSoLOMEbAJSek3daOOC0bfFcht2DXZDsfnJTRyiQX2YkM\nIIHkuxLYCF1rwKxa26815DInN8JMrMwTzyVbJA+wMQbMoI1EX+1UdB4NoFZR\noAuS8Eb7APlJ3BYuKP/hwu6hcK8YP2bMCa2NZin06ytXgXdAplmBtflO+/HU\nw+8KMa5Wa1PWI9DlBU+DD5eKjh0p3xwlXICoSV9k6PMfxtuVtVf3yjF2exkj\nG6GEZ66XDX9DLmW3WompX8s5/KGCj2XFgD1HFTYtoX+XWbfdcBDVA8957+Zv\njSNAsUggPTVo9c5BRU+7G0ajk7nTRJRz+Ss+17GmNCx2HdTCIBQHEP/z8rJJ\n7/Ab\r\n=ajbY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC3yRUshEw7naDeCvBwP5ie32Gy0aQxBmtcnXV80BHZZQIgbLxymxUr3j9dOSPQhsSn2cXg9X3CVKCa1WQRiDEREVQ="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"tsapeta","email":"sapeta.tomasz@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.8_1590749336483_0.6160012559133421"},"_hasShrinkwrap":false},"0.2.9":{"name":"expo-updates","version":"0.2.9","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"455f4066f3a2f8b40c2a128fac2c40dcea348f88","_id":"expo-updates@0.2.9","_nodeVersion":"14.1.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-EthxqpcpM6GaabPY+rNeVzH9HtaWBBEgL2dx5XMN1aUeIFcwQLZFKjoKMJ6h197j1/oxHu01wCyKQ57xvZJnnA==","shasum":"3a097623310991886076001e0c8f3c7e139f9a86","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.9.tgz","fileCount":122,"unpackedSize":342393,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe5+19CRA9TVsSAnZWagAAFtoQAIKZQCt/obQVIKWTToD7\nKKG7wLdqF+S2ZRZ5jpq0nniAWtv+5ZrkM5fPums5J4PxOs+TcyrlC9Cg6ntz\nW6ETzuAoPQ/cHwbuiKLUFINAahk0Z+YWRWCZmWvzfZPfipD7fCGRqiqVal+g\nA0rxCcrBbFcWsDOAWXTeUBx7NbUOQl/UCKkpFGp/1YHGhilXvNrF0Ukv05L3\nnntuiCeHXUx93apoZ4gcbSxKKJ0d3nRyl8B4/RlXbCy11AZeRvi3MDgeuAH3\nlr4WyvMs8Xj+WXOIvTVeQjJ2fkE16h5Qf9qD6ihEnRvFmYvRbdoNtyFSMPSd\nAKd61LFPNW9+o9LdIAPmvuizWFZBbd/ui6iBi2bRIDSvqx/bb7bYGHukBLu9\n4MfHRbXCNX5FKMjYwMv/2FzBCo6UyUV5NtSbTToTP/ivNfRZ00D1GEzqQTwS\n/GrsNcvFLUzGw4JimZ9mYjtRKGqr/NcwmEoDWGcY+O/Xqbou9x2OHzIvS1AZ\nXF1MnkSN9eEWNu69XDBtUBrZOXiQ34QUIU1+UsJWNavNba/oJXfZ5eSADoWq\nN08omTSNzg9cx1dpCC5pU2aSwq5XXyMLxq3jYjXCruk1WxgIoJ6zrF3qHn1G\nF6SNjSevRd4gOv2rrDM+YyUbOXOba1ENOVObHT3DFxh3Z4TYrwqDxdXKfpTl\n7OZR\r\n=CJwp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDUTdeZYfRlHCRf8nQ9JUVrAv0fc7txdJkNrcsspDF4qwIhAK4yaMDQAgC7wp1zRwMBqNfAkrP5/XDyEIfuCvcwHpAu"}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.9_1592257917516_0.5748138244663417"},"_hasShrinkwrap":false},"0.2.10":{"name":"expo-updates","version":"0.2.10","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"1b61af26782c89da45ba559e60ebb2a38b6e80b3","_id":"expo-updates@0.2.10","_nodeVersion":"14.1.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-n+EnsG7j0XwAMxa/RQ3S8eFjjETn75mQ0oZvzj2PIPwxU87y9fZiVaWcY0l9xbDVNU5nqDprJeNwWjNlKRIhuA==","shasum":"40c520f98c45f5bdd9049e189417048b76c1b361","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.10.tgz","fileCount":122,"unpackedSize":342559,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe8pYfCRA9TVsSAnZWagAAUj8P/ir2nowfbn8IAMmc33xt\naw3RX5YXH78QYgIOvfCyKQ3mTAbPrfbNm4hw1ax6qqqG1JcDKt5vJemHZ164\nxWe56S2XfjjxvWcgrOuHvwGTRlSjtYX1jIbpJkupn8deMKaXqhAnYKbNvXgj\ndpMsbvj6+K9w3TUd14X0gx1KpP1TxLEB5gpIE3xwigqisAZV9yWvy3WVKOtb\nWKK/CLHYjfbde3ColpIkiayPEgmadVtmjw/ZysjeHyXmEx2tEnAMOTIu9JvN\nfZ91j0p+lzZ4E8IFylg7sEeS98u+kuJby4m21qJDaU9P0gaPs8yzzzzQcuAU\nkryqV+u7aX65PtsEoxzEmOMGqG+ftxiJPy21EthfwLdQnO66mS7o9+hruqSt\nrL+jYZTMdZqS5Je1zQTU8GmlmJ+bPXb9lrMSf7Fe1QW5MQDHsLKS+BogO2ef\nHrECak0QFo5qpneE/k9zDf1KwCPuk4fKgQbu08udWtKtxoiREYrvJmguy6ED\nV4KmvHkAERvwPXDREC/3rPtjNc99mnP7bWzZbnI16yPX3E6Ym8J9aRJXVywE\nSFxbPG9wyraygTbdkuEE6KeUv1IATMwwOmJo1oqmeHkE4xCMS7XaeJIzbIIY\nzjXX4iQEQeix6b64Xj/kmpros6sTS63O8yD4w55CRR5F4tH7ybhpQAQz5+e+\nDk3Z\r\n=AEhp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCk67tsIOSynkMnHF67LSNTf2PbDUp1CbHbvtyLB6VeAAIgY3xfnXOhJ3EnralNE6MqtOAZ/iGHa5/h1QPh8/HeT7w="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.10_1592956447228_0.9029618070819561"},"_hasShrinkwrap":false},"0.2.11":{"name":"expo-updates","version":"0.2.11","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"f3e910075dfeedb2d1ecb063b406227372da33a8","_id":"expo-updates@0.2.11","_nodeVersion":"14.1.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-j3Zenpm7qdnECOQsCk3YMnR0hfBqchHEQ31/QhpgSbrX5zSWhO6kY+IyGQKeCNnpZc8GXyJIlEu5AfUvFe1UdQ==","shasum":"8131b191049c1384d83b9b992bb33c1d1d86e3c7","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.11.tgz","fileCount":122,"unpackedSize":343208,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe+iNMCRA9TVsSAnZWagAAmlQQAJCdbyIPmvj3IvRys70z\n3QvnVlUMVLR2lzP85+IExU32Ck2/6RHRGwqD/jCgcEyCZpfQC47qBUj6wEQE\nkqzEpwcMi8lu+tdwrBTQO2J0q7ARwmb5JRlJvKFN0hi9Gt17Zz4szVLQk87f\nVIhiPgPZXjse/ijaiHcJjqBwcl+hzX9y1qlFba3mt+H7tmCY5/nMXe0qKRp1\nkgQH6gZk3Jy04Rrfz164lC7VJrisr3J7u9UUh4P1xfVhm/f5Z0H+zFP9J8Nd\nUC25c8tTe1kzSKMm8oI23yIN+/Ix9Ewhxe6+YSG0yxHvI8oQaT+at7x/Icz6\nfvff1UBfhoUOxOWR/hAUeNn2ZePdCwvzF/xaydm7hOGCfr3vVUBZxAhsnVbI\nsw2rG1EWrhbRamP5EwS/fb9SLizfqrHJBRCfzl8oPs3zQAFLIfTgqR946xnH\n7MjkCtT+3nPZ9dKZKXgwfpci5gOIZm0522hvD4qOkakqyJ6Qw+e54ts4CD7M\nZ1WVCWlylEQwbGznOfr7nGHcOrX2m/jgZ/xFvblmeBPNqTKECam3lyfI2BBA\nwDx5RlY4UwjpEEnh/RVwzbYMyXmcEdqGMDyvsbE/gGq7uaPdDE7+U+ztbjLt\nRTRtTRle8mEgGuwQx/sJ4WuAKb4ZyxFz7Ie1oygw2SvIDIa6SE3kUazqJhYq\nU9HG\r\n=S+yH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICzOtM2yxsbFAJKe2I+u9VORFyvbOGuIItxnq5MIoSOIAiEAvs5+1ZYqj7TXJo0tGiJo9GGCZZEQRmCALonhp298NoE="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.11_1593451339906_0.5628968407122674"},"_hasShrinkwrap":false},"0.2.12":{"name":"expo-updates","version":"0.2.12","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"0a9c072f00778a05342a6b03532bf0a7852d554e","_id":"expo-updates@0.2.12","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-4Tw/aJvTpjJ0fUKSyzFS+FKWuz9SXZcEyJzN0QZQRT2kFStxqJj2b9ntFt3F6+56n7mi3pbQNRHsB18a8luYUA==","shasum":"62e731b6d90cdccdc0155862a3b0c9bb57a105a9","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.12.tgz","fileCount":123,"unpackedSize":343028,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfGzm+CRA9TVsSAnZWagAAEzUP/38v9cmL2lZosC7Q2qhl\nvY9z9+6GBlNa2F5X0pkr71EtxDtfo4DgD/TWYL51QS7J311E7avfFy3MKaWT\nz+/GnVZp91UEaMEWnHLLHRdEvKQCToOcL2kWEix90aEB4/MVf4kNfDCG9zoQ\nwC8nmrrFqI9t8XAys1fGi5hi0RADKhDZ99Q3WBBQaO3ix8HefmCyS9FkfVjm\nX+8poVVjAC6wWzKaG2YrvI46DnXWxVPdPhyhXpTNOhz3OtCesVdqoWLuo4OQ\ntzSj2RHfleMf6Vl/H2ss7JyIaawWTyrsZV9P/NpzI4XJTCQeIoebBfVAzem5\nrkJac6bFFPmXnp18kJ8age+JF77hGvxOsyNxsPHhkBP+Wbt4ipNnHCZf3TRS\nLX/D/NfZ4b47BVAzUCJwx4NbWuje2tT2ZhVasHQBzI6yaTtmiQmShiaYuRnV\nZ6I6ZVmXwVHUsKhkQ63x7QZXqLlnx2R1DAEST5UW8GF4/07MS+iKnSpYkm9B\npvg45+36r2bAlMLUtsjWSekk3+M6Ul0wQI/moaabQ9NGxQ3Amv8hbgd7S+QD\nDXKC8qntYSK58k0b0h8XbIMeUIHmAAoCGk4xavEHQaH5nyhSiDnHGTy2Pz7E\nr1X2Ax7GwU6GiBDQwbxIh4sM/Q1NYK48iAB8KU5tPEtIS49CTrDSPC8avDBG\nSJsE\r\n=t7b2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICdckHpXNYtw9LC/Z4fq6OIRaMaVVZssX9Wz7ryUz4faAiEAxcXSlAAQjWqaZnrbTDR3i9hduq0pyXvkYKV70X8zjUE="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.12_1595619774355_0.5024477327258086"},"_hasShrinkwrap":false},"0.2.13":{"name":"expo-updates","version":"0.2.13","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"cdb1826bfbabdb03156ea6a5b6c049142b118333","_id":"expo-updates@0.2.13","_nodeVersion":"14.6.0","_npmVersion":"6.14.6","dist":{"integrity":"sha512-txJryKpt7pnXGldFLsqhzNx5BH1wKvKN7PD8CCyuqGlDAwbWoxVGC7DueitvGngCTeMTVybu+oQYNIRYaIm0cw==","shasum":"b2249f0248a504d51c81bcda900954d883b7395b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.13.tgz","fileCount":123,"unpackedSize":343263,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfI5YsCRA9TVsSAnZWagAAufMP/2zywuu/HIvtsO2CNJ2L\nqfndvUitgO02SrvBFaZXj/R1lKhGEK/KG/Qo9f90KB++/wu8Fq8ELmiwqvz7\nMLPxo6SbK9QJld5C8/r5yCMJ6T4qvaBwojMXnjn9QK5Eagmwg/6/UwR6Rll9\nlGoDiDkru6umISb53bZkmPI2rAHrRe/OvKBRLpiLFOFMNfFtovV0LZIneLmY\niXwrAZA4tiRJnBAYetbaTeMgk5CgC0fQB4D2mOODO0gjx5Uy/Y86ic+MEdL3\nH9WaoXnt/B42HJ2337FF53lF5jNAzRUDjCvyolXdENLOHrhoki8e01DJvG+H\nUIRw4LnxVXn1yRckQ1JPUawrr+F9zGmy5KrEAPGK7Y/oj8JEOQmCMNR3LaT5\nAFPn5ZYRKtzww1zwnTcViXPB6azMb3BnfVlLVIxnyptCiNTEYeyh61yMhjjh\nBzOtBgf8enNMwfpT6I7zQcIEgC/QzkL2Hp0wA6o5j/Y21rOGUnGyLH7L14Yk\nvYor6BnV/wnxhUXy3nazOYU9tvH0Dh7OvzorsJRuvVLB9oQw9MPuPQtjMOux\nX4e2vuvmq7VxMbACoctw89klXRR6hiuObZqbJSCXugZM4NPJ2f/2AceHp2BB\nNXVFbrxP3/kWm5qOOzlgqOMPlolLBvW8hMBRVPOTnN9aM0JDNehoRptiXfdU\nvgb9\r\n=OA7c\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE2EyrWtoepEHVTRtKI3LNYDUvybD7YWLOV38j2MMx7nAiEAm+FxswYtEVo+qGQT0IiigL0lc5XehWOFhjQXsY7TiSI="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.13_1596167724307_0.902660885131154"},"_hasShrinkwrap":false},"0.2.14":{"name":"expo-updates","version":"0.2.14","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"bc0042ec0879e250dc570d7f85c12951397671c1","_id":"expo-updates@0.2.14","_nodeVersion":"14.6.0","_npmVersion":"6.14.6","dist":{"integrity":"sha512-/FNEDRSS7xxG+ql/vDdjPD6eAG63K9zbXsinYsu9Nrm06OhbB8MAx+OA4bMn+CZkvrQOzVJMhZ3oPvyOvEcmuQ==","shasum":"0cfbab6ebb8560b1955d888a7d4a31c643e7f3fd","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.2.14.tgz","fileCount":122,"unpackedSize":343714,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfJLVGCRA9TVsSAnZWagAAoU8QAJN3GLAfce9ibuws8do/\nZNgN1EMx+Bh7JHyF+0IEU3QqX90MFLMzk16rSDVViaNgC/IWsyIP26f/2pDh\no9NhY0shVSpjqGO5q8w6NvZrAS7kA4i9iKVMtI37Wjqsbr8NbOTujUDIh88l\nWRBvE6v5yBKld3IwaB0tu1RcL8MiJGy8pklIjFmpsSJ2yZy19Z0wHJap2bbF\ncpGSe7TzExdQTz98kRobNau4MKMdCXKG+Y+Q9lRX7nNJ5RLeA1S/ISy+sOna\nraQZ5pWEFFm+iB+KwLIS7ehzoYQhs9mEpgXHeoSp1PtaeQoqiAQaV/DWtguL\nqiRcqtRm7wvIRcPA1Aq+XFvuJDrtoheczo8Xu6A3C/EmXGp78+XcKilO3eKU\nHUTEnrTBWNM4cl0nHyws4sdXyk5A1GuvJuopKKmC/PASE6nHXfGCraChu/Zp\nT3O3cnHIoGUOeH3LwkXaieXe45QOt1gTNtKv/vSWhZLIBtUqvJ+lsLapbk8J\n75QrecihUd3n9mQEp3JdS/xwoB1fDLpwzhQQ4YUAOqIjiaFjPq2r7MYAXMSc\nXJcCq2ZDK3GSVb1aQ7z/PZem9ymPla+dQAuhn/D3ksTlauGqwClX8+Va6myP\nZv0IiEzSP/TvkU5WUVsuPS1rB7IMKhA761c6elDPZlK8E73wkE8EPAKk/oNd\nbkfJ\r\n=HFtn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDt3ZvT+Co7UMhpqd0o+Re/LWZ34CgB3SJu4lTRgl7FyQIga3J/LEld5ADy5hZRVxdBI1n0waFqcNX/Dbxs5/CACto="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.2.14_1596241221586_0.571091374757773"},"_hasShrinkwrap":false},"0.3.0":{"name":"expo-updates","version":"0.3.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"2196cebae55bda181ccceadec809942f51ee9e39","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor managed [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nURL to the remote server where the app should check for updates\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nSDK version to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nRuntime version to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nRelease channel to send under the `Expo-Release-Channel` header in the manifest request\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nCondition under which expo-updates should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nNumber of milliseconds expo-updates should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.3.0","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-TKwXetgvDEzmQP1NwBB8j1JRJorI7fv/AX/Q6TE9e/mgFJguTJDJQc9N3xFbq9xVfRYoHlBCp/Px7srrqzxDcQ==","shasum":"afe372642d05924cba6d0220a639eafd39dccc86","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.0.tgz","fileCount":119,"unpackedSize":367622,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfO+kiCRA9TVsSAnZWagAAaKoP/AyfsT07aIf0zwB1XepE\niwkMiplBD9uhS2qs5LaHy50aN8uWiXU6MpG4GyJVDHxVVpTbl73SNzYtrppR\n2k3R28zCIul5OhjuHCvHWzzQlnnKNpqpjIXFMdMbAsWYdxBlkOE2V84VM4rs\nXjJD6jH1n154i0aA0+uWjfBDXWGuKPwrsqsh+0M+0isf9H+m/NbRdfvhfedA\n/rGtkIgSrVDq7KiEmj4gaqGNR17bBzmG6Hw8gf+HcjMnYTrl5+hLgINxNeWK\nOMS2NpOp/1NOruzw1Rjci3Hd2OLXTfA13UbKXZF99R9qVcM2VTN/LpHRGKkU\nVU+yOYNcUwNCjKlLmJOcK1YGBqYOnqaiijROKCkeb5z7nIKzpKSda0pmMUKe\n9yJ5fEhxLmGQa/Lhmjw1z2G1UuUGBpmUzloCkxz5uvnVwZabSiG7jVSB7ngz\nG8fADhQNBb+zkAcBkb75ZFj35g4QBdXhvKxCO0Ncy/zyW9ksorpsU1L/F/l9\nusU7bQAqng0EytJxoQQfwJbazjh3m99k4QYIYY7Z5JeNvWD8tizzLzgU1SrN\nudRU/kbpXd6eJaXzXaFfNFEJ/GiAEHDFGOle5kaGbxmk4J0DIUheffVPkaCy\n0dDbHSULWL1Z8uVwVyXOzZn3WZvLI1ZWK+BK5u1+kbaIbNRwf7TSyNwd2b91\naw3n\r\n=o0BL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDteQ2GpV88VbPdmlDl/cXGnpX27BQ3j5Z7E5mIPHXtJQIgauCSGco02kKZ9DPYIhKItLBaD/dK6jwhMcCXf/iSu8s="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.0_1597761826189_0.47246777241970683"},"_hasShrinkwrap":false},"0.3.1":{"name":"expo-updates","version":"0.3.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"0b55ad5d1a6f3840af44212458120212a23134d1","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor managed [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.3.1","_nodeVersion":"12.16.1","_npmVersion":"6.14.8","dist":{"integrity":"sha512-O5z30zELHE2VeI+Hjwn32SWK7paIM/vWTFo44tJ3Afw3jUsOz78ZHL6mMl8cQIrpAq+bBcYnnuVCTd44azk22g==","shasum":"995607bb755306f76b4ea874584c35ba1ce70f71","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.1.tgz","fileCount":119,"unpackedSize":368246,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfRi/+CRA9TVsSAnZWagAAvXoP/3UGx8jAzzzGbmQFgJqT\nAHTq+HsrTwdTdVBKK0i4tSVuAHzj673qVoEIoQFfoM/iVxHL7+kXmnUj3ygK\n5NEs+YWN5XvF1G73+jldLXULyLfmzwMja01URi5kb1ha7+UJy18y+lJ/15NV\nw90T3CqmQY28Y6zoYs1Ud2jyQKAFFIsegN2DRhgwSLOoOnSSUPW0HtYH52uO\nOmNudPHu7O4k13F1mRHxTwIyhsdSw78ayzlzbmcbhMjsPYgmenpzjcjat1O6\nOb3ZiL1cXMDG688p2WlrlIFCDob6o6/Kawl3wg/uQP/nl+blkTqK0W34hJDq\nEoHUbv7bwBupTUCMsTFdzT4FXunynI9LmfA69RxB8cwTNLcfOrqaOC6njTNf\nnN2vj5r/3/GV4apbF3N+X4mc1ce6I5hKhVh6x+xCrV7ee8AHaqQZ+SCOc9Ps\nYcFCIVZmykSFtHGFdgaln09EA0D8q59QjtCgL2SwayRObt9QGzAidEYDiBah\nkWq07GDagIUye5RjYrK3Qc6hGgPTLPGnPOR9tyWlRDc3tebUky9Zye1V+zfH\noLy4y4GOzoIUHkhX4PlrmGvBTFVhxGrAOV8vctFDEyv4FZcaUJIoXh8ar/QK\n59X/UwE8oPIdkz/mPq+49hqvhJyIPA7dp5tjIAoRUAS1yMx2gu6EWpVhFu13\n6cpM\r\n=uCSb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFxD3oIvo7bXtxdFYXPmmSjvUHAjx8/kF4PMPWEGsmxzAiAOhrCSQKtbdznYYoAkNniimnQORGbj3PHVoIRgoIBPgA=="}]},"maintainers":[{"email":"bartlomiejbukowski.b@gmail.com","name":"bbarthec"},{"email":"brentvatne@gmail.com","name":"brentvatne"},{"email":"me@bycedric.com","name":"bycedric"},{"email":"ccheever@gmail.com","name":"ccheever"},{"email":"charliecruzan@gmail.com","name":"charliecruzan"},{"email":"dominiksokal@gmail.com","name":"dsokal"},{"email":"eric@expo.io","name":"esamelson"},{"email":"baconbrix@gmail.com","name":"evanbacon"},{"email":"support@expo.io","name":"expoadmin"},{"email":"exponent.team@gmail.com","name":"exponent"},{"email":"ville.immonen@iki.fi","name":"fson"},{"email":"ide+npm@jameside.com","name":"ide"},{"email":"hrutjes@gmail.com","name":"ijzerenhein"},{"email":"jonathan@expo.io","name":"jkhales"},{"email":"czernekmichal@gmail.com","name":"mczernek"},{"email":"quinlanjung@gmail.com","name":"quinlanj"},{"email":"sjchmiela@gmail.com","name":"sjchmiela"},{"email":"tc@expo.io","name":"tcdavis"},{"email":"sapeta.tomasz@gmail.com","name":"tsapeta"},{"email":"wojciech.kozyra@swmansion.com","name":"wkozyra"},{"email":"wschurman@gmail.com","name":"wschurman"}],"_npmUser":{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.1_1598435326210_0.7887788664149626"},"_hasShrinkwrap":false},"0.3.2":{"name":"expo-updates","version":"0.3.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"3ab022d478b75c4825295ec8f55b91c9f310f814","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.3.2","_nodeVersion":"14.5.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-+OevMP8rh50AtWWqJnJaMuxmFggYejNvT3zO7QlcsNi5S2AuxQKeeTn5eki9HuoYeOoCQ89Fc2Sj6iTSBaUNkA==","shasum":"66dbbc519245a46bde658829512f46ac1433a49f","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.2.tgz","fileCount":119,"unpackedSize":368905,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfYqOmCRA9TVsSAnZWagAA3S0P/jqBSa+T1O5i/gr6Y7mE\nkxtM0lfAR8ETzBq4hTVmxrc3S31AAVAerX+FvS3ROE7NsAThVPmase2zQwlk\nFijcufnzN6Fl7qHdRQkyHQ5INEMSTi4x1bPECYOc0gItZ7Iq50XC/3nZ6pBa\nDXkyGwDYenRuxyjS2RWttD1PGMG+qJb+gbjeJ80LV11Gkpf8BiPjK/6obQYW\nfk2Ybm64LSMfTdJtnQbzOy4NFp1PYelpGElvupxTqp+T88z7rBVRc7dj8LMV\nnv3VXzfZtbR8cxPYElI1kQ5FKYB6gbQJ6awx/ID58pMwrtj5HF2FtTJ1ZH1U\nBca1Q1JjiD31YbdPZPMrVtehuwsWpw7oceSiu2H0hAk/qUV678/4rtYZ+Jfl\nIxhINsUgtaj72OiATYiyQlxSFH7ED4BCjrQUrYPWiyT82/RBWRTB7NJ9xLK6\nzRudNO7oxPe4WHEnR+CBGj8C6vJ0SGUt8nOtkicCQ0zkSSkdO5cbfaR1xI+A\nEU/lvgpIZyeDsbMD9+mVqvxF2KsIbNAUvY4bLuV/CRTyw0NUXJMP/R7lAK3I\nFn50OSHIl7+2CG+Yavqy7H65a1zlBzc21ZkGeRC1TMKcm875C4L1cGLAGIaG\nOCoWo9SCbdZ4d/fEPB8nrsdnZpPu+AWknc7pQw8GJsHhLTc3TPamh8DUfztr\nWjdJ\r\n=Plqy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDPV0X0F9CAFEjVUWG54ZiFNtHSZsLti8dVv8yejQ3uJAiATWvsem8weAAXHlwXX4yJ+1Ux2OUcpIjX/V/XRuQjucw=="}]},"maintainers":[{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.2_1600299942454_0.8636872370328044"},"_hasShrinkwrap":false},"0.3.3":{"name":"expo-updates","version":"0.3.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"0d703483b5b649ba4c3da263f27d7cb43f7b4c7e","_id":"expo-updates@0.3.3","_nodeVersion":"14.5.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-8GIuxhS40Lj5J0fd7Kv8uhbAg6L4AzVVVKz0sdnaO7gO1Db9vSxgYfswb4NS5sXF9NEn/ReTJJJG09PnMdtZJw==","shasum":"0855ac8ccdc66e94b5fdbc09e04192570968f20b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.3.tgz","fileCount":119,"unpackedSize":369937,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfaOBaCRA9TVsSAnZWagAAVbEP/2nimSEEMGFtZLXmEacj\nGxblMqlA8auRFZEGOdyguCyIVV4U8Q0dICKU38FT4yq4wab6im4A2CVCHI06\n8QeeFr/9EJhOUpja1fncM9iD5C7W1jeNMlB2rmiK5lrbi/Ij9y0GcdCj/3+U\n1ABGYGsYA+yfcsUXnEbyk9HEee9UENKlQE/A7WOLVjoMPhyXvI7cuGSc0s/8\nQoDfB+I666E3SrLX+///FScOyObGi5uyza0nJYH9G3IRw8+ooKQhnvN5zDGP\nnEhoSpyca7I0ddk++ryIibjwpvl0lC2zupjEjTqN8vUN2QltSYBHBAsUoLkb\nFmFwSaS5b/tA3TRYt4E4vHnsraHrWp70zCAD7nsZ5RkxWCGBBtgdRui+5V0N\nWluqmCuKiFAl9UHzZfD1cKL5FJXDqdVccQFaQVpbm6YrcvKjV8q/VLQGbMWm\nC2VdWhIewl6srUiBDYDVtF1DYujm0T/VYQLfF3j57hTUNubeCnRR18HgpsYH\nCz2720PSteF5PVQNi+LSB9xIKPFurbuHWzJ+pqIDzVoeUj5EbUw0+y/uKAJ6\n8rKYH9gGmX20KwRkdpLMVkobt8kkzcHXfROjIO54iry91VX9VbelHKMB4eFU\nXe8ZRrIemV65sT1mWQusccvx4jwtB7VQ+8xAgKHB0Vz+Vr0Uyv0xEro6Gz0L\n+hVv\r\n=IKcU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHS2CRjoKzKpuAyk+pUVzvXGlRUraU03snrj4UaCU9gRAiBrR9h1SLaDj2S4Qe/Wx8DWgsPrWAfH69P+a8pWzVreOQ=="}]},"maintainers":[{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.3_1600708697409_0.5803307267126225"},"_hasShrinkwrap":false},"0.3.4":{"name":"expo-updates","version":"0.3.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"2ef618b228bc8217c189307fb125ae63d8340f2e","_id":"expo-updates@0.3.4","_nodeVersion":"14.5.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-8/V0v1gp4elQvhBp8N40h+L0k5ldaHxmEKDJinQgn5NBi6YZ53MVNA3QjGhAfhKLUkrlCyaLt4RKUk5o1cvtZw==","shasum":"6892bd244ec3f4fd07041d5a7175ab484c1c4d11","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.4.tgz","fileCount":119,"unpackedSize":370295,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfajsUCRA9TVsSAnZWagAAOgcP/0UWOd/CfFUwkslZqrEO\nLUqN6aGkxbEcIg/FFDP0QDbj3TVbkNAmpEPRjNCFGxYbW+vUvAM9k8RFt40O\noAbKXXiyjWepcG12KSzFiS8eH5QlL27CB7aQPzR+/4lvM8WrTthFGzcKawQQ\noygCvfQVPvlgnL8+8iD01/629b47wekEVMsRp1ilFWxYxEFhDbYhOlX7ehDd\nnNgRneXzY98S58F2e+e3VOxn8WsmYfJ/etZxgk3aU+kdO2VRHjjQLEx6BSoG\n//Y/6KGwgVjo4qvcrazMxG1ZhL9ldtjOgspmRBx61uVE5uHc5k1lH+zxec27\n3ERKMm24SmKPmdJ6pNB4Gvk74MttdIKroCee0zjcgdqaDys0bbMilIv6P76F\nkHfnMUhemt6XG+YJij/ZJeoP8LSwKwFkj1dbMtF4PkjsX6B6y6EPRqSwhiAN\nBseSIcMSVMmJQ3hEckiZykI/b2VNZDzF9nPTtJXMc9BhFn1REDccLUJ9bywf\nbJ3qCOvf54uTbhMQmCP1kt5waFfU3j7NSeqn2PSJTO6+BeGFMSYUgGICqHnW\nFxk5Acrpnc5w/xTLq2NHCgugn7gGehfma7Lyt3fikhD6Jzqa0S9IRvULkGGO\nuQgIK7J5q070bF2sYjwCXa7zJQN1oeCbIRXS3ZrOep3b+jcwh1CDgmUP3PIf\nNTHo\r\n=kveZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC0Y07YBhe7Uc9cwQo0/dVvwyBGiP2OrEI0XlXbMXMRzgIgCnXm5Ne/YXNg9NcS9KcRAcM4md8XhwYApsi6NRNXGrk="}]},"maintainers":[{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.4_1600797459988_0.24196568178882583"},"_hasShrinkwrap":false},"0.3.5":{"name":"expo-updates","version":"0.3.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"af42f9311910245e53a47bdd04123472c01ed689","_id":"expo-updates@0.3.5","_nodeVersion":"14.6.0","_npmVersion":"6.14.6","dist":{"integrity":"sha512-O+W0MfDZPhhCYKFtLL85ifd+YAm3rFKALWzmyKOSGBb/L+8CBPQsbbB3mdvji0V2NCqq0+jrBvSCmNa5LRD41w==","shasum":"cd9aafeb5cbe16399df7d39243d00d330d99e674","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.3.5.tgz","fileCount":120,"unpackedSize":378692,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfd6MgCRA9TVsSAnZWagAAqMkP/isLNTTeu99/i0ArG15H\nVOKnhN7cE6zZ03Ng2j64fEHVii0vPvZEi8bVyLv++U9scXoc2HpnFzo29px1\nn6XfMf+1/cyEmo58qLdhNgaLNgAllFR01yXjPHAC1AdK7FzqJS5TV+2YllP0\nvaJjETElhYkGndjCGl8rQfKHrJdi1tb3VDq0xuIw+NNawBsV/X7KZnxtwJPc\nAQJL6Kujv6Mmw4YtqD724/nGUxgioAFMIHpFFSeg7GknY+U6Ly9JxV93IpxQ\nR7s3Vb5U1s0vhzIrKviKePhTNOf2Rim9NcnAzXxR0BH0GwRXqzIjZHQOvDCI\nkwhwxdyhV0rC4DiNvfLMklIjWtj82OgV+0ouaIZEnXaGSrk9p2k8VTREteEl\nNvlqyeN3NIwfRw7/Qos4a1PB/2W2HK3ZI9EV+NFga1bItA05akBc2Tcskix9\nFkJAAs5WnhkYqPiuJ9V36QmwUCqoIq1fc6a3D9UqsKYZcSO18pw8OTTxfzAJ\nJQ6JRPuVf+LdMKNh/FWgVOVB6D05mE4wKt6t0hYIFpE7TV/6bfNT2RDnRKn/\nM3by4KJZuQbAzX0PZHVwNPyXOgcSmlVB+XAAGaCPz7C3ES0kVzi7rP+NPPyR\nGSug+eKSWERKHbiw/pFndDYg/JzMy7jEH1R5meSkQYQsmtS1D6GkY8zXKr+Q\no90b\r\n=XG4R\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICRrrjMtNgR8tUOD7PDU/ohcURhcdf9NjsMbP0HORM65AiEAlBxl9cYyDJ/TuE9H9fITZMA+gJrdsePe65TW3Knhjx8="}]},"maintainers":[{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.3.5_1601676063426_0.8867186860264666"},"_hasShrinkwrap":false},"0.4.0":{"name":"expo-updates","version":"0.4.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"bc6b4b3bc3cb5e44e477f145c72c07ed09588651","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.4.0","_nodeVersion":"14.15.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-JTMsPdIq0x6v2QDyEWXpecO7ju/AF6WoEAnSRbT7p1pQi2v3KJkMcLR8afvIMswyjtqc7BziCNVsZ/KoWwcRQA==","shasum":"cc129101da1eb714ed2d2e62463bbf3917aadee0","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.4.0.tgz","fileCount":120,"unpackedSize":379236,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfs1kwCRA9TVsSAnZWagAAFwUP/3hvKpM3ipDyzzv2NyRK\nxl3TUf7l9189ed2nXEmSUqwZTgaUG/Bj6cLTQYc9PB04+vwgrv/IxwFJ+3Ef\nmO+Y1dzWNUG7/eecHx1Zb2Nusna68PanxdMdYgMXUekc8oz91WSL/65woFiw\nTisJMrkWTApklVJ3wZfixNcZC+13KB7xVsXf+2+IFiCSr1jAmugdhnhdVUrV\nbVcUCQV9nPr+leiGhsADwLsYONRcUxEnSYja1Rp3dc1vOW+ttbLl7h2GAdEM\n+xuCCf3hSjcTd/Rnoc6M15SZIcUp/kdbewNxXJ1Giw8C7AItFJOrFdT14La+\nNWJASnax7lodhzg5JjdiLG4orcy7S4s2bpk4PF++hychLvvdf1iUYgkwJBQU\nHjbvOFpy6YJpatB7YEHQMCHmXW60muFgBFHgZmmHu17+Wmuy9q3p4ZdvRITq\nYXmxS27F/PHyUCSfWlJAOzT3Fhs/1/DwRX/cjvH2efNfGPnEzNHvYbTXULq4\ni000wMXXKK5O3WWiJuz2zH3E39prp8WDEvfJADK2EpuGPnTAG04GqheEfd23\nypCv1/kqu01QC9vGc9QHx/IpfYd1TnAd/r3WFCpAFakvVcurOnOaZtv2oNIZ\nbFnKBCBl+/i/1dlOZgV21VvmPwUMDBriLXALPiREPQosYyPSah00mDiqLimn\nrVJs\r\n=bv8u\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDhrwpqg9CXRMLR877QS1vWUWxkjiYC0YXRxb1pfvbihAIgQcZdkv44Fz8yzN1JiRK9WsnAbhtT9kAQG0pLI4ajhs4="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.4.0_1605589296023_0.5911144810956637"},"_hasShrinkwrap":false},"0.4.1":{"name":"expo-updates","version":"0.4.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"_id":"expo-updates@0.4.1","_nodeVersion":"14.15.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-nRUJlGWaZ2o2shKpfYs9ZOMQjyozQYc+6i3baOpptTJCBDHL5cq7IzjEwfyI1Eii6MqP2pMmvT+kLJiux25tMw==","shasum":"74288a9950d137df62577278879c2ce61f9d6be1","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.4.1.tgz","fileCount":122,"unpackedSize":382837,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfwYPJCRA9TVsSAnZWagAA5mQP/0Sa+C4MYblspLhz/LZ0\njsi/1bI/pn6529IN6on2ym2rDbGLdsjQGA/7A9BQzgzmi2/6N5eAiJcPTGEz\nXThjptQoqWx7gq9h8TusxIXHFCFHbKGG/eGZlVjlsci+8nHxaRc9qwzXetJM\nUjrs6qHM5E3u1RzL8JQkBFWRsqjS/xdxYPRYvbTVpP3y3GcgpT/cKQjvaSnK\noR+2r4/E7rioiWjPMZVhFkuAqLzkHXDP+rPnPLbM2OnufRqukwugM99+9toI\nKLLTc21Vb0QtfwVrq2FA1ayn62ygC4k0Mx0SYWt5P0dtbHj7z6Lyf0P76c3d\nO60PeeFW8cNZgE3wwaWSVYGXiwmbxlcgudDBnK7OT5V8OLRBQoOj2IbrEZdW\n3i4rfG358CFGakHru0fKfWze1Ac/AMeTGtyCxW6E72d/Mmy5+InlhXwgIYm7\nycQ+HqptjffGi5lU38SXSEMSRDRIvWf8Y4jVk4boNDRwGecuHaORJDmPjxtd\nMPPHCI/YW3eE/g/IFNOzNH90vaOnmimKBgn9N3u0l6O2u0mDYPAkN31SyUlM\nOtaIdHjJFGULK8r0QaLSOVAc/cDlpAQqUxAsiq4dqfSeVLopvR3QHDAwSI5y\npljgN0HV7PdMMxiTY79VD1SGnkBIp0ClpNOUzFBPueMGeDEPY6amH/6C80tQ\npXFH\r\n=MP0a\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDS+xGkKTeXozwBrlA4BF3uL+6dsuYkAdQ+mQq/JRM6FwIgV1sStSLNeXrbS1YjfkAedePO/0GMs8KqTDeeCDQAn68="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"esamelson","email":"eric@expo.io"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.4.1_1606517705014_0.38915618092264026"},"_hasShrinkwrap":false},"0.5.0-rc.0":{"name":"expo-updates","version":"0.5.0-rc.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"b7741926b3ae049d6a67ed7f3501de262147ae7c","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.0-rc.0","_nodeVersion":"14.13.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-PKc3l3wwZ3mhBABd2eCr7L4sq2SAw43AfiJgPHGS6MWZnMnXkzfIgPjSqiAD8plyY+eNN22pswFf5zjGMmZLCw==","shasum":"4b9227b3bf7827bd52f41652558857d941058ff8","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.0-rc.0.tgz","fileCount":124,"unpackedSize":391357,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf1/fCCRA9TVsSAnZWagAAtxcP/00ojgjNtyWiUD4dR44d\nntUg7Cq8izvc2tInBQiJYdOMZeNoZshiwtePJr5EMGO0sQ/zqsxXWyh5zqJP\nZqu5Vke9XPTopmMAFvXCiF0od+sDTrRkdmlECPZ8rfCtEo0o1C5AklXfxmoY\npZC76BZI+7Cm/oeY7JGILx6Ot44O5d7ACSALJBA+J+i/8bcjyuh5Ay5BIMzO\nWsAz/DOBJMRkRsXntBuFVoojSHF9Qvu67w4C6W1jLPuso5DNys5x/LvRiBS0\n60YvsphGvOsLhwaBKPxNOr1X3t4CblpTD10K01+z1uyuWYSN9MffJGITc7+V\nn4aXdeFCM5HMQkyFHiISqvorVlUi07okmTvIauWN4GtpE5jI2wsOkDlYWLmh\ng1Sc5ZON5YU01pk8GOPpz/jwoZDlpBpNqNknU4YkOJetWmoYYLebcVGn82XL\nC8TH6o/6vBnb/30wdbFz5COUWP921lwrLyh0or4aHW4sX6LfbQogeFUUAWj5\na6ESW6CbLJewApBuSQ7R5eohSIkHObifcO/GJqOiEiX4RbePdXzhcCco+2f+\nEkgxAOJAR5FwkFiNB7LMRSperDiOZDOS3/UhRdZMtb6y9kW+XNMToWJRmziO\naAxbjs6GVbf3vvnX5cTZSMucrA8llRI+R5kruk5JhI2Fl0z6PRflYxEskM1R\n5T/y\r\n=jBtx\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGtadNECla73ZIjKqKlZfxKkJJyZy/zyPwsL8oQKFLEHAiB4qo3bn5b8aZhLqiYcMwaN921JDLThcCZhYqNJgBrQbQ=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.0-rc.0_1607989186335_0.9801145419227304"},"_hasShrinkwrap":false},"0.5.0-rc.1":{"name":"expo-updates","version":"0.5.0-rc.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"e362887ddc6ba4e3518efd623d64b3cbd301a6a9","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.0-rc.1","_nodeVersion":"14.15.0","_npmVersion":"6.14.9","dist":{"integrity":"sha512-6qcia2uFujZdbzaZHb06quK2Vfsbmv+u5vB/JieCRbQV3Oepu5e3x+Z9vO/XAwDjrFBTz3ZLDXwLzgQxZa1bMA==","shasum":"c36add04062ecf999bd7caab6dc573379f71a111","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.0-rc.1.tgz","fileCount":136,"unpackedSize":2891250,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgAg7PCRA9TVsSAnZWagAAUu0P/3Ha1joVq3TK0mCiF0om\nKyRk9NGanY5kjcRu98CZCypbJT7RvPswsWdIWx3kgMCF8lBPH3L7xrW8mKX+\nCTE1x5+A/ePqsXhY/E8P/lDVPimR8iZbCAn7D5oGW3IzYAdV23BIWB0JoVrn\nK0pgjTapl8JK+ro7uP6yZY935H6MZfGG3sdiCoDePB8ybVTT+USNSjF/Pjhm\nx7HQcdXdA22X25BFMVZBztHv+wmtNMJzC37dayyGz3TEGunQl5s/0YvBO+uT\njOomwu0ZHdpqJGtHc9lg4w7EOHpRHBk/ajyOyo0SiHeImti+gIPR7t+0Zqdm\n+oxrVJF5XjRvHc3p613+J7zx9juEV6IxspvXJnGfSls/iwwGnFzSXNc4/fNj\nuIIhwjH29SOlcgj3ei/TAo/PChigWNYeJHmz4X+SmXA8ZGawxQUtAS1kYuEV\nwQxdMRf7cJTsMiSJ+V31n9KGarwRl5GtNSSmUIAO7XTaUc9z77dVc3B3oE9i\nr/3OIPYa3c0onSzyc7txsAOeshPaX9ISxCOqKP3z9iKl8GdkGMQrVY8tg57j\nkF6/ukIyCB+aH8V9ZHYyHCA6wzXRc6OLqcjrYSkuuExIrl3DX1YhKrtee7PV\ndgRue4LyjZkkJP9cfOr1hcD5NRNmv15JcDvr9vIa29w/cmUeOg8rfVmc85d7\nz3H7\r\n=+Leu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD4cAFRRlz1EdttD2CkwLHryL1OplmXWNuP6H3pzQ+MiwIhALTfD2wqb53j1RIkgz3uCyqAhC/UgOhMcyq3rjlqptk/"}]},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.0-rc.1_1610747599205_0.492739401295202"},"_hasShrinkwrap":false},"0.4.2":{"name":"expo-updates","version":"0.4.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"unimodulePeerDependencies":{"@unimodules/core":"*","expo-constants":"*","expo-file-system":"*"},"dependencies":{"@expo/metro-config":"^0.1.16","fbemitter":"^2.1.1","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"~1.2.0"},"gitHead":"45dd06df4c3d844e8adf774207d64015e76ec902","_id":"expo-updates@0.4.2","_nodeVersion":"14.13.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-89bvwemgmWWPGAHHnzSFCryWW3TmPNozcShwi7976KAlNcXM7Aitv7uifxtkdBt85TECFm5N6LY278psjyt8Dg==","shasum":"15862bc209fa3fb98d3fa16b7aac4edfcc33f182","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.4.2.tgz","fileCount":124,"unpackedSize":391517,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgLCLvCRA9TVsSAnZWagAA4/AQAJNUnxBr0o/+uxUXkvYP\nYHLIeyTUmGr7bF5o18dMK0Nu0cRMhp05a1ETYexLfTMx1J9w7uGBRKhhULt3\nlDCfQ/IhGa9BdO/XHnABgf0HCHVLX9uvt4reWtABeNpQ1lmnp17kIytdKQAA\nZokB1UxqTaY5Bj6LnQYjGkEVMLhzoJFI/udJI+RLc8nIfvsLzBHRvKWoX3/7\n8U+4eTm/w4RtmKEjd33wuA+hGLR8h5aLJFJCK3TXbRLLIzXGhdSUOHH2yIbq\n9VM+5m2wSTLhspxP+JWQyrmy61UlWp7brM3hVp1yuNkx1jVr+ShRO7udx4Dg\n2pfd/XbvvVsvCvA7C/Tdbt9nunYm3zPrR1GN669oFlIWez3GlbbGWoI8OcuY\nhXF/HGs9p0dmoXuTyLROnPFDdYD3sznCSJwjx9HIcx2tOW6mm36wLevo8zo6\nnApQnM0JueCAQQTHHdtqNOQPUc7fFXk97Xnp1GmvQYVR1MVvT9d7OXbo/Ki1\nu9psd4+4xqHeKs//VHC3b1fssRK/2qTVgVufaEdlwZ+ETXoZ7hyYA/y4JzSs\ni8AzPbYSgiG6NtGfPsgWcQH7P7rRcvGoRVQ45iypjesDxkO39+CF3hGUsCWC\ngtzdGX5iTnxqCE/woYjxs4egGLqomM4BYV+LH8qpxa8a4S4AIiq9VpUbDW9i\nWeUK\r\n=VVLk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBBfidKPRrnlZH0AjtDZ+QR6FXUZCUMnoz3lvO6Ikah1AiA7DYNDrBgnPfdJYnHc1AEzaXkxK6TbdfSE1FWoMK5jrQ=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.4.2_1613505263237_0.6092218521174835"},"_hasShrinkwrap":false},"0.5.0":{"name":"expo-updates","version":"0.5.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.16","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"5b57d1fd0a20294c1dec7c43b5df34dd6425d1a5","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.0","_nodeVersion":"14.15.2","_npmVersion":"6.14.9","dist":{"integrity":"sha512-VgSvQN/Cx5XR/X14nzF17KHTpOOlPFz7x7t4ai63r1GE0VQLVfcUKJDyVzP2fev5EpmWZ0pdEW/OKvajrSukSA==","shasum":"d2a8aaabfe6e565b5c40ef2da7e34aee27fe9989","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.0.tgz","fileCount":158,"unpackedSize":530577,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSCRjCRA9TVsSAnZWagAAS2EP/iGp9NZOKfRLHvaASuVG\nhfD62iNPG1ra5Xa/0LbDxmnc1ea1g6sWgZNfTTnzoiyNgc43sJhOktZQgwxV\n7PQvsDXamRZU78wukNsvy4j+P93uKxMyP4Ox/obft87O3qmBCHf5psfpZE+h\nUYmxTxu5fDsscmunq7DSXM4HSkHV0hLxYTaDhANRHfr+YbiUdNrI/u6dBYvH\n0i/czbvri7H6TEe6o5FpMnZMf3aPxVHFvUdruHUUxwCStmQpDWV7eV2kNR3S\nr/OEexrhkts2vrDna7So1OY3SywkDcJh21tITgwLrX/R/PJ6T8WwmFBWyIt4\ntmb+5eZA5DZv2KX66ACB7dKniDJnhecn7B6U0+K0YTtLNDZabnjoImtzFZ8D\nBASCYXrjL/YMuoh6u7m4GD2QumlxJm7uFbMIkbbRPEJEsKNIV9ZJ4QHArwxt\n2X6MV82w9InmuOkKE+MKt+lEDHf5hIH2cj+y+uLCH4/91pPIDz5uBP4OkeT/\nMSQutlb0aeHfrnV1ytPIpoUnZe/y/lOwYEIo6QeYagAY2AW37QwrdRnl+48u\n+yqO7lDVZUvNYIhnzJ+CTSoF6YWNL0v/gLjlWAJxlKaJPy+ARShHJT1vqNt0\noqx2fq09DS4o+GEeYocrUXSiVfET5TVxqI/Ia50ayXnK8o9pF76YjQlW27PM\nLnxO\r\n=6tYC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC10VbuL0/PPfrUHPRPQdWWyAuuLiP6ZiQbajQrJNWOrAIhANmkPtdA6MHaNZd6R2TOcRcC9ea4KgOJHu43tYvCA2jp"}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.0_1615340643442_0.9490804805706832"},"_hasShrinkwrap":false},"0.5.1":{"name":"expo-updates","version":"0.5.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.16","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"c45a6dac2c555a5ea6c1a75e7d421cd401c11009","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.1","_nodeVersion":"14.13.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-9nZWEcWIdTSnOWo/FFyeTj9+/s6nt1JWRjPCP1UTbKj4GKf0x83+D8fSA/pWaG0cMw4Jog3aKN8mrwVRyJUUoA==","shasum":"f4179b9db44247fb88ee17688e4947212e0b6705","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.1.tgz","fileCount":162,"unpackedSize":3374099,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgSpflCRA9TVsSAnZWagAAQtgP+QFKCgKLa0TJriU31l/O\nsFSgssYZlgBUL7sCuLpcx+k1jwxH3gWgJ9kffbjB2m0qbey0mFXbr95gFNm+\nWjlbJ7lUYib7FSr9HJrxz+/975TcZez9FHo/f+LOxiSDwyC6dBMu8umkANGu\nwPz7sh6PkxfCXVYmHF+ORbydFQnlydG2jS2PwZKbSJc5cv4hJ/GJ4dPN//YB\nJtaGP6Ei8GXrZLTMyN35UW2uCiUuAPF87uNeYcDdztegWiarwziTwKJQvoM0\nCG/7f0kCMYIekbnttOBwIp2HEN/P6wDW7MfmVQoPbXlMDTiWm5oaM3Xik1Mr\n0RLEIYYjcGK7yKzHHi1uXNZceHkueMcbahzLQjYrlzFVO92kQZN+6IcwCXhO\n5XpJw/7Qw6QxW8Zrl6lOsyieGiiHp3A0zklbAwk6oouVUN6EkIHM//urK6TE\nbwYzdp6BtNPw08y+YUEnZq8oFDmHgSrhyNaSYobd2/bYKvaCl3lC6P3TKJ9P\nuloPZIqiAB5QcDbkUia8YPUfCUnStr3IgsOx/N4QM4fIyuk0QapQ7Cnm6CXz\nd9iFXj80aTAVGm3Q4Tf8LnRJ6druz1ywhDddgHlgtXSruN0gnyEbridNq2gG\nijmGGERuXKFT1mqAfUzDHMrGbBWmFHHusVC6Rewzs4QcHgFixIMXTIDdEFCk\nxB9I\r\n=AvRj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFvDn6GTdB4llUJuLDWDkxT3+cYpQfyNYU+lxZ1PGtWMAiEAtImWZfEOJ5idXVYnE3bIOJgYy5wxnC84zOFB+49BAEQ="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.1_1615501285353_0.6302901669287793"},"_hasShrinkwrap":false},"0.5.2":{"name":"expo-updates","version":"0.5.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.59","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"c2520eef58fddcc435c41d95829084f5f89b3e8e","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.2","_nodeVersion":"14.15.2","_npmVersion":"6.14.9","dist":{"integrity":"sha512-K/VQOxO10WfRI1iQGcTXiJAoqsYhxF1v6hSbZ2RA2+ZZVz9cCi4xvgzQT5UgA2HVx0ZfrMx2k32Cec9ulf1nvg==","shasum":"632cea81f573861ac7c5b8f4c9fc8eb830511117","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.2.tgz","fileCount":162,"unpackedSize":3374970,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgWW/UCRA9TVsSAnZWagAArDkP/1mOPFcAhaYYl0Z4LmnM\nnq1jpFbEOVG4j6KG7G1W8F1ADH4DiZh11My6jBMFx4x3h14PHwRU9qJMAyLz\nJxAcj6Ip3LAM/xG9UU6bmELX1OuWN0/lofKC2W5Sa8G3InVrXrryxSZ/AHMC\nVth5aofQqNrsO3Clky3xoBmWEC9IJ2m4GvWtQ8dYM0OARovxN2tFlJr5Ac3H\nacHbYfZDGDX4Vp+o3JvG6svCwpOLfGdfY+CZYrNTAWZKZQScTVm0p1fVYZ07\njKpUCB+YexZpJ3bbB47oL1zqWQ5jrz9BPwPQiTimhcjkORFilNXHQrRweWT9\ntOB1NIQ3M1UuDg3GxzIoyLCGIUK6HnAzkahEp+fxSPX9zlntQlSVAY+ypiM2\nvMTwgs5VUcRjso+bnlEQR+BxP7toV8vPSOC6qUIo3rjODevjxAbvD2jTtnmk\nNE74ileJz6f+Ca4M63FNs72TF9ok/NtU7DQP7T9ZjMUDKr5Tse79tf+oglUl\n0bwkV4FnlG6tqOvziQkAkKEsxLrLqnO0Zws6+Yv1fTtHWntVhVe/azYVtYh1\nB5ay9bpidgPW8F/eQ2x3z8DKap2sgpUEvaIc72B6coLt78g8hARWgE+zxts/\nNKdZNTdzPFs2ST41IzeJt6/Qvo+BZHFh2N019FECsmbX8VcUwFrVkILSinfH\nTJ88\r\n=YMgo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAuZ9n+UdRS2FwkySxFa6nAnm1DTpU45jdF4WZdqRz1VAiBRAoUbYw/KINSUjLkw7ZUi4iC6RgLNWUOYh3/DmERR7A=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.2_1616474068020_0.9351874486680063"},"_hasShrinkwrap":false},"0.5.3":{"name":"expo-updates","version":"0.5.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.59","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"425be641cd8dd9eb89cba3f2649ce292856fab39","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.5.3","_nodeVersion":"14.15.2","_npmVersion":"6.14.12","dist":{"integrity":"sha512-BmTvD6qtSEArg4GUpFbGOfRddn2pL4waR1JhDkBl6Af0RdzkzzLDpxdPyr9cuRMg2iWhxpbHag0TaRNlBeuhiA==","shasum":"b8806260f84fb0bd4e2b276f797dc5fab536824d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.3.tgz","fileCount":162,"unpackedSize":3375160,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgY1wLCRA9TVsSAnZWagAAxnQP/ibpaCRUFF+6bi0Tt6RT\nkkPZ6k0tus6wgAtfc9xKwYZmP/hR8IaG07Q+NZ44DTlVRGjyeMbgh7iiWqaW\ni0hcwoy+WundANINm5bkqi6v1tB5TdvnVYU1etbeojDyLb4gAU03v1js+W9h\nVE8ur4eZCF5KSd/TV2OQ4lzm+Bor8F3WfmovBEehGxRjQlaoPSfGLxSzJ4rf\ng4Yw162rSQcFhHx/zdz0Sii2LEJipOIlPyLjQSRNgh8Vc2eM0k4290EZBQGY\njy5YWTff7hpQLX/SAAHKouuoH2MaLd5Alys2pp0Omo2/rR5V/V15gLs+SrES\ny2nvjI7qMPBBkdhUqTMquIjmNMFwCN5E2AWsonwF+CH2ogpzK2eISJ9NebLJ\nwpuHiNKjb99o5C2axq38316bj7jP7kbk4+Ik1qK6sZ+CcxJql6zUT+oIiAFL\n/qNZQHJ65UJv8Ba6NsfDJs+6/ekdW6ANlIys5wsHTOwJnZe125Pj3ZIqv9IF\nxwlxRwhF6c7ftMI189aa36VhZsUBYhxdemTVJxwOnwd8hdO3jY3etWIRDzW5\n0nfHstCfwSAyINpvND/jyrGTrMlG9lOg2aNxMA4ajj2lp5QQ9dD3NXufgXm/\nnMeAWqAy3rc3rHmo+AHbV6bc//zs0LLs5eUujuazbLQ/4w5wydqQUJUUH613\nVQm5\r\n=xOyb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGElsPUTqH1+5wcz/8PkrGm7vLboIqpP8ZN6KrFhhYguAiAbSiigJPBGiVsQF6grbXQ3qsSk7wNnjrkg5stku6EqYA=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.3_1617124362526_0.817763478347719"},"_hasShrinkwrap":false},"0.6.0":{"name":"expo-updates","version":"0.6.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.59","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"77dfe0b7d437688ff6e6be035a84da36e563b04a","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.6.0","_nodeVersion":"14.13.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-q6jqwvxFx0SpRJh3zb4evykHe6YqiGfHqqM3fbKo6ZgwbmXb/yoecE7JFJ5DuWALCCo01oJGHaEGCzelPSRKMg==","shasum":"34b8f9986b203b93f1b124d0918634e577c95f2c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.6.0.tgz","fileCount":162,"unpackedSize":3395492,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgdQ47CRA9TVsSAnZWagAA0MQP/i1YD6Pqug+ftS/wBIk8\nvuuRRAR6tNYHNMlFx+ygcfQI4bQGlJ8iE1wV+zpJDis9C96YuYAkQ5Wno5sR\n5wYaf3ga9GV8RKL7nTYxQgV9fyKfURuCGIcXEnrCn+ZbbL9P6X7Oy1fNHm8r\nKg9FwtANpF4neHrxuNDq6eF8JmdizaXOch6Qmg6US1WubFv/GaHCUQ4+ec3u\nl4RFPvFV0NulPuPUSRh9btkoRDkSWtGZVg0OMRs3nWnvhcPBvrvGPFkOf2Hy\nRHt8ytrPJj44HkjrNF6n1srwDuUqglDzM9pobQa+n9njShk6VQmon14Qr7yp\nh3hTsGz/99g3EmD0Y9608bKKCvrbXmNSxh1xXfyP/J9IWFDu9L5RADLZUAQf\ndH1GlDcXHDdxr91W7BBAc0+cLzF7iYn7sM3FCJs66ppxLhBLosys2ZZjuZuZ\nBCQkyDTlYSyVCKM5Zpj0IlYnPy1M5YtAwclyxP3/gEmkTOsad+MrAonTAv+x\nIQ8bnEN45i/ZxKOYhTMTfqAWhz2Oa/eGfMdf1S8isO+QpK/fjKrdySvU38QC\n/NuDCIK4vhi/F4BeFJIBf4eg577g6dQKAY2U7b62tR+Ys5//jsxkrQFyP46y\nWmniVzGWeMXEZVO/OYKfkI/8lkSpPn+GEzc/tNclkaFFYTN6VP1CN82tq5W6\nFobw\r\n=hJ/x\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBL/Q1bFLBkA0SXJEHynXoL1nOZxTIUzPOawg+xoadkaAiEA8Gn9d7tMgNNmx6Go5lapprO6YXp5qMtBBCyT2MzN/XY="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.6.0_1618284090878_0.6641564331741967"},"_hasShrinkwrap":false},"0.5.4":{"name":"expo-updates","version":"0.5.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.59","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"9c6693e1e8997dd279d408b0f6e6490897713085","_id":"expo-updates@0.5.4","_nodeVersion":"14.15.2","_npmVersion":"6.14.12","dist":{"integrity":"sha512-2lwvcBqZutUT4TwqPgTpcBuomjTHt781k1DjGKpf1lS9X/E4w1dgklESXfSASaTS84YuXfK/i6/7LjTWucCv/A==","shasum":"ee1b395fee701fb230e7ae28729f4d7055dd3514","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.4.tgz","fileCount":162,"unpackedSize":3382151,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgdfgMCRA9TVsSAnZWagAASeEP/1JyzI33wD/78NnRcWnH\nke7fFpV0+tRkYuJgmmsmRn0Bvogg7vk+ab9Ebmpg1dmyYN9x4zP2jK+xqni2\nQLN9KjX0ufd7Altsg/dNO0SlnjJW9uNgj1wNskdbd1Z3cuHU5n1baFfZ/aqg\nVNOhF0pAoA9TISnN7qM4ji4Z4rbq3pa1pLHFVWTH8iRYPLZ9u6wcw3bXmx80\nyaxhfCgySebsFOp90zIO+st8O1A3fiGcgTmcrKePS+nRLHgujWUgmnp8uUfM\njd9tsvavIZUKTyIQVzzTsdLi1e+HWAHs7avHWRpglraG3i4qnDGt8xp8xNj9\n1v50TofJA5NTGwMPy6O5wI9/c0y3z5t8g6DOiX1iX/5L2F+1i58I53OwPIF1\nvUHmfgysHyG03wl2ZvRkym9P1b4PHWaVlBbqdkf5yL5g84zTJD3kNv/SSR0X\njoDfbcDjmqDAfEYxEfVYmwGUxV5jDaTG02+l8ksVuo4xqi1yc+dn02Na4zsG\njjOxXc0c2/cQj9Kz0UpNfLE3yxE82KRRyO+9ymxn0gyq2e7KQ7M+naz4yT1h\nRaSpFGeqsrTjzJJfaT8zxDQUFgsN+A8I57CIwjOaE4ACip0lTEbYidyAkX3H\nc80TSsI2rqTTJy1oIgNSEOnUD3sKsEf3+8K+w7Nw8ZMXRGcjhtF3PuZYCwCJ\nHAfN\r\n=h3SM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC8f/JyPvtLbrXF5y/tYiXuSBFe7kE6T4Ms6Lu/0KvXPAiEA/KY3U2G6ZF9WRS9MowG/Wik7RhnJx2xuOqUrX3FBR6U="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"mczernek","email":"czernekmichal@gmail.com"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"sjchmiela","email":"sjchmiela@gmail.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"ijzerenhein","email":"hrutjes@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"nikki93","email":"s.nikhilesh@gmail.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.4_1618343948558_0.6849815051279884"},"_hasShrinkwrap":false},"0.5.5":{"name":"expo-updates","version":"0.5.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.59","@expo/config-plugins":"^1.0.18","expo-structured-headers":"~1.0.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"c088fb804487019285b223f8762e0f207dd53338","_id":"expo-updates@0.5.5","_nodeVersion":"14.13.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-1R8EKkT3GoDjMRQnDaTYv31gIYIaYQGHOrjHJfwq8ai9f1W1AHux6KAH2/H6sc2o9a7roWVwjDn2kKwCm9AeHg==","shasum":"97118ce3fcc8cc77ce74ec8b7c91ac4c29dc770c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.5.5.tgz","fileCount":162,"unpackedSize":3383382,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmwfjCRA9TVsSAnZWagAA4+EP/3Cav0btDQLIKXLJb7DC\nq/WFPEq4rTFZ63alJDQVE9IKog32xYewzEhzzq1zDPsOyeNqcINmV7VuE89o\nkb5AwWKHZLfNvR7vmarBP0QvNw4naNZG2iYjkd5HK6v3mSAjYvj4C/kqCWsI\nDK4ryMrdNLc0B/kGRQ91jRh27Q5nNLitFdT+KGnGPoZlslzq+mtB4yTgFsMy\ncuzsSkCpGGhwdhQqkh+n5VgCuuxNFTDZ9n/Bb00Puumxkg3yseN4J8spbcuA\nnMXy2PicyG7WHMpdsOGD84xL7GhavuURpSR3u6vhwB5B4eix+0Si3F5vqXlM\n2TeqmVKK8h/+Ne++jQPDQ538YKxt7ug+gOtPstNJkj8Gi+4J2lG3QXxbnVWs\nKvJu5rdhoF5JyyT9YsLKmvt7xvzTerLh5krA2JUT82QU3xbW7YQJ1J70H1lH\nLa+LZVsIt42pyRGOl3Qq+Yc9ebFS12fMmjSWuyFFiMRKXUM3hGETyBlYpOQ6\nxkh9ri8Re94w6vmhNdottyQY5fl4kkN94LJfYyspBYfaWfRfgekv+avmsKoh\nxUlY7zevXqCHft2pOftTuTeilpm+xxa/9o7UBRqyBsPE5nKX6W4JYQUg7LFz\ncaYOybPzrgg4ywoNRsXG9omQUIvJWh+8V0ot8arfRpihQIojIBJoSWNKnnaQ\nBt4D\r\n=dVAY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCTcVEdTRUGiDG3S/VoeboohfirixTdlQQGaAZP3OPqJQIgNp858dME+MfzRDoKgA2K9Tn9zNY8zffI0z/NHk7GpiQ="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.5.5_1620772835336_0.7835634545482142"},"_hasShrinkwrap":false},"0.7.0-rc.1":{"name":"expo-updates","version":"0.7.0-rc.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^2.0.0","expo-structured-headers":"~1.1.0","expo-updates-interface":"^0.0.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"bbddf1d343c4379702ec7b5a7f1dba4c62c21180","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.0-rc.1","_nodeVersion":"14.16.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-qzQM78Fb8TzX8pcbNE8a68D1QGC35/rna34lJiYbzIE82p8UXRNTlC76sYcMQmsl2kpfNJSQt8VWG8dFtjaVyg==","shasum":"dfd62f4075adbeb54cec08814e32494c233a7088","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.0-rc.1.tgz","fileCount":217,"unpackedSize":4223395,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgv8llCRA9TVsSAnZWagAA5JIQAIAFU/pzZsCozo7f0vmT\necoiHZdFoLWC2fXdXEOjhZC3yDlZuuOuhBixUZf6vTrbrJK3xuYzY1b6VRya\n7dU2wKqLBgPdC176j/iXwWWZIEc0qcVEj/Pn6swT9PbvNaIsN+jJximvYKA0\nNS3SCd1flboFsF0BD5kwcCGurDAWjZiQykP4Vz4rxp6yuaiyKtfW2oWe61LA\nC3gSVYruZEukFKyLmz9GAL8tjrhqBKCKx3Hg9JWN4cQODGwkAUSxFTg8rZ6m\nKk924eo5qsolPA5sSi+5udAjp6IqbJG5X3dUDvkikW+r6CY1GDGdtMSE8P0Z\noue179LvCLDC5J/ofNkSxjWg9ki2gzpN/mUECJPgRNBwuFwZPd85FIGeY3pE\npdYB6yltH4l5GLBHhCrcwYNi7mlum/1oDeU/6B0/ByqIIMrYc5k9MNienSn6\nXakK8A0iZna/Jh3yuIW0JBESfwU8rRVeNFYx//fc3EO+iBskfGzU9y3iz9Fi\nE/3BJ6iKaN5CQDx3pv9Ju5wOLg8uRiYPTipaiO4ySQF8994u1/VWt133S6u9\nQrWIxCqBCvUxr09r0HyU+e2rucjBe10fKSyBVKM1PGIXy+dh6l/6+TsMc2CY\nn73MH1bHQ+aZNP6rV1dvQw1Ne9xKpEcujPUCeFKDs6kK8kz1w/+QTIPDF1MB\nyX9J\r\n=iacj\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC4Sfy31hMDPZxDCBal5CFvSxibmIV5FHoK2vEJh4lPRwIgdHBoWsPGAau9Vzoh9HlVuVoLkBImIJjuAU+M46DgA+Q="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.0-rc.1_1623181669744_0.5407838477670577"},"_hasShrinkwrap":false},"0.7.0-rc.2":{"name":"expo-updates","version":"0.7.0-rc.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^2.0.0","expo-structured-headers":"~1.1.0","expo-updates-interface":"^0.1.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"77159576bce2adddd45ca2d00c088cf8e3cebc2f","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.0-rc.2","_nodeVersion":"14.16.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-OB3j3jNGKjSqjhixT/lQj0usRhR+6uC4ZF4hog+eQ5MxnWnvKnqXnlgE8hBLGhBhcrtTZZAn2YOqQlbuTsvGqQ==","shasum":"d67770238f9d5937baa72536c46f5254d6c8a139","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.0-rc.2.tgz","fileCount":217,"unpackedSize":4223859,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgwjE2CRA9TVsSAnZWagAAsIwP/A9Mc5B3msvwJ3jlwXN3\nce9Sr9wYMaGIg/fn2Pm+N6zwwd16PsxEuyfgd6hhbemi3erdTcsfg2MtZBNh\n59QA2TKxxqMVEZ4GX1bLicPabzijnQYuUImPazRWVLg9ujcH/T/2+jSZy+hi\n5QaQndInsq4eawMLPxENKG4dfh944Wzr05HncF/PR4fiZYjhROR7rd4kkKY4\nsRlVk7+qawvAiRXQTgIARw8Vmu7fkd1opUFlr5DFLO/haTfsaTIgXg7GFaj7\nfJc9fXNJEN9f6hc1xB0WUe8hnZsNilI0W9jKTD7j19OAQO5BEYBzrbEEZmaR\nEr0hiKgCfP+avuUtiFgZgOe8eSYfqy5q1Lrl1SBouSOIzMqSuQeMbAs9kZh7\nzLQCPvzbLBaDHrxRpHqtLICfhU4eWF+D9nBaLy4BW6cpr9pQcyvcrfYF/KLq\n2papnvYQMshfKdelsa8MhPGCoZSKnu6FBJpfu4dlMS9OUWuhj9cFcfIgQyy/\n/yjvhxL+R/WeXk9oohGYdJyprGSvuFoRatyakxPMWkAt/v0g13v+Lu7QT/YS\nw/RUi4pob6kGey4M8hBfJI/tuz73l+rO+PW63fwuCo+XqcnGeOjc9nxte6+c\nA+gOj1JAFvCQ42riMpnPMcCmBOu3kp1vOCxFyfQ/OFM250lafhdFY/+9bxZS\nFQma\r\n=SyHs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8GBA908DpgefTf1JD2Q/6leg42/zlrWKN/lU7yNOEUAIhANNsQSZApOhpuEd8ffDZ6SztDc+gDqe9eTDvTP6gapzW"}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.0-rc.2_1623339318153_0.1378297999785978"},"_hasShrinkwrap":false},"0.7.0":{"name":"expo-updates","version":"0.7.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^2.0.0","expo-structured-headers":"~1.1.0","expo-updates-interface":"^0.1.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"b33f5e224578564c3e4b1b467f258cc119b3b786","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.0","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-CP+07bqC23CQsTbsG7eAc6mYHfjOxmEgc2nvL6BJgy90tV4CThBF2Rms3lwu/7qhQxcR1Lbsn1+9jjlWHuXCBw==","shasum":"da8b9d5252edc1839a8986402dd9079746872334","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.0.tgz","fileCount":218,"unpackedSize":4203755,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgylGICRA9TVsSAnZWagAAtGsP/2thlovLbX+arKA+wmJ7\nfM/92lb4W9nQwvFEVePuJNQ2Nn1/JmKLcW9ij7xNkREO8iZPK1jltkwpzmhA\nw30K58Y1qUzuXQL+aIiVXIZxZdoCN92wFNwrAl/4yG3Yjqao0wREsoNl73MW\nHb95E3oUdQZma/110UlUnr0BQ+YBUI5YVIdpP6OQeq59kQX0DIE+yf/12rdk\nanPgCgIfVWpP6xEGYr1ZhvifCaIFQXdA/QIi0hdVduUg0fPMscn32lW3XvI6\nNxdhQFGyivS2d3wQhotBW+Qt/SAxrntInwpxbYSlVsJjDaFihcmCQlOB5jth\ni6mWpQ1GFiJSAfGvYdf70KwJvTjmQwmVp1zDVDHwngyL0vSmU2nLpkmdi12T\ny5s3BMfgXKl+3hc/7ROvb4D83BVSUOrI5bmCnmkWJECYrBUcxkStffu9493u\naXIeB4gwImEOoi1MKqQMU73zS3N07pkyFfOx82OPPXEHM7AEtKOCBT2T0bWI\nwHuKMsPfM2JvoitNqUEHD0HIX+2V6sNkXA2toFSX6gNck/2VgQSVQ6weUU9/\nLCbGEi2K8+amCp187ZFXsysL5ue5pFKNLukWZNHOltM+T7tkA16o/G6G1Wfv\nD4mB+fYWC65uASg+uiCSDM/mD+mUmzTraJjgsoYC5Sj2TmRYjE4zOoTynDjw\nanNJ\r\n=LCqI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB+i3qac5JVMAQLi6H6i0k0lqd8IQTom0CJUy9QqRmzcAiAn+bmjaPEUdDoIzlwHFoF2rJCGTluSxbYr5ZI5icCfRw=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.0_1623871880313_0.3572180461320993"},"_hasShrinkwrap":false},"0.7.1":{"name":"expo-updates","version":"0.7.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^2.0.0","expo-structured-headers":"~1.1.0","expo-updates-interface":"^0.1.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"7eb212337759bd8cb75d8cb5d19a4efbcde041cf","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.1","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-nY8xXALAyz2HtBNCuX7uGCswYOnBGsL/iSVfOuF1Gwaf3IKsGExFhMwVUIi8iv6OJug2JDMIGyipMxv9gb7nZw==","shasum":"0c24bf355a5275cde5d979a4e7a446685c945673","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.1.tgz","fileCount":218,"unpackedSize":4203804,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0SxSCRA9TVsSAnZWagAAYWAP/iztyZiM8NsA8+QgEE/o\n8/JWDrfseiId7hm/KfDihu2sDGS8uJ/RaBikBoSjR/iIVEcB5BZqQMDPUGrC\nru3OmdAR2k+h8JxEx//6odlB3OP97zUTbuI6X0yW1fugxmjeYwiw9g/BqumP\nU4ZwPwsnI9gG8CZqDMhjX7RpiZHSZVx2e1MX6Ae4wvHwR9l0uNPYS6adbglM\nmGsiSAg8eTWOw3bJc7bPOJijVnK+eABVeFPTc+Wp8j1RuDo4VFoUlmkloZVs\n5R1yChkZNZ5rhgvvXKVmZ/S2ptmlChOISGYAjLy2hZs+/14h+3pa4jwoEQND\ntwK65QqVHNFXR0c03OpH02l/RRknUpNU9Vo4QcZkz+Rgv0u+FMvd+T9KCzkC\noU+N2mlZjZDv8JDk0Zjn4iUR5asutYYHvY5s2t3AekQBAmLHCUbGwBlcbigY\ntZ3V9Pnljshnx9xkncnjlXv5O92L8zN5neOuBLvoAdeGUG9H/xErcrvqeEcP\nycH56P8zamSD/k7UssmTJSs0RZCirZ70qB+meEfnSpH4c9xD78gS3tRNKjwB\n9E71YIhEAPFVrD5CJxAsQ7qHzBQXWgaB2dC8/JkeZpZSladenJ7thif2EqGG\nUYF7/CjNN3K1Eby2gi1+nhWW1HwrzEOJOL3Ro0No9OLK/DBgMg5Dw90ejwby\n69L+\r\n=AdjJ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCYg9t65QYcG/kBXWoymL2Y3Y06RAvPPOxs68o4Bjk81gIhAKOaCgq5vbbbeoiRdUjZC0j53mWMQR7PM9Uvgq9qepFc"}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.1_1624321105587_0.5374344926251453"},"_hasShrinkwrap":false},"0.7.2":{"name":"expo-updates","version":"0.7.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^2.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"^0.1.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"7f0e39e0f45a4ade0ddb603d50983fad2e831908","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.2","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-2EGPMxieiIUBTXQ11hTrzNnCbQEfpL6jBkxjaKNQsJI8AuN3Sn3au5y5J7htMCUrcFhEs9leeudC5fmqUjpffg==","shasum":"088631e573618dfd42ad226e8ac4aafc6090b2a3","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.2.tgz","fileCount":218,"unpackedSize":4204051,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg048rCRA9TVsSAnZWagAAhRYQAINf+sIqyq3tvs3FthP4\n6tf7uo4odz58WLLX1M8YzzcU4wYxe8WLk0rPUKdgB4iOURy6MRWQUkelHprd\ntEssCc708q6waJJ016WI/FMDsReyvSL8S2fYo6cj8nBFzmBlqY37VFNX2u20\nauVks+ZTSIi7B+k/LNtzn7s00PPP3iHa0+i2YaqjHIUFKGAubkowS9GM9MBk\nf19dLxXk4X40ChguDnz7ZnLyWG5Wu9xbJC9uq4jcbfr1F5TUK8B2g8hq2n/O\n2TkOGK/x8PsPCDWWmtpKmoA2XCSDJX0PqqXr6581hsOwIN61W1kC2j3Cea4B\nm4l4nh7vcYwBQmNwgG5nAJm/Ktlqh5QkrDBxUHDPJKJ6UD048XD/i8ZNVOI1\nV6yCR9Db7yr3WPaZfmChMiJ5d01cXyc1/QBCfLlQRc+PyCdQ6ccmW7WvW6+r\nbfVPxW+LQgr0du4k3nRoX3pRNx0pSWyhP2QesPU2I2ECDBP37773jdQn+m1Q\ngHHBgCyx6wfBRkFdVVPVYeKKtHFiH8g2U+GQRIZadhC/dtMKZlfs1ucJeGVd\nmwIBuJKrE+IDSkg9VOZa4L+3BcOVstlPjP0vAjog5ppgYKr3ZX7c3btAbbYK\nnZZrEEusIkpq5XgO7xqj/f7oT5oISMp47nCfZBn68EYCc/doaJSgSEnNxSMe\nOeG4\r\n=xPlw\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDtUMW2Z3EYm5IW5X2R6OHfHTJVp19Pt+CynLeDCSlIHQIgHMTkWItAxbIeK+ohBK0iH685Nr2+tde7W2wJdf1k9XI="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.2_1624477482537_0.8371796858714868"},"_hasShrinkwrap":false},"0.7.3":{"name":"expo-updates","version":"0.7.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^3.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"^0.1.0","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"4fc9d282ff7ab2fa9040b775aeca7c30f5167b17","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesEnabled` | `enabled` | `expo.modules.updates.ENABLED` | `true` | ❌ |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesURL` | `updateUrl` | `expo.modules.updates.EXPO_UPDATE_URL` | (none) | ✅ |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesSDKVersion` | `sdkVersion` | `expo.modules.updates.EXPO_SDK_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none) | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌ |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌ |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name | Default | Required? |\n| --- | --- | --- | --- | --- |\n| `EXUpdatesLaunchWaitMs` | `launchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0` | ❌ |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n### Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n### Uninstalling expo-updates\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n ```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n ```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.7.3","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-jicBhWzjfx2DRVLNUUNr+RSWfh2rho3fltAbau4hQoI9xbZFSIw8yeBXcTEnNXFrjEXqGPNccIQ+BHHGCkHLDA==","shasum":"8f1a6eee56b3e3f8d7e5b7e0a30ec5ea3b42329d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.7.3.tgz","fileCount":218,"unpackedSize":4204136,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg1OgBCRA9TVsSAnZWagAA8AwQAJoD7oGVDL1OTai/XEmd\nudYF05jQaj3TiMqOIzl0ganwh/mSYew/zimfk9yyRrGHBExlX0Y4vfqVAKFp\n+TRGENA520RjiwiJj/v1JhRzl1mvExnykBXCNwWRaFJPjLPYxoTDw0LXoLaa\nmCWJ5ru5WnlM6EBpHT2iXULRNMWd6qkA16WjtONYy9Td/7ReyqcT+5YpOWjD\nhQWgMdmS/eGyEodUHQimSiKD2upqQdX0lSoOoI4ZngP/cy4feqc3FOhA4k3T\nb0eQlL/HWfh8wsLQhk/+2qvhL2E1RT7g+a1oM+cLJp90UoM0tqYIq1xobWYo\n1/y6IaKXiMfkWOBIiJy9oZqFGvOz/i0z7fcNZ87dW4byXEOo3Q3mKnXpHeW5\n/jU9tjfkGUhaZcmnIMEYVlP+5OBNZNB9rFJZa5A1Fy1j7nbcQU3SuVHBbgmO\nILf1VcwtWBzThmOsUoNz5IUUCC8mFXmvSvX29F0D48aEtmBiIuUxVsN7g2TZ\nbGVs+iggrdaMC0vDEd2r7mdxVY1GiwOuCMLVuyXUrDqE/6Q99RyvLh5c063U\n9AxB8PSbUvm18yHcx7AxvSZzCZYSxtNuWSrUaxThNSMJujqkrT7klEide8jC\nWHNLq8vz66d5k7xoHtIPPcnV8TBZx/X6Q7/Hknnz3o3W9EHZCFOn/ieEvn/x\nc7to\r\n=LBvk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG9ehS0/CuH1rEqT54UgZoUouUm/jhQsbtSvu6cUTlagAiBkJa5lcrgSKn6wao1i8qOy6pj56LTdDQWcnai3B7p3Ew=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.7.3_1624565761332_0.06095276976319175"},"_hasShrinkwrap":false},"0.8.0":{"name":"expo-updates","version":"0.8.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^3.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.1","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"a0c521e36bf71f645b3fe123b768461846d05aa0","_id":"expo-updates@0.8.0","_nodeVersion":"14.16.0","_npmVersion":"6.14.11","dist":{"integrity":"sha512-9V/MF7+oJjxASs15mXVYlW8zJE4RnZkUUva/xopPuoYcCVkbCKHKRQGjAlhD638JNjQL7/D8PO8Dd2GNQwj6ww==","shasum":"81e177811b3b70a40a0554d2cba820776eec4541","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.0.tgz","fileCount":218,"unpackedSize":4226310,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg1RECCRA9TVsSAnZWagAAvB0P/0qTm4QKvpT1ArL8kfJk\nADRFLusgBPu8ey+7+kMZwxVSOLGdbcebcOBUdyxiem4DGv9KyZRO53MhW7CR\nsoR6TqhEza3ViiwP9BEp5jZHdVo35jpf0fj0ZGUaarpi7bryLqP4K2bTwG4o\nJih1WtqpKFDVvzpF3HuWMX3AMMZw+3M3xAwSsbAfbWwiLA47iUegKSaO4ljJ\nYMCPWp4hXvJiqhPmiOM9R+11vGIPw5wtwMIwUKG11naS3lWoyAD0eLQy/PGR\nllfqaWcnE7VhHPx3Mb7CdpifcRzaGqXvavzjWxRvsicShzadqhu9OmoHQmsh\n/QMiJAshU0DKbFxU41m7UN4Xij2LqlNapjNEMEtFQssN311eDxpKEyslIqd4\nM9ngHfWOil3STshv2F/iCTN2WTMxeeDDH16vL1ZQC8EMRENkAC2tEnq4Ei0w\nxqg02n+VuWeenioc3P+ATOQhntdNZOhxJxt8dJ8DpLx1jXwf8UDnYPgausLI\nyCuYyfBFrqB17pvafZtwrMQlHf/CzHZaFBAet+wAMVoTXkxyq7zpo1TWjyOT\nwEJgG893fTXp5RgAJ4uE7Svi3HeDZ9/2jnorukmBYR282bSPtda7uwK9VJk2\nNPJZwCIoKFd0sL4Vscw/YzuS5ORV3nvvfVIoMRUisztfH5DXyVvpTU55VL7Z\nJCcE\r\n=3xLh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCa4Cbuz+exdq2fQYhsJEmbckpgcDiD1iQ5YTNk2aURQwIgJCc1jn9BN2qUzsCUikpVVATxz2/dNjpkME3UC2hDTNs="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.0_1624576257742_0.37977580819905743"},"_hasShrinkwrap":false},"0.8.1":{"name":"expo-updates","version":"0.8.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^3.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"cc447493791ebb7e09c8edbfb4d72f199c0fddfd","_id":"expo-updates@0.8.1","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-DRD9kAfx5Y3spbYSIqKtvFrTIE60d+jDlSv96uZP/wf1V//tNHvENx2ZPJCGhfBs+8tH8/33iJ/MxLB/TvJWyA==","shasum":"784833a89503173a3ee9ae09eafd10e89d0706a0","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.1.tgz","fileCount":218,"unpackedSize":4206573,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg52H0CRA9TVsSAnZWagAAAesP/1zFjqXAWMo02kZSyS4L\nCahYDD3uiPKZhnxC0cS9C4OYQfz2l5NahqdxYyreaIDHs3cogprOd9Kr4Tsm\nJXGsBnC5wfrKX/HcDci2umKMW7qpiyiURwnCNVpiMFtj7xOHvk9a3cstThuD\n9utmEKLo7HrBDuAjj6xUPPEtBmRrFPfpeGatHmnpm6MY4Ki9VEPkxw9lG/2R\nDddcKxTFYH2tVeEoljLQaNvM3JJENPFY8hAi6Nr1ABJqzBsoA9WSGDHH3fH7\nikBEkJY51Nx5/7ZXjkLw96sRyKG5BH70GgsanrUnJa4QEqgpaw5ewzq0psRD\nqtr7eUv2SawunQvr8x42VbGrWr0/0qJAFLR+Z6LceChDxLZebr9EFMT0Xrkj\nyZppjvmbCflWysP5Sag8/nu0DPKFJWw8yvMA58wO8hN8SS2diUIQZeBCQtZ6\nvu96bhjZvhA987URctPjXgUnCAfgTBZYcmuEwhHYyfp28JLVPk3Up9FfV8mZ\nYz0gTM7Ybu5zNFVOLIOv5CHpFh/APflnxgR2IQjVwvR6iaUoWEzw2c8E5o7g\nrDjVgRPbbTdsr3alOrIqn0HhTU4+vEVXgfHof8VAL2CcfcK1e3yPzG1Y/K18\n6jvEDr+lgZthGw6p7nGWcTYlWFP6wk8dTSQ63VHVfyHo+75+MDZP0TqNFDfz\nSlWI\r\n=JVoy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHQKeEATGno8t+ChpTSH5FpcvOzqqm8vjtX4+H/mX8aUAiEAp7zeuDAXbgyfP1MiBra6DMRcGR+mk2BKe0wTCWtBk/c="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.1_1625776627711_0.3679280562906788"},"_hasShrinkwrap":false},"0.8.2":{"name":"expo-updates","version":"0.8.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^3.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"9d89526db25faa01207aac0d14e69a2f2ca4be3b","_id":"expo-updates@0.8.2","_nodeVersion":"16.3.0","_npmVersion":"7.15.1","dist":{"integrity":"sha512-BYDasWF+rCBR+1KbJhAYl+ctI6u6hbjwa2fmRpkfa4sRJjN2mftdmBoHVe3FtSBTprc9zrQUufgbA0GQC8OpHQ==","shasum":"cc1c79f6927f72e6d0b583b6fc3a5449ae750087","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.2.tgz","fileCount":218,"unpackedSize":4226739,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg7dhBCRA9TVsSAnZWagAAYwYP/AsUTHXG9U+DEQlqMVuI\nm6z1yMHwlLNkOOTqA4LYBwC5NrswN3UW9BjTr4BWQn+fpeyMWniCJ0bq6dTE\n04+81xYXJHwTjKkcpZhtu5fP8ENqXEdPHy8k2Tyf1iCDpwLBIQSAcE03vJcx\nNcfWOOARjauabNVNudQF0JI/By6Kko2raaleVnM9x9w3cj1u41gMsivh1Hw2\n0v+gQs6a9oYT4lwuCi7749dQ8ZD12UKCvr7OEbsbofP5SFlT89sRtNyAap2u\ndArMUCwXGjHlUEJthDHVZ3JY70XF85O+7LwBTq3oZY63RcbymE6O1TWMQYiW\nWAg+TryPjLZgnYgr3llyZ38H9Cmm9mMgJrQss2/JjNBg7R6+VUEYMVF5o9sj\ncw3VVgeFIq9DsWBgiayjkcfEmaAWYSZ0dODO5RyKtjUSfZpfU0/ReJXJa1Py\nyQ0jQj645UKFUPWDsJuk6R45oGr+WciDT5OxgYmupyZLvvSkZNRk2NxgOInX\nSD+dSdmm0PMuCNKKQzUcFEZfPzoXKZ5KshIeoLRwV9zR0aFqScqreB1SZz32\nzM2Hlue9Ng8e8t//F1Q5gqJtVYfd1wpOrMBITlLf3oOe/gczUgUrGBuurtXY\nYjyez/0P1YJ+EapqezsUjQjC8tMDrEEwIrxwxxqMth5JjpR4oQwl1yiumC2Q\n2Xpq\r\n=A3L3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC0HsIVjq8/W1s8zhUemAknsIwO7b1JFo+jOS4FhEnK5AiAufunrwEte9gcZxfDPH+jksyZYWtZwUpq3ramlB+1Pog=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"haydendaly","email":"haydencdaly@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.2_1626200129244_0.40724468073012643"},"_hasShrinkwrap":false},"0.8.3":{"name":"expo-updates","version":"0.8.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.70","@expo/config-plugins":"^3.0.0","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"ab6d40287f5bfb927a10d304183bb73772f5e0b1","_id":"expo-updates@0.8.3","_nodeVersion":"14.15.2","_npmVersion":"6.14.13","dist":{"integrity":"sha512-/sqelMKpF99+zbek2kutbJ5UQrPBL+htHU8eKnKgN1+4L3pPYOnBgDnwdJP5yZbO9HLzzYKtwUdsP7DwV3HLgg==","shasum":"145100d8ff92c19fbce1a67e2e8ef80e2d330e4c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.3.tgz","fileCount":218,"unpackedSize":4209800,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAK9GCRA9TVsSAnZWagAA/u0P/igy34OFtnlpJqXrmVN9\nJjP48zPlEzkP4SpMQhFmKzZouR7z19aQ6PqGUuSUhB6LjqZ8FIj3b2A5i3+v\nTgoM15Uw12oJ+FZTp9CP5E2Yj41GEza0G4fhA+/YVCXmLW2mILkn6Fq/sqeQ\n3pe261TCFojOk42OEaAh4peXFxHk/jqLol58d2OCFEzxSzPajuEEJcLcVBry\nYM8d8p4HXxAsfNY6OFne8ARksOofHmd4QhQPwewwPR6N7KBPGpbE7Pwgqgsf\nxBvt0sSh6DkYyOPMTFQmf++CrGqA8oAq/ZH7yUYMTxC15TDiloqEF65TuwI/\n6TTaLcffz4WrPt7SKf1/XmLIpB/KvAtFLQSNaGlEmAyg4UbIlLXTxZPtfIyJ\nJpuckcE2Yb5bPnVQ865SFrt7Bf0g6Dr3o5ehVER3IgK/g0cAIMMYt3kHnFXN\n2+/mEde84EwmXuVCritd5/5ngvyIwObZu3OAepLeGl3W0GzM+mE8AhuW4Gsx\n2PzPDBLYgLGdk4mpCH3nVdgMeL/ch2r22RtLfIvzG9rzc/Tc/R5L2bStuKJP\nlDxQ6yV5pvyVolO9u58YpQf4e74TYwQHsFgrLxGj81GAJJzIieU6LLQ6GZHX\nQMvBMaicQhQrXVeM9nFD5GyWCVbX99bnpkiAuvjcBz2N8PAW8hK0nKTmauED\nwnHJ\r\n=w+AE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCETToY3seUrfBitAILIGJA8UXed9uDTLuQhMsLmM06mQIge1PqnX9ykhU9Ji0uK+QXztz9Y1hKgf9gMbFHHQ9SzUI="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.3_1627434822208_0.9730057608316494"},"_hasShrinkwrap":false},"0.8.4":{"name":"expo-updates","version":"0.8.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.81","@expo/config-plugins":"^3.0.6","@expo/config":"^5.0.6","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"b588610e02acf18f338a3187882e139fd031a9b6","_id":"expo-updates@0.8.4","_nodeVersion":"16.3.0","_npmVersion":"7.15.1","dist":{"integrity":"sha512-unH5pXSYC5RecP8YudcV7NjE9CrwMstmK/A0XPs/CRUJPxdnc1hhN75vrOLZ6z7St5aXvufP3HPORAI4hejRLg==","shasum":"6d88a2cd6581052e289c3f1bf13522a36a666545","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.4.tgz","fileCount":218,"unpackedSize":4216343,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDYB0CRA9TVsSAnZWagAAZ88P+gOQhKxXRqXXy559wG7L\n8MdDaOCzT/wZ4zEuFY0bTl6fs3oHpxicykRSboPIe+cV0vgZjMsAgWnRueN4\nLwLkdXa3wVye+1k6H08nOM8f5QYwPz5SkjcMDMvLbJQD67IfuNPKT7K8aL1q\nPLHCmctE8dlf2s9AfkhhGa+1lUOjP7T43zKKrAY6DziE06wvxURtgOIfDh8F\n2ZxiLjO+sV5IapOANYpxuSZSsSv/WxPdD3VpTks6fzH9KVNm/pufG9aHDfok\negDRxUpGQ+v5ILyecplC5GTqWLFNuHsqNTlZ0SwV1oDoYBqa+i1uPdLwE0VV\nCTpkbn5SM1FUJJUROTsu+AiG/5vd4XAeZo84ykWWR2MFGeb2PPf/ZqSf8Nw7\nvjA8G9XFWxYcUrioMRFwo76EpHfruGzyFbMCATcM54o+3jJGCcqy+6nILFm/\n2PC6JvAGPp/vtWE5EirxLFmDGwupYSs+8Wp4dtwbpS0ixN3oQ4AdnADkpat9\nPZIorW5ogXFIWWwM85jnezKpbaVYeCSVCSXdaa0KbaDIPABt39SJa3ihSz+b\nSgcbc9bgJg3Dh640An0p+RPV7GOaOE6bukTOKE6nH4aa+YB5OD1U5ho3K0R7\nRZHQNxoMpeETiuR7fwF1Mlna1eDSxKug3HOOIJPywn3DF7u8ppCLjBA7SCIY\nYdXJ\r\n=wtxv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAuq8A7J77HT16RDOAqQtRkByaxu7lkL6oL76XP1FsiIAiBb/I/96SLVWqLNvND0T6RxE3X1J1clXl5VXWPRE4cQDA=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.4_1628274804277_0.8600616749776462"},"_hasShrinkwrap":false},"0.8.5":{"name":"expo-updates","version":"0.8.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.io/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/metro-config":"^0.1.81","@expo/config-plugins":"^3.0.6","@expo/config":"^5.0.6","expo-structured-headers":"~1.1.1","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","uuid":"^3.4.0","resolve-from":"^5.0.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","memfs":"^3.2.0","fs-extra":"^9.1.0"},"gitHead":"157c42185415a4ff769856674b2e1ec3bb0eb34e","_id":"expo-updates@0.8.5","_nodeVersion":"16.3.0","_npmVersion":"7.15.1","dist":{"integrity":"sha512-MX4YI80oPvbjLzdo+sNvxRma8TEOxESliADHdbrJQpdILhPZTz6GLSypqDKZps68oyvYWxJqID55EBam1nFlAg==","shasum":"38da04bb68a222297a1d36a2cc3c2159a0b1f221","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.8.5.tgz","fileCount":218,"unpackedSize":4216890,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhMWIoCRA9TVsSAnZWagAAyn4P/39jUIL3sTMX+1Jaad8t\n3MqULDPvkycSQ93Dbg72OJHE+czrPMFuMl7dgbP0ESfP+vToh/HSWoPXKKcX\nJkp9gII8L5CEYP7iTlxUgJamXc9EXINMZI56of4l+HR/2KMr7Mt58ivMi46k\nOJjeQTwWTFjnC0W5rbnwTJUqLIxi73pgiY2CI9tRcfIYyv8VUQm5fwNLKWQU\nfpoi49+5JvoPL7jjujJvul6Cj7CZ7MSr+ltf331GR0Xj6cZmn7XgPHwLmruJ\nmjizHlrr+WPYCTi7Jw2xnabHCkketeATGXPVcAci9YHQGJv9KumA+kVB6xYl\nHpRLrBgMANDIuHDs039gVLnHOaa+KQzRZzP6aDcbKDgN3rcLL199Oug12oJF\nkgzpJly/MBko3x3KWVq0jYZ0h91gO8alaEjAppkGcmbeoERVcSg0gYnNbJTo\nbL9ut5ViM1HE2clqLsDq6xrDk6QYPL4jwy/WcICZnzZQHkmmvV42X0Owbmhm\noLg01Z4+RwPuYsrWqlXgLl1I1Kyn96zFKWjURnD6Un20fT/5uNMPEm5aXPeJ\nP6czUoo7yMLc1xXWXvUKjmErjbN46HPIxZqt74L5Tn8LMYeoJNwUTo7Hr2J3\nOT6L42CrzzMP08Aq/EEOQaVcgnKkFnqHFF8NPMFfKYdqGkT4E7v3uOu3cSuZ\nuYue\r\n=HpfF\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDV4+UpwGyK0ud2Az8HqVHjoCw7AHPwC7GpHjUC+uSbMAIgblG7YzgwIi3dSPYCHGwfyXg0b4n/hZufv0gcHN37Rm4="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.8.5_1630626344072_0.1701180536590854"},"_hasShrinkwrap":false},"0.9.0":{"name":"expo-updates","version":"0.9.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.6","@expo/config-plugins":"^3.0.7","@expo/metro-config":"^0.1.81","expo-manifests":"~0.1.0","expo-modules-core":"~0.3.1","expo-structured-headers":"~1.1.0","expo-updates-interface":"~0.2.2","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"fe74edd44933f9f00a023544cafc4713594892fb","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.9.0","_nodeVersion":"16.0.0","_npmVersion":"6.14.13","dist":{"integrity":"sha512-NJxvfQxCDjRsZYT1IWJgyYD9CVP63Xa84y64GkqFD2fl2VI9H+fqQWuJ5Zf+94NkAGfbqfe+x0PUA53PsAIWSQ==","shasum":"dfc5155d16b205fae75149d4f222a68d7736f119","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.9.0.tgz","fileCount":195,"unpackedSize":4059904,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOlTgCRA9TVsSAnZWagAAnx0QAIalaV2wwDYKTp+hWFj6\nBhhPz/mSpMIKXf4PDBrB5Ufk5EWp/wnep8QeCXdrITGGf6Hv7erxOjt9I5l/\ncvr8Iz9KLQ8NspuQo8oOBipHJ7Sst83lOHRtAcwLrJoK6/Mec7tyxafJ3NNR\n0zaafCdt9QOiOXtORvqE0PPolNmrtPVkSdXz2PXVPAZCYTxIB/X/HVqnR9eC\nJ1CsJDet5bFvlaVf+utHyHYFc1Xor90xP+slm/ntwd8K0goYh/8+nNuWl7aK\nHVZMsbNmaPNdanETTrhUQh5T+ODQxoFl7W+AIAz5D7BKp5AD5IQfqjyoeoJx\nmPisErnVAHiQu/k/q1WQ7rW8MvPM7T7Js/yb/9o80NjnaPGxj5JnM3YvKUvD\n8Z3Uyv8a5hOwU7ix+Py6yTFg1XDNf9MYYhngaM8oqhZmDXF3jD+WsDk3zNXe\nlirDBv88O2+0oedl/M2D8Jf7wHNv3MjzcWjzf6B0HwgPAyDm7FGQAJ4z/00y\nnFQw38V0AOri3Hq6xjrioY/A0f/rGfuSm/9eLtwKctMjDQd1uPq5bisBNZsb\nNez5nHpjJVHw1/b5gR3K+qpD6IxoclVSHBVFF90SOn2amH3UUiMn2eyCnXub\n94deKHiTTR03Ub4lXWfgfQ2YKJc5CQatD8XH3hXr6q2SxyrWW6SxdCynyk6y\nhdXy\r\n=ICjI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFC15FwYFsL0fl8T+RPwhyiGGrDJU/Puuw+ZpaG4zbArAiEA/cNqBeA0DlVG6rQihUH5QkdGiP9yQAbYrWeNw/bTZm4="}]},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.9.0_1631212768274_0.026190487366192228"},"_hasShrinkwrap":false},"0.9.1":{"name":"expo-updates","version":"0.9.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.6","@expo/config-plugins":"^3.0.7","@expo/metro-config":"^0.1.81","expo-manifests":"~0.1.0","expo-modules-core":"~0.3.1","expo-structured-headers":"~1.2.0","expo-updates-interface":"~0.3.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"15b7678bc59a9489901024f799ca586baf786e41","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.9.1","_nodeVersion":"16.0.0","_npmVersion":"6.14.13","dist":{"integrity":"sha512-cpKUnK/GN98lzpwDHpd66Pam3oRSpPGJfqJTA3pNHQec7nMuoZWS5k5a2zOjP7o4vWzo88U0gH0tvMJtrR1bug==","shasum":"e3d44b91fa1f1c509299e5800c379d8f31ffe7a7","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.9.1.tgz","fileCount":195,"unpackedSize":4059989,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhOlmxCRA9TVsSAnZWagAAElAQAIPMVEuMFC8C2XN2+aVj\nVJgDcqOCVvNwrJMB330ok6GgYKyUBeKdjbR0AZaDEi1daYCAKlDk8rOyE2BJ\nYR5Cd6FQz5CEVHOH1rBHt+/MN400n/1Zmvs5V1cTtrhkohcZKYd+PTaD4xMH\n1buWPlkK3Hsb1FrWCOWP8zaiZY/eBvBroN3zP4RsA6suuDnIEWiRCdzKF2Un\nHtpEM8Rc6QrXHDpgAL7Bg/GPZ3NmydsbwdpDrv8h9Wu/NYgWvOT/YjZ77U1v\n5B3Dkl2oZZenL5i7vOzNZSzRZTpZa6f4QatZIe29DlcaBDyUCydC0IsoOXHW\nQfVTycA0frC1MHofhavRozHVs+oUDE11dzWfx1F8BvnOcO97mfFPMdnvmOgS\n11O3yVIWik39M6jXz/tMBgSJxz9eZCvgsaSXzM4jOb0bx0lEl7769aVPkmNp\nBKpLnPIYpEWc0oBHOCypI95Pei6IF+t0UwSjN1FAWFLHSZz9ghKqiolrfWd4\nP3a/yKL59byDVxN7HEUkCBmg8cwOhrsWU49c6jNr6sMUcZahrzxrO2LkFdOc\nHCTxAR3m2zgouQ+KBRNhWqQQPm9THtNo6QOMKrREiTvxjqSZU68+5XaWZ1/N\nFnOHqlc0SxmF4zqu1pZx/MRAZL+x0HrNfAE0AH+daYrghpK3z+k+oAQQw3gN\nrUur\r\n=cx6y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCCuIowHbKOHAae8fw1vgxCaD1OUEvlfyAvciYy4C8YngIhAO/RMEIdm91gTh5D0MD8cTHNkLRZHUfg3p/80+QbDHnr"}]},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.9.1_1631214001310_0.4424207905578943"},"_hasShrinkwrap":false},"0.9.2":{"name":"expo-updates","version":"0.9.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.6","@expo/config-plugins":"^3.0.7","@expo/metro-config":"^0.1.81","expo-manifests":"~0.1.1","expo-modules-core":"~0.3.2","expo-structured-headers":"~1.2.0","expo-updates-interface":"~0.3.1","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"6552696cd8bdd2e92ff6dd09ceed8028efc96d12","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.9.2","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-2iNTVKIQeNp/W9MbNH41WSbWuWFSITy/Rpa1Kua0qHIBjOE9Ry7ygbKrP6RLmSARKk0TmEJYRwfh7KY5MiOiWg==","shasum":"5034b6510cebbc923b30ad7335de8a7fa007532d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.9.2.tgz","fileCount":195,"unpackedSize":4071888,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQ6ieCRA9TVsSAnZWagAAVAYP/3SDpQKxxCc1TE0podMp\nH44ENdH6Y4+wJGm9BpUQdbltKm90PSiEV3y6jHlYyXG0PEQrNr2SRL8UuQJa\nHYwVJ8nOKQo4MxttNqwGBZdN8tMLauezq6aPYM6ijoiiWVzF4rj4JxPqeG5u\n5qs68lPnVGqdYylOB4NHLz7Mk7hiqcwBZc810+SvtWja+UGoBvx5HD8e687p\nacD8yX4gdhos0kLIPnNGy06QtOB2dTT7N/Nn68gENGdUnEktXLQJkWi9A7NC\ncwuVORi5AkeFrdcifxD85E1pC3x52tc7KiW1QBiAIHXrmipxv1Pg5q08ZOHy\nT9uJi85mxVB6Vyi81nVuu/6SuC/x9bzQ82nEBaKL9hTlVZUrWS8GoR8sSN95\njJtQn4xpCVE7po27tme+5QD0b8H3y90Rrj9NVcj2vcUMZFbc0iqvpsfq28Bu\n4Juwfb3xarOM2Mgpqd2SNTnw5TGyl1t5W4avrMyZ0h6BduEcW5btlRcaf5C2\ne5TNHvQzusVooGfjqsuX+I/wTVF8OvOi7qVnkEMmVTL2qy/YFHEWpXpsjcwd\n+jPBL9DQN+ogSQoUYti8rplF0ZfRTKuc3OkzmTgEyCb/d7Y3fAt4AYizjP6v\nABbPqiPQQdPVkQ6eHx7dheB4+oPfXRoHT9kge/WwPWDJZmVlomi506fYAQie\ny3Tj\r\n=PhEf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDT7oKJBS7W0ylwwQC0+iWzMOkZ0hVExAX9/rbwSmWsOAiEAjHNXpmfor7rtJFWuJpP8KBhaMyPL5OuXqVActSBi2R8="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.9.2_1631824030349_0.9677267462443642"},"_hasShrinkwrap":false},"0.9.3":{"name":"expo-updates","version":"0.9.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.6","@expo/config-plugins":"^3.0.7","@expo/metro-config":"^0.1.81","expo-manifests":"~0.1.1","expo-modules-core":"~0.3.2","expo-structured-headers":"~1.2.0","expo-updates-interface":"~0.3.1","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"435be3fbc52e606bc62af1abf5a8660bb4670666","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.9.3","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-+al0fhUgkCTsdsWKKlQTRNhm6E/Vb5Rj2fMBwJ3ZJjedppyN1Aq9kYtV0o/co+7zumsyDz3i9Bx77hPo2+BuhQ==","shasum":"ca2600e13cf9f3e5204de844795af4713991a89a","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.9.3.tgz","fileCount":190,"unpackedSize":632025,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhQ6yhCRA9TVsSAnZWagAAh5sP/j6gMrxS8uI6P53S6Evw\niktfjFl+jlAi+8zJRYxmjNihlj2n7E29GPzWFBDf0z5CZzre5y+cS585lMFE\nE6ZlbiLiMn0C73b/y2VBHUOnTEyHsy5GtIgeDU0Yz5n4gStG3GkClIMdo8K6\n5F1kz6L1D2YkVQKmYByuJGFvL8T9nA0cgEQy+sTWCaslymob4dOuPIzdSJw8\n96Sm6n5dhyIU+qp+tWYVhF9D7KUgR0+b4KCOR3KiWJjda5jZ9PjLf8owtU2a\n0mwa0b97WZ12PmyMj89DP2LfUU/oqeuGCBz4CPIWy7a1gBYSDt6fK/Hh08Bg\nAAcA6wmn2H/olqd0B2rT4MvzS+O/oNoSTbu0VBPKxttKhB5lwG53rPRasYrX\nIwtqNbF2a3wiTXakCT6/C8jK985YA0ftBtqwDzBl9QGX0h5ffFTN9B1+CaJC\n/ES5Qbv31yHqHDvgff88YacOcwq96iz0IYv827t/5R/X2LeCIXIhX0GM0plW\nYF3HxXD9lWUzOeYepSdFUU/rfYRcBv+JJ8d7yONaSgpQ8cI0NnPt+7rT3CJ7\nRLUIum/Qj/0IGQ5Yf+v4U6R4TBsIhTuBN7HmWUsfvGaOLXnX89eMcNmQwTpu\nZi40ZVzVhEtGFSaWIl/DbxktTWDbzOgjs3tNb5GtBTJyXzML8zWn8n7QesTS\nVRK+\r\n=UKW+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC5XbxbMP0/NeZHG+lRlJKdxA8zzaerGG0vxer7jnGOxAiEA+pxYHEG18e+5fuHhYXr7j5DdLAesUmuloLrW+4G8YU4="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.9.3_1631825057261_0.27428577227386985"},"_hasShrinkwrap":false},"0.10.0":{"name":"expo-updates","version":"0.10.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^3.1.0","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.0","expo-modules-core":"~0.4.0","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"1fffde73411ee7a642b98f1506a8de921805d52b","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.10.0","_nodeVersion":"16.0.0","_npmVersion":"6.14.13","dist":{"integrity":"sha512-UxWcDHXGbTVI1IhmlTEfZK2mKWedjSWW4siqhFewHM0UB8M8Mwq+Clnofj1jcqo+pf7Si7WPr79M7K+J+XroBQ==","shasum":"1baf6b3c01ee4449af8f9c8ef870bfa90d8513c5","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.0.tgz","fileCount":190,"unpackedSize":632701,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF4btvmDCA04DCeCUXMFE15gsSlzyTlNRyv8uOnjnJnyAiBpQxgqc/MFSyA66WPYBe2/lXxbqKzpv6xyXWMagsezvA=="}]},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.0_1632842586600_0.13105744131198716"},"_hasShrinkwrap":false},"0.10.1":{"name":"expo-updates","version":"0.10.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^3.1.0","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.0","expo-modules-core":"~0.4.0","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"dcb45fc798298943f13c091d30e2846bdc25089b","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.10.1","_nodeVersion":"16.0.0","_npmVersion":"6.14.13","dist":{"integrity":"sha512-iU/HtdYowdaP/gfQTS36hrrihMTTuf9tKzsKa6MaDiEr/D80/qVoSipKZeoCTJkW79MfPyM0PBDls63YoVVmqQ==","shasum":"3b393399927831438dec8140ffafd63674e3f0fe","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.1.tgz","fileCount":190,"unpackedSize":634555,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFSQ/aWv3cjcD9/2OO46Rd1yXOULOTAJUZDREiNd1iB1AiAjdhZPqq4dR24eUPt4jumzGIt5UGYW4DOkKVi8cu6wpA=="}]},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"fson","email":"ville.immonen@iki.fi"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"haydendaly","email":"haydencdaly@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.1_1632845758441_0.44922032371518306"},"_hasShrinkwrap":false},"0.10.2":{"name":"expo-updates","version":"0.10.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^3.1.0","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.0","expo-modules-core":"~0.4.2","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"2718b696f4a6919905b0f47ebb24ff65b42d8ff9","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.10.2","_nodeVersion":"14.15.2","_npmVersion":"7.20.3","dist":{"integrity":"sha512-COxlWG48ZT729D7yRv5QgS7pVpYh8XP9pUDkXqAq7o9Ya14f2YVH3tXepnrrLYxhHN7CRc1pELiygfcxHTnIgg==","shasum":"c199832683079a4bfe7d118ff6b324a256595877","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.2.tgz","fileCount":189,"unpackedSize":635130,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHc9bPdKhUbErk26qx31LOZ6/0i4EigPhdYn57xgUSl1AiB4SmWizbhRjUMlWMA2dGIEN7Fe0pvrG4anurXjxtddJA=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.2_1633129677663_0.137975103644298"},"_hasShrinkwrap":false},"0.10.3":{"name":"expo-updates","version":"0.10.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^3.1.0","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.1","expo-modules-core":"~0.4.2","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"9ac727c889fc563cbad3ba6712703da7b159b257","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.10.3","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-FZyn+sYuLpmnN7JNGktk/GXLdQKbuGtZJ5ijcc59gy6SEKzMnKi7D9TTReyrShdmWGQU93LTULL/jRopBzSwuQ==","shasum":"71c0e00ca8fb7c93b99d9565f1d5eab16e7737a3","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.3.tgz","fileCount":189,"unpackedSize":635395,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICPB5UTQdDSH9FmuV4hPPnnBa6sAeUuPjVDEdJ5IMneIAiEAr4s6x5ZLlnMU6L17XdIQ7CakDkK9Xj+PxUwzAsDBzZw="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.3_1634059617061_0.4624951259759058"},"_hasShrinkwrap":false},"0.10.4":{"name":"expo-updates","version":"0.10.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^3.1.0","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.3","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"d23e1ac491da96b51c25eb2533efcd56499ee287","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.10.4","_nodeVersion":"14.15.2","_npmVersion":"7.20.3","dist":{"integrity":"sha512-kVvvfioY0vnYlNNIkY7A+w8RnVIgVEvQbUS3UsXnbAtLN/HvZoBsv9JIVqoCUzWvxjQFUDZe29w+z2zlKYNg0A==","shasum":"42dc5d943e786dea478c0101fff4740b968104b7","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.4.tgz","fileCount":190,"unpackedSize":635596,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCG9lkBX9HpVcsdY5Yyn3gViP05gQE5wHhlfWwVg8YpBgIhAJll/tCuvfrUfM+OL0H+1l2Zcg+wYPjYgAF/8TujDyr/"}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.4_1634323849552_0.5966774888221185"},"_hasShrinkwrap":false},"0.10.5":{"name":"expo-updates","version":"0.10.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.4","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"4fa0497a180ae707fa860cb03858630ab7af19f4","_id":"expo-updates@0.10.5","_nodeVersion":"14.15.2","_npmVersion":"7.20.3","dist":{"integrity":"sha512-1WDVTmi/sVrlUngBEqWsgcx+SLY+YTluGBmfxsHtROgnU66nneZtuclLIu2h+/RGcHKtfGoxjeo2RzsoYn+9zg==","shasum":"7e177e258f4dad5725b783767fe7b864b3380a08","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.5.tgz","fileCount":190,"unpackedSize":635827,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvKbF1jhi3Cj0pQJWzIjWJI8lx/bNBrQx6oah+mMFnGgIhAJw6Kgu9i4GCrI371vcSeH9xrZNVmCZFGCI3QIxcZThu"}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.5_1634850744934_0.7959404221050517"},"_hasShrinkwrap":false},"0.10.6":{"name":"expo-updates","version":"0.10.6","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"42eccf17fce009282234ba2d5d40a37d6fff4e86","_id":"expo-updates@0.10.6","_nodeVersion":"14.17.6","_npmVersion":"6.14.15","dist":{"integrity":"sha512-vQfEBkQ+erXoO0jtyeyaMg/Sv2m7glsH5yRs+OGnmGuL1oD+n10CRCgj38j50NeOQt4oxdNH1swXwZ8G64fzIg==","shasum":"002a900c1274fbf1b56c70af71843abf50dae181","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.6.tgz","fileCount":190,"unpackedSize":636057,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxFhaM74sWIAueTUnsLFCAyqFf9TWdbknVK1E+U3wOOQIhAIK04VUIWFEIrgJZ6mOv1hWXEHBGG9PZR9ZkHjFuRQuH"}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.6_1635441900380_0.3936237939646452"},"_hasShrinkwrap":false},"0.10.7":{"name":"expo-updates","version":"0.10.7","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"a616d8afafcb0f8a7e0f7b5fdec88f7cac51172f","_id":"expo-updates@0.10.7","_nodeVersion":"14.17.6","_npmVersion":"6.14.15","dist":{"integrity":"sha512-N48ZLtzxnJf9CRD/+mEu6TSMuO9N16U5IoKWZpPwP9hvh9grOKPfvvTdjl70WQ0AzUUxv0WIN23lidqXEYQ9bg==","shasum":"f0c25614dba85750371aa42833d76d7f81057833","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.7.tgz","fileCount":190,"unpackedSize":636134,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDEGaEi/zhth11eS6x39cR2fXt5Y4aqAzvxn/LQR79VJAiAr8At4nXC666iUtldngkOp2KT9jOERe7yYbHU2Bbm3QQ=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.7_1635478170702_0.4918187583362119"},"_hasShrinkwrap":false},"0.10.8":{"name":"expo-updates","version":"0.10.8","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"942691fee632748af6811280fa543e93a3cb8a92","_id":"expo-updates@0.10.8","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-uZ7zHcqDXyrbCNcMc3zPuKNZMK3YEtwrxC5fEjyph9LY/1bbhHZ40KqYfsGL5szn6qWO19SB7wrtkBVc7SmRLA==","shasum":"7cbcde6c01ea6422614afc18a7844dbc3d5a75b9","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.8.tgz","fileCount":190,"unpackedSize":637039,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHdAKiTRZoOhfsGTmOxQEfwpKc27cwopJHT/0ogv16VIAiEA0ramjZsweX5lKuU7KTKtuSX8cmgx3wJWW1gYCxu7n+g="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.8_1635487346552_0.04682179494783356"},"_hasShrinkwrap":false},"0.10.9":{"name":"expo-updates","version":"0.10.9","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"53ade8ebfdf7e1fe2dce2c212d82c6e53ec9c47a","_id":"expo-updates@0.10.9","_nodeVersion":"14.17.6","_npmVersion":"6.14.15","dist":{"integrity":"sha512-DOFZ/P23hDrVQ53zJ8/ayWJbrwO/WuOV9puSo3nGDsp3Hbd0ubWha2NCwYegIJdR4VIPyJgK/EXUOAciOjxhNg==","shasum":"17ed869fe0bbc506f53ff8af4283def2fc08242c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.9.tgz","fileCount":190,"unpackedSize":637418,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC+BOZ2T+ZgSCjmZ4jeHDQ2h/IA76Cf9DdePi9FygyWFgIgB2jv+aDxSTtzwCyl5EeNhu/J6RZGMHWfnaTDywttbAQ="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.9_1635532900672_0.4797031011436128"},"_hasShrinkwrap":false},"0.10.10":{"name":"expo-updates","version":"0.10.10","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"712122d3d4079e4d419d3a5fedf39cc011051ab6","_id":"expo-updates@0.10.10","_nodeVersion":"14.17.6","_npmVersion":"6.14.15","dist":{"integrity":"sha512-7xrNCE6qXlg40G8PHfmuMWHAJMmrny4OqeXP+k3w9XukuH1wI4ikqg1wxMn4kg7G7OAoG47YoZZiokzOxodkTQ==","shasum":"67ab467073c7f762430008d965f1199ceaac7a77","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.10.tgz","fileCount":190,"unpackedSize":637590,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBP13dik+kCj77b4kkB0Gze/vpYtHsNHTKWnyHVvPIWVAiBLonk8CKyaah00nzCog0H+9buFb/o1zj0HzSGBbysisQ=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.10_1635814091479_0.35994296254289915"},"_hasShrinkwrap":false},"0.10.11":{"name":"expo-updates","version":"0.10.11","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"0803ed01bfe56c3911db024457bcbcec79899706","_id":"expo-updates@0.10.11","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-PQzmMa1uely9gXJKOtOTH0LijdYJUf4tn+P4rWNn4BSD6YLgPAsxxP71KM3QhVk18gFa1L5KDhZWqS3su7iMsg==","shasum":"8871913375d97abef3aee70e3516d151aa0088d1","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.11.tgz","fileCount":190,"unpackedSize":638558,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEebyGgk0J9pvlv99YXbDh3ijOPy8fNMVzbULFxpWVZUAiEAyI0POeg9WbK3MqdxWu5UEG2jSGcZudfh5UMYh8ksATw="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.11_1635888099854_0.48058789448751993"},"_hasShrinkwrap":false},"0.10.12":{"name":"expo-updates","version":"0.10.12","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"41c62d399d0eb8588b8d55919697fdb6760c3eac","_id":"expo-updates@0.10.12","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-DltK873QN3UisjLhe+Oi6R0RKvg4ygbqhqNA1K50w9eBTLnDJ5mQHUyOsqeaXaXhDIPcWNLBaNP2zVfuAxBoIw==","shasum":"a60f889ecc2fbd05855f9c448778dee3c3c40455","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.12.tgz","fileCount":190,"unpackedSize":638972,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFbImS5fBzXboRBDpfsfpvm0ag/pzH667KHeJ/QWl41uAiAahm71/lWq6xOsuY6wKBf8amX6E7t/uiyXG+pHhlgBaQ=="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.12_1636008271155_0.42072565635761827"},"_hasShrinkwrap":false},"0.10.13":{"name":"expo-updates","version":"0.10.13","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"4fa1b1ea7e2365343a87f4c102210f4b986a23c8","_id":"expo-updates@0.10.13","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-IrEIvitWtxJkxbcWQidUmHvZAn9sPIXQq7gJXuaeXAa7aNQEj6kK0KLHqD4IoPSHEJ2oYdonXEnePNgwCl8XwA==","shasum":"8e4eb506f7e78ed6fcd97bd4d18bce6f0637bf5b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.13.tgz","fileCount":190,"unpackedSize":643664,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD/XJsFmEZ2MYNBKq+DfpB7LUMGeskWXvHwgugxBKPlgAIhAIusug033Z36KkDe7vojdKb7FDNmaJkzF61adNt+fqLO"}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.13_1636074169889_0.984518546476012"},"_hasShrinkwrap":false},"0.10.14":{"name":"expo-updates","version":"0.10.14","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.7","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"8a45d6d743b91f608f0548d2ab02a3cef7434dcf","_id":"expo-updates@0.10.14","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-jC3W0aN0Lc/r6b0dtb/blD9OK34tzCxuj3Ssa/uvvPi3DO/0ZKSOlhru3/e3kDC6dZj4HtmAGIrkTKaHysVsjQ==","shasum":"4389c3d3184b06673f2fe7c45690d8bfe58c9a96","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.14.tgz","fileCount":190,"unpackedSize":644833,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE84CQjmG5ITiLmTSYs4ZrTADYQ2V0JTufx8B5EETndzAiEA06rZDYBX8YN5xwfvVnlFQO9Ipf0wOh5kNCY+51xD/rY="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.14_1636498100099_0.8570317495279125"},"_hasShrinkwrap":false},"0.10.15":{"name":"expo-updates","version":"0.10.15","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^5.0.9","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.1.84","expo-manifests":"~0.2.2","expo-modules-core":"~0.4.8","expo-structured-headers":"~2.0.0","expo-updates-interface":"~0.4.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"gitHead":"f93456e96091501a9b9f99246846cee29336a964","_id":"expo-updates@0.10.15","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-GHh1e0BwJY7aT+huGfneXpMhPKKkDIOBqCWyZDyTo7AWLj2C2ZCvgT2D9LWyl6v9WwxMEfO94RaYCQaayD/rfw==","shasum":"1fcfd78ff615307809ad38a3d37eaa67f7268282","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.10.15.tgz","fileCount":190,"unpackedSize":646561,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH4/cMIL2z197B4gzdlSlJURo2sQKD5vX0SPRx4kwv6JAiAdHcP5EliE1go+Hl3VnvOzesPf0H74+idK6kgRTFdXpQ=="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.10.15_1636664489300_0.3871122778573184"},"_hasShrinkwrap":false},"0.11.0":{"name":"expo-updates","version":"0.11.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"4ac89934e2acc4ef1fad59f338d9019fe2d92240","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.11.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-I1Y6NdiqbRjh0/aZ1nQy4dRMk0lOCtzUNzqxaTfQRS/tNoJY0sbOeDNFD+Cb+wUIFgue5iKa2yutypahyemkCw==","shasum":"755b21ce8afd8f84c20f83cbc943e6a4e246cfec","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.0.tgz","fileCount":208,"unpackedSize":719503,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhqo+8CRA9TVsSAnZWagAAznkP+gM4nfiN7ztc4vmj2t+z\n8MhhD2g+z2zGG/VZRaOIkg2Jvwv4em+mOrXkMYTdl8czGwEVUZ6Wlc7uY3t1\nM7AoIZZKeW3NpWV1rUxwkCHBtdaiHt+TtLm+ZsRXzse4hFnp2RBlQptFB8jW\nIvRCabaevdf/eNEGI/JSlcyZorkODeKKK8AVfcSJwTQbgYnHptesMsEve8Gy\nXc1m0e0XshB0YUmrXGbqu6yteuTMz0E0dWqabF0ep04d55qWIcgzgGmSXxnm\nO24Paz4oP4bnPuZBoGp0DkH6YQkege1nECzGE3TDR4EaWB3SyCMCKKykoCLS\nleedFqrF26EyqbwJa4/e/PvR7Y9KjWSIxK8v5q74AszyU6TAn+lHlVRMQ6j1\n9R6gDss2o2yzCLabwhkvt3zeEy7Q0P7Bkl2rpsBONk/i1yrteKMfGFx/gTzE\nMfYn4vDEK5u8EjsT56F3dRtRbju+op+c/GN1MmTLOP2/Hk21d4lTfqWjiZSI\n+q1XZwQE+nP84RHLNGVOONmN7kvrai0mSZddsiFMBnCS/ggP+Z7aVNChvzJA\nyIsM+suAamoAODR6io6tOOYB0RQBywk9GzkrK8gcO9AY6TEbkSkhewSNz/LT\nCcQMn4NUqRBVV9tIJJE6LzCtsVipunD2f+DjtUVnIAPc1kOvCgNdkshpLBrS\nzk5a\r\n=8LkA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDkxC/eokh0NKS3CEaMt7LyavQEDamAipFFHraSgt9RhQIgEzOQgWfOBX/Ub6Vaau9SZnVke15voETodCbMinve70Y="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.0_1638567868265_0.9024950624335262"},"_hasShrinkwrap":false},"0.11.1":{"name":"expo-updates","version":"0.11.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"cf8e7fde1b19e10dd9b74a8af0e9362ae8e14001","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.11.1","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-koojsMlI6GSjw+xlNILy3qFnu7thEkhXlogImm/YmIbbvafXVAPqkVREv+IRnJ5Ej2W700mNlOT4XP+XsZOW+Q==","shasum":"911469fe395361f40735551de0a470675a691046","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.1.tgz","fileCount":211,"unpackedSize":737406,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhsUX7CRA9TVsSAnZWagAAjIcP/0yGOiVIstq+TD81pnPZ\nrV+uPgghin/UXaHZ2W3LXZNuWn/KNjrRTOJUf3CKXbCnO3mIA+Tr3zn9p+fs\n+oopVUdjsF+GknATuKLSmFYaK+7lFrD8qoNHSSLw7Q05L2S6RqjkUAV6OYaJ\n0wQ4tlgaeKVBdRxa/15quemj8VAAaXOP1NLBuw8WiJfc0BbkgfwTkg786zAq\n2Cd5+b5jqfXm5NOE5RAtvlb+zwfCNRNyyFDzA82PKLlvdcDTzO0drqJCh9JU\njzanC8MbkqkmO/veIBsUl08t5dMxkcFTLa+4QD5ekCGEhWOgHGCA9SPQhLLr\nCorz3WyJ4yebPZN+jDOfjCSDyAd+KduZ9QgEh71Q40In0hzhQEC1U0We0nMT\nZymOtwl0p937JSvhnl3Al99/XVDgy2XHsEzrITh00d/fQY3gLskjdhVWMrg3\nWKEy2LzekUJUSy6HCrtnXSwRMGKSZVANoimZtyqT+to41UgHTqazBo4Did1M\nsv76t58Qlr+Wz/ItslLkMSUf6gq7pGD1pNjvx1SZuCgSt3a8Xr9HhghzSQih\nMb4YulnIuZ5QWy8Ej1PQtLA/b15SGEgw1fv8TCMzJ6g/AEmR7+RQimAoF/ph\nFrX4+x6W/pW8+nuv9H5C0Whk9NofpnPWSOd1rejKe9BCkjO67IpAqAJ5OFL7\nhw3s\r\n=jUIu\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC5mg7dBbVasOm9SwtxjyyoFGzLeObqzAgBxoM5iQBG3AiA6lmVSgI6be8v1VUmkibGZkBJtq4Ldb9hLoyTzlbBWOA=="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.1_1639007738812_0.44511513122467883"},"_hasShrinkwrap":false},"0.11.2-rc.0":{"name":"expo-updates","version":"0.11.2-rc.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"6563fa38a7d876e71cb4e516e050cbb17295e1eb","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.11.2-rc.0","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-anp9lA6og5rYG/22j+FGYdswwJMn/ObROEfdVen/O9xWg0bIDFLfYMmA0RCNgQWgnac20BKooFKUet9sXw+oLQ==","shasum":"8e10796f55e71a1df7ee38de863fde89749f542f","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.2-rc.0.tgz","fileCount":223,"unpackedSize":799127,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJht8vlCRA9TVsSAnZWagAAUGYP/i9D7+zlWP/TiQq/X41w\n4xcnu8t2Sa8ZMuj/9Zfi73zpXuXhAa8xy3tLuaGwRrZPZAd1LbMUQXVauhOk\nXdDmmEK5MPIyI0OvAzgDo853g1tsc9toOLdELvQO5tiziAgOFbFk6J19iTEf\nimlBsd1247m4SYPZxfSEX75HTubFe5Zj6A37/CJ0ppFzluAh7pkWBaq0cJfS\njQfdCgnvTUbPbONWhS7gRl9s9DrWL+JuQH6BAPDDggWVq4uQSBQf7PaRDq7C\nPiqshWWECihATMq1yi5OjuNEeMpgdmbOuUSVJkpv48HW+C/XClcg5Ptb+9r3\nmlYd1Pldr1xbuPqvVey+SuVc97pcTESY8Pgj+V91ERL0g01iFlLEYt9mkrGl\ntcKtX8K3Tkp1bRjLX616txJdDn37W8eXJN8F3od6lxhvWszHcSWYqJCzFwin\nfgLh33sEiRhrOgLszsNDjuX4tlJGSra/l0gWzA/AYE3NAW8c6T3fZHMyM6Qz\ngI8PQ+bDbdETyujTDB+5A2EsqmpFHpKBXv7+e0G1dArnDt8L2VZOZGhojuIX\nr6H/QqGFlCqqVjwTqEETsIOeNtRk1yNY5qrTVWgzfa1skaki4JnzPLuacSyp\n4ByswcgAWJ2AiFwnZdZtNPMeBMCs7yzCjpMDLMtJFoyVqfXt1IVzKpDXfsUm\ngTCM\r\n=01Pr\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCEZyazLtoe8SNyEZqhc61ntOzw73YQR3MtNvkOEdGcOwIgfFhg+DqPn3AbPOD4ejl3pRmyRdtW+hMrIvRTwDXBAyY="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.2-rc.0_1639435237428_0.6334415996380187"},"_hasShrinkwrap":false},"0.11.2":{"name":"expo-updates","version":"0.11.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"d74b30a7284af35cb07343293968fafbc19189b5","_id":"expo-updates@0.11.2","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-75zH4G2CXXdKdr2pozHBoHlP6ftchtTRNn5dtXqJIroEEYstTTP4DN5s3MR3mJN+D1rgPdx9+p4aUPAfrTsDPA==","shasum":"7b3bd1662a538232e03ee77d4e3e7fbac89de941","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.2.tgz","fileCount":223,"unpackedSize":799727,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhuWlNCRA9TVsSAnZWagAAbo4QAJ0F4B1tC4ZKJH3AehSv\nqXc8Sme4BFvk2MAQvDuaEJE5OMDMx/BKjHT5npjeODYT7ir1bCc9AIU95lvy\nxafNRbNHvmL7DHCHne+/kK/ZsJCd5PHj/JY55acCnv60hW0rVXW8ir99STkM\n4q4n0akS4qj4uPfgvm3ZmTJlsAceGHe5VX3kfb2p1p2YQTAxXCokS/QH7+NH\ny/AqUUCVpfhs49RsZHv+ncasPFSerqX4DRcI17lZSVAqWv7N4jcT2YHy8mTM\njYAs3nesEea8eQxl2MD/ODhNie8hjJX0gmGVPd8DY19Vyotp5qobjM1YWZMz\n0fMSTqAWzLKnSIp974jxt2hvFzXH4F9oYJGMuuqe3RlCyre6q35z4Sq0jLCG\nOkRsc0LnK6PcwfRTdJQjtOfHbrqJVJ7Ukm7uQvL7nNnpOKTafVMTVUE8ZaUc\naPyrCdazQDejP+nl8pqrNb1MoAvEwfGQ5jB4b24NC70KBmMx8x5jWjNMZ7gN\n8/p89nackLTlByzTyxbRVI7gZY6dTgkF5hNnaIa6Ky4CuZAupGPJZ4Qaj0f2\nY4BI5XnauucWEJ+jm3gKlNz9WVkCCOgMJG0BV4WK7ULBs4zpcUfzJRNUOo1E\nJKQxL2YNk8K5mE5t57TKpxKzniSS8kP8O24Tz6+mNfVFyK+0xHH6rmQ2d2AE\npXX7\r\n=cbfY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAI09VfnGL8oMZIxMIkrGrCnZPCTaFrl/kYLWUGaY/6wAiBfxiLhI8mHNehYDRMwDsasraAwofEJqg+tjvn9FcRwKA=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.2_1639541069237_0.9354588014671108"},"_hasShrinkwrap":false},"0.11.3":{"name":"expo-updates","version":"0.11.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"5145f283481b62ea2a12cc98c308ca9b9aef3899","_id":"expo-updates@0.11.3","_nodeVersion":"16.7.0","_npmVersion":"7.20.3","dist":{"integrity":"sha512-W8oXaH0MKaH5ZLszupnm904A4epBjgvjPEfuIjy3JybTU+JC8319gqsOZ7nWBxZZck67utxHAlyJ9Ks/CcqFmA==","shasum":"5dcd27ea7de47b6b222c525541a2e0dc91d6191e","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.3.tgz","fileCount":223,"unpackedSize":800268,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhwv6DCRA9TVsSAnZWagAA23oP/iHhqgr1qtrBLlqIW+98\ntxCCqWIPHBN6Y0gkJ7wZ8BFZ88sCHWgnGwNfmOd9YQ4KLimK2LLueuxWe/nE\nUpbpUWpExB61HgAi2m3+6DqPrg1EJwUWyCP4IURghLKZaNGV3zDPY3yTE0LQ\nOq+cyeAjsQiGHMRq/KidqN3xXQT6HZ99aLa5Ua9goQkAHH5cNqtyJonKdz12\n0kx6dEknwPQu7KqzlZsu1yf7k/sMoHuUiYvLFJXsYOmSLbseyJ9Kt2Q+NU4p\nbd3RCzTWx/E+9n6IXrQgZuRwQpL08MlfKqjN6lWXnV7KwcRCPO9/6+VFh+ZO\nVxI/We7Qooihmspp7qmYy9hCQvdEBoDwq4wdlZswcZ12RNnAUkkYaDQ6yNcv\nSYJ0w7HsfXGtDDDQIP0/byNJdFZff4WZ07N9P9pwRgTV/GBnlWJyPMQAgprh\njgMJRyrIqxnnRJyzFSvfLRiCLD78yn7Ss4X9HwqdBbV0yJu3YEASvHbVTmZd\n/nCRntdBeaCI5fEa13yZdrE48Y+D3w1zDw0W9XoMfGoQ8XH0hUTbD6AIX8Dj\neHwCbeos+nQJiUW17KQXAB8xESWAMQYttj/U9xwaz8ZB1671bupX3ujYRkko\nVisfvU/w7dO1VyWyvPJ7WoXnLDMHLaT5mGXxbF72VwR0ls/FLbtWAqcB48w1\n5dmm\r\n=V3sH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzhltOEChFAfjMdgcpJLB1dsDFzO3F/q1KvEC2PmSuKgIgfa2ZOu+rssmTdyfVfnqAPandCKU6WQnfPnou61RvZjo="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.3_1640169090876_0.05668402786797988"},"_hasShrinkwrap":false},"0.11.4":{"name":"expo-updates","version":"0.11.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"b4c5971e76728660c1b851da17ec049a343deb40","_id":"expo-updates@0.11.4","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-4szF44gK2mqILL7XSpv1V6fjs8FK+EXv6+vGMwzUa9SYWI1XliP/mAMGfJOYZkJlcegX/AOmmF7fSsIt++qciQ==","shasum":"201c67406d541b80081819740e216ba8cc2fa85d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.4.tgz","fileCount":223,"unpackedSize":801518,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh362uCRA9TVsSAnZWagAArisP/15ygg5a4RopkE5/k1V/\ncyL8hPKKlIdtlW2obl8g2b09IIvfAjtwDGj0nsN1Y0DQpFoYFTkqFVp2RYq6\nvWyFiYPyq0zNXHzbiXNEaI+28pUEmd22ETNckTi+26iT1LFE2D3KV65Jod4p\nFzIcmjSN+8JiKrieOvrgvWpn0HMQxM/InErH7HgFlHljMECUvXedOBVhJPTy\nQJFISvNePVfkYL7zRbF4uqJDVLIifQW33ZxOjmOujF20ejwx3RsnFqtlUSXQ\nMDA6hE/JGkf+XlC8OI92QjtO4A4kw0zfqZfitZiRIucZGNVbCZwrtPnExYXj\nVc0GTl9uNKRb/SX2F6rkxMozYeFUxPgiM7PCQQso4A2yo1XCqRcuKxNgGeHG\nsYWPJUEpko9hO+UFvlx+BEAsX4cDqsi2IVrEaTgGzWF1TfcLnXbq/Tqca1yt\n61tS9su9K79oioBqb7YxQz3KQbHPbjWtx7Jw745aQgXwNPzziQZYfehdblaa\n5KA+CDzmiZMrP9nlwisBN/WTu/o6BDP2G9Wt2TvJlMxxgWy0n0a5Yrbucyrm\nAK5bYdiUgCa77Ps3lHrUgqtbpFz2oVkIs6PHv/BwF7rwxnz2YFdz5xaQWGoD\ntkYtifT2/8sYxkhpTqm0oK+P8WyfXx2tdasB/+/LrvC6JCFoxRHV/NPiVNm9\n5PvW\r\n=NtRb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD2/PuEx4Hr+IQl7O4QDz3WwwNNa9Mg7W9TYGO3pwKc5wIge1r/ZD2OQjNSMO3sK/w+NDjGI+qcOjH5yPxkymLfUH0="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.4_1642048941740_0.2444579419427626"},"_hasShrinkwrap":false},"0.11.5":{"name":"expo-updates","version":"0.11.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"693e58494ed4753b55d3f379b1da1cf796cdf4e3","_id":"expo-updates@0.11.5","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-mG6IMlwg+OSnZFZo8U4pk72lDEbTppNjCnCKJdNtTLz0qRoGW8jcSjmNg6Se5uOHe2DAV/LMUR0t/m7hnoaOfQ==","shasum":"a62349a954c97032646182092e6d3df480e3a7e3","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.5.tgz","fileCount":223,"unpackedSize":802673,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh6T69CRA9TVsSAnZWagAAtKAP/3Hr1VpdWZ2hBNVPxGM/\ntZ/UWUS8e3KPbwizuqcnOsYQMA0osat+EXGF9R06wkf/TfkWf2dvXT4sGmYP\nNlpTRlR2ZrohoAkj00ekNQkbtxC6oKkrrLbAKJQ/vUuZ0kDtp+8TIc9fKBdk\noQA6LiizMNs6kP2NuvMoz4Pu4++GW9YkJJCjT9jtFLM0sHwsBgoI2qL9j87j\n4VvA3VJ32yHe3O7VlMw0mYfbvQeKSusPMwr+S+fjXBS64Y37tCJFDHleZ94t\nGVcY+g/9591Hh836SU8B1geXIPZlQhlyXrvYu2+Y2vsAN9lY0DDfFP4kbWy6\nIPU+YLg0V6pLSNyde+9FFhUUBHzJ2gjT5ugfUT3X+hw/LWyIC3InaQqjlxbM\n39Ik28zD6+w3/WvWafvHXqZ+nrqtt5GInbXf1WdhYocJJleEEXA2MRpHHilf\nZtUxX0MXEXlHXtA4N0ZXgYzV0RcLm/NA+7yZcXFpKEHLjQJs/+5yi2XnFHWO\ntFKiFgCqBQ8nTSdF+KTr8SUB2+jAvGSvj2vV1bmrSNvZhPnt8Naww8zvxSoM\n87bkYfR6ZdjWK+VKN6dPIbPgOHQZMerpr3tJP39HI8AKKF5/T02OjFpqPAKq\nd+LGzq5L+Suol/tDUAH/4GafPZbMKxDhHzWmX+gPedvJdZ0iDHykZ9e7vEFF\n4BTc\r\n=J3Z8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBKaxqBR/p7r4l9GOMgPLa7qD1Iq/XPUfYYmWsydQ6Y8AiEAp0ZdmUjlx1wpcOE/KOajyEt5TC/N/ffmtCtDkCxrQRI="}]},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.5_1642675901340_0.5555599032433856"},"_hasShrinkwrap":false},"0.11.6":{"name":"expo-updates","version":"0.11.6","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"ba24eba18bf4f4d4b0d54828992d81a2bb18246a","_id":"expo-updates@0.11.6","_nodeVersion":"16.13.1","_npmVersion":"8.1.2","dist":{"integrity":"sha512-nTzEc/z0/QHwu6gJhYSh5TWDSzNLO9bmtP4aQzStfqT8RRoh1bYRomszxjc7e3CsZT8xrG88XKlZ4iKL6zHLoQ==","shasum":"5541f2f791d51cd51c4a37a3e241c8d167226d2d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.6.tgz","fileCount":223,"unpackedSize":803218,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh+YkvCRA9TVsSAnZWagAAYf8P/1Fq+Y0SmzgCgIs6Ngaz\ndTYw85Cihh31wW9Uzd+agO55b+5KiQkezmAedsbcDwjsRMK+jS/U8pvHKLM1\n72sffcGtBwSJp7iVE1/kKs309b559t7hP2Jck7gYLAxNExnGEy9hFDOCIoO+\nnnd2CieVzntj1PpXUnSIVlSIMlskMkXlATzs6F9woxgtziY8SwNbHfq/O77t\nXgrwHtetN1syvkWrJj2OGid/7JYB/nzVsOUf5ZG6uJNVFl5rDdNSGNph8jXK\n+cvb/ctIF8tZjRgVSQJRlWs9+j1lr+7J6OPfqv0yzVHgX11BF4TZgd9cpmEK\nodrEaJ4G6FglRF+IoSR//iCf+2Is4RaVkUIi8Nmx4C0mw3xo8XsJC0bLhjkT\ngDYfpASF6nH2RBHxrA8iibgtwIbYZ0VtfxaD7yJZoJRZPt5Wtr/8kJUGOTM2\n7wdMqAfYkveCjhZ9fPZi1kcQzevUHKRzgcYH4BmflStZ0Lhp7qzloD8iPEW1\n51J7EGoPqN1aft8iflkILr1AWbJytdC6L1lce2H92YCBPYlDLzdGX+pBDkOz\nHsHHxZcUVysRABcy3bj+y5CPQduMCzBvvYbA/ifgLBE/exPDJtnM+4MCovnb\nRe7ObJczmY0hPX0jwTRQfsj/o//dQMZQHLJf8xIuajQ9gAEk7ChXg4cKH0f3\nKBRE\r\n=T6eM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCSeOOBoSclB+hb/V+8qVGJi1D9YC443Qu81O1soos0YwIgMYqsRTbRu1azsxWgyv5V8vaEKj2VDuU6kOkkoBlL0DI="}]},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"jkhales","email":"jonathan@expo.io"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.6_1643743535429_0.5701452765528219"},"_hasShrinkwrap":false},"0.11.7":{"name":"expo-updates","version":"0.11.7","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"scripts":{"build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/config":"^6.0.6","@expo/config-plugins":"^4.0.2","@expo/metro-config":"~0.2.6","expo-manifests":"~0.2.2","expo-structured-headers":"~2.1.0","expo-updates-interface":"~0.5.0","fbemitter":"^2.1.1","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"expo-module-scripts":"^2.0.0","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"ed88b61f12b163f5e5ad127c1ec090d8d3b3ae37","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the master branch](https://github.com/expo/expo/blob/master/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/master/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.io/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.io/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), or `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches).\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.11.7","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-zmteCFOBj2OtDOZO5eGgFHR4EXZvFUv5DM56aMkZ6+PE/fo+8ZjNZLxkQWD33GXmXs/9jLCLKXPj2+6kCJvyhg==","shasum":"c267ce8818d42a997d49a1e24b11b4887a2fb17b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.11.7.tgz","fileCount":223,"unpackedSize":805728,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiJoTHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoS6w//auLqssjvvxURcG2JISwgHxvxV0miHDf6vYY6zu/iAar5HIn3\r\nuIz1QPak/9k2j7Z5DMsQO47YC4FJyK/U8dWYJRCZ0FMqkd+kAjnLIDwcgYBO\r\nBwXmMiRR1FD+QF/riATbTIyWX3BkzvArKZsjX+2vPj9f8RerQx7xZkNHXQrx\r\nJ/4PgvAVd2cxb+usIbRfAt7EP2emDMj4sWgtOANUnkAM7YzKg9ZgDmRasqXt\r\nVCq2MLfjP8bgwtvWsZRm/Chcqq8j4TDa6ksqB6E7BrLbpbscSnh8233641gC\r\niPxA4GeBxLi8eaUikP3Y76w3baW4FhXuVqGmwlbo/kkKxPKeZQRc8KTlyKIA\r\nQpT3MLKe9das6ZKyDQaAMdukJvU0V29SGc8LGxc9DMTaKOwFgvN6WV7agZdU\r\nDu5sP8kQXQzMOuGKryjU/sy1Sraq6uy0TTzuCO/7N6mlYaehRXBs2eOgJhPn\r\n3rHPqZ1HaPWs+wRxR5R/KztosTrAZdoT0HWyNx/lQj+CjVZjhHHTxajnjQGQ\r\nLBSj9+M6C6b9xQsTCVJs8wEfSJqan7u5CTZF0lsJvnShCPBz0zuiLEYavZpM\r\nmC/Qs/C95r5OxFEva91LKgj7i/+W2M/dACRXPw4QBYPIJo2vAWDfHHko7oL9\r\nzTOyObyc6gUZ8HE5lOieMHvcsCQFnZrDdPM=\r\n=JjsS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEk74rzUtG6OxSmBz1PNx3bfBh5SE38cmv3eLhkpV+JjAiBfyYH2GCeLvS9Eijv/ssv0xa43VblNg3Z/yGZ7ZiR+wQ=="}]},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"charliecruzan","email":"charliecruzan@gmail.com"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.11.7_1646691527506_0.10863922125266301"},"_hasShrinkwrap":false},"0.12.0":{"name":"expo-updates","version":"0.12.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"^6.0.14","@expo/config-plugins":"^4.0.14","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"22dce752354bb429c84851bc4389abe47a766b1f","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.12.0","_nodeVersion":"16.0.0","_npmVersion":"6.14.15","dist":{"integrity":"sha512-Jb16nb0HE2bpDs8gcxkBiUxP/40J+RHI35XatZI0crrVaQLvXoleLPoCdd18TLgSbxLST05arTLgva5LNx2hTg==","shasum":"e3e4adbf0042a8aa84372c290af2f90621dc8b77","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.12.0.tgz","fileCount":308,"unpackedSize":1020228,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCm/THkwBE6yWSJa7Pclacsubk49WX5OyhUDZUVvrd1UQIgbeHdY0gVlPmjae+CVqtGkTFV234niEbVmyP/1sP8ybI="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiXYA1ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpNGQ/+L/cS5hJcdsApIVGph05C99lKowBMcsPARYYR0rvm7FsrQNvg\r\nhGc8MplMdynzQQj+efL4B4n9lu8K1rFiqwfDiNSrbBB+h5ah+G/03iSZAzcL\r\nFR/6nXmCXdD9AiAhlRAvnW0aFa00/KFapcpXkw74gcpfYf/fkXg2/Ma9oYzh\r\n+GQxEJ7wJG08xGFdiKm5IBAzmwMQCBEpcNKIMVBowRIjuENeoxy1MBvjcnZ6\r\n2QXOY7eN0KrcYZ2q0ODk/S+za1u7O1DHc7HikCatDwlljJdf5jujH3+VLQi5\r\n6aN0pVmVrRX6qV4aUSdCRIUq5+eg7Olh9apyWGZm25EgPrSTRHvRqXZnwBg2\r\nGkcWtUF85ye20/oA7dXmvpGMpN1d2+RWQxYhpVP2VGkFjbFAKHuB7McLdgjC\r\ntyeenjE3UAz5BF/wjUINjSUG+WjFHKQK8VWiznWky2jd5Yn2qWbo8bS5N3bw\r\nAuyK1sDlg60Owjlp/QKMG5QRSb52HtehbX/O42HIXDDwQL/doJllrzUkh/V/\r\nr3rmJxmtlQ2db73W0DakV5G+xf0/NKCv3Egh1Zo61gHxHyZoiPheHBB4UW0m\r\nH1qQK2VvXeEImECZj01cXnLHIxyMsJUKtDWpTo3goXdhq0PWHRI2ny4mMiGd\r\nkJ+H1UHewTg0Ztq0u6+mfijEiIkSJ97ukVc=\r\n=Z3Kt\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.12.0_1650294837187_0.5954260382349532"},"_hasShrinkwrap":false},"0.13.0":{"name":"expo-updates","version":"0.13.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"^6.0.14","@expo/config-plugins":"^4.0.14","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"0f796e10a2b2f258c40f9d56aa141c372cd63fc1","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.13.0","_nodeVersion":"16.3.0","_npmVersion":"6.14.16","dist":{"integrity":"sha512-E5yGSKmWFvtA6RV+hTFVzW6JzysYu+ea2vi2NQXq1/dcZ4iZ6nsVcZlQ5ssDvR/rEycXSb9h/SLYAM4aY7JfhQ==","shasum":"b5de3b3a950c82cd73033f794115eead8281491f","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.13.0.tgz","fileCount":308,"unpackedSize":1028245,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDAChjcQoiRA8Ff7meMrCf1proCz/8DoBdO957+VpcTFAIge9eCj7+c45ccpunWXjTqPT8FkaJOch5Rvvh1SnHhaew="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiYWZ5ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqPlg//Qla4ged8d2oJJ6MSE39COL0lbtZkxokgltVabTe+o46RAGJP\r\nfy9PAkEHGlQ7MBo333eApKvRw0ZoyM2gxt5A5HIzVCwd5L7qCw9b6Bu11yS3\r\nyQyowRDIpzIQe963d7UmlHK0w1/uKYSWj0yzO3Xc42sK2O/D551UU9tZE3FQ\r\nfDtaxxExl/C5h3+CI3SAnp3s6f5C+VJGDJnSSGOkMwXc782k1rPUEycNTb9I\r\nYej3Ojcncg2XVDZM7Dx3O2wsGCc/DOOEkeNonVqqXiGxFLjmqUBxT2EO7idm\r\n/CoCCvuVS3BE76ZwdE8EM0c8C/ACNokVMUfoATbsbdds+MdXZX5eDmxvtvbE\r\n1wX/w1WjoqBFGY4Rd/kxR/XHFse4atGNJLMOTeISxl1viqm2ZgwHHnB3SC4/\r\nSQCN0PUk09Ymx6HadJ75Vx0mwKja9lnm3Dx25+If0hA0joVh0+e2wXn9VsbF\r\nMAm0Y+V31v1o8DNeYUNB7aFvAHQXEoDWWGl2uNvOi4j8rzoCll/m6ZHVFKp7\r\nNB6kGETTEBSNXO9wNJ3u+r381Fy/AqUl+BafXJUb79ewwSjHyvW14wnTCxeG\r\niWVq+O9Nc0DSimwEbGTN0gELybq69k+UrKo5gTsY4ppsREeFjtTiA9qPQIhT\r\nyG0jT4xEOeuQD9QMJANQECqZZZBqsz0MQpE=\r\n=oPJZ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.13.0_1650550392945_0.9269639689737261"},"_hasShrinkwrap":false},"0.13.1":{"name":"expo-updates","version":"0.13.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"^6.0.14","@expo/config-plugins":"^4.0.14","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"b9d655c1bed682ad8919e071dd923968773f05b5","_id":"expo-updates@0.13.1","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-6GTqgAco3da/rk0/AvDRFmrWxEIxlmIs7vvoCWWxyvifLBlQAaU08+AdZH5RwdN3aUaIep70pnqlc67xe/y0og==","shasum":"ffed4216eda6afbc15f06399115a5b9e649102a6","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.13.1.tgz","fileCount":308,"unpackedSize":1028718,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZBaG9uWhBTXgVnsBdduePzuv1rzDzZBsluNZPLCNMfgIgFqVoBFqX7NpWAkT8slmUV3qwQw7cqXFVYpUudWyjLyY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJidCFgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp5vRAAo8Uwa0US5khG//aEPH9GxSoux7QlnaPsvmKJv3mmrbu9ytz9\r\nIZ824KbhTIxB9Bugtb+fD9PyLCy+1SuvD4TA8YqwtwM58enNu+f0sPqoQHhO\r\nnlLj0TZDgjZEq70knX/1ENhiTK4Zo80RBhaw7OQYc/KThrwG0mvtp5IWW8HR\r\nz3ftHhadrErLKxgWTUuwHfypJJTZUN4WPXrZ1ieMpJcUWcpWkeJI8EC0Vdmc\r\nyV+whrTf9GIHFr7jb6asviLjztNCCQLPqyGEKwPPmJzXBwKt7MnPOfoYOcmC\r\nMBh7uSWpesclmT2ECrVpnZ6/DZ1ErXeJIV+OYl+fp7oIQsXxhGUaqXy9r6RG\r\ni/FGzFOvcfXj6tqQYXGfv1qft9WnHA3n1L00h5qQ+k2FbEZWVq5o1Dkhr4MI\r\nASgL8ENYN8ygE3Yf4Zb994++9y9he/UK7TrjBcp4LcN0sT30LRZrrkDxkNHm\r\nD0qCb4p1Ft3TlpNxjueoc5JcJP+3RCOXaFldmH+pBAej82u9rsYtP9zIuUSH\r\ncBAKP0XUL1KdKH/dPMj7WxQ4RnEHeI19oYvI1tOQKcVBz2IxglyUMQ3F0P59\r\n9oEFPsXd41NVSA3wAjLVH1MAu8pZ8cH40mMdSqow+Aq9HYOnZYSwisXlZCsn\r\nxePR2NVdPSFnsIXWDiHyQYvGO5CCFduZMtE=\r\n=rpM6\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.13.1_1651777887764_0.8853135658711018"},"_hasShrinkwrap":false},"0.13.2":{"name":"expo-updates","version":"0.13.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"^6.0.14","@expo/config-plugins":"^4.0.14","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"8c27606412dae179402107417aa11a88530c2251","_id":"expo-updates@0.13.2","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-2ZthmyxYuN/c71y2oLNz9fdVXLf7ggxAw3Tfy+kwtGOTKNyOf/YoG+SwX7a0v+jZTJnuorEj5FuNf3wrniQ7+w==","shasum":"c96d664d8a97eb3af6841e46a137962b8bf06361","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.13.2.tgz","fileCount":308,"unpackedSize":1029251,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEnLR2NdOxTwm+27xLRHOK2khwKDOx+hdfwGzRSsY7vCAiEAytpUEjK2QJvlREGFVBgyvY+ZQHV/eMJ4Zbbyb7JFXfI="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJimVPaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrJ1g/7BFXKGDJdaCjmvjxMwMCaOkW8AubYc8ID0Uoe7h4MD55qSpT0\r\nP5oINMGtGTKazszphHDg0eaNmVKsqhpB8x8G7YF0d4Na2GwVJbRDS/Npghl2\r\nVc4Lsp2wH6FvkPezRpY+f8h5IxTuEwdCmvfHDsbaMcg7PiS7oGMbDIpPioLA\r\nQzSADqNe2Cm4Je2X+Yqp0DGAtrT0DpBVvyxLMb9g04ysOzBJc8zT9vUAndw8\r\n2/Xt5USQdTM2wqhgBqzZzAsy5p5/0gmX2XxgOSADcY9xnY8A4o/cnr5sjGRq\r\nUj5wNKB6trQohfpB5jaTgH6i+gaOEXXW+Gggx7I4HxWRbbzAQ4BTAoW+kyxu\r\nVmQcaPw20DU1hVlmNXxkIQFrnXCQBzjDbjzeA1QZ1hMXj/1Sv9f0IdDWYYNS\r\ntstmUYsJQ+XfyJq3yFngNAdzkwEm8eJ3jLdfrcFKNFugE9euVrqTng7xjXdK\r\nMPlynCkGVUXWLquNSLhMcNU2+6Fehzf4VL17VfoX3EvPpaZyz364NBlwxZFn\r\n8TClq7VqmPijGgbl06jfes3lgZDbGbrAPMRtkhPZGhoY4pafqNeXp+iPLWr6\r\n0A1IVesJFEpn0KoD1vBk0fva6eBhM6RK1q1zlLO6+uF0+3nHB4rpfhY9hHT9\r\n2rhUjQWMIhE6b1WyugpEPfyy/a6DqJAdbtA=\r\n=lq9K\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.13.2_1654215641759_0.9508428315209747"},"_hasShrinkwrap":false},"0.13.3":{"name":"expo-updates","version":"0.13.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"^6.0.14","@expo/config-plugins":"^4.0.14","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"6c7bf5038ccdfbe3e881f86d63ab92b8314ec2c1","_id":"expo-updates@0.13.3","_nodeVersion":"16.10.0","_npmVersion":"7.24.0","dist":{"integrity":"sha512-aVO3Ha+vRGnkJbqlJMNoQn/p31DMnhZSGUs977ixhb0ff2xs530vf4/zVi4s635lkwuCd23++oga44Z4quKV/w==","shasum":"1e55ba2682de4633f2d1d0424078873868821361","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.13.3.tgz","fileCount":308,"unpackedSize":1029647,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGillHS6eQZf0g9hnvNQ3Ib8ZGDG0eunZHT6zOm00ybYAiEAhicpZLU9ELEsiCwf3cFmePL2q7V9qmoIfdXDJRxnl6Q="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJix1KTACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrQ/w/9G8Eo/5LCULAwVs9IvmrpSQ2z/Vk50achgu6lYivES3ptPQS7\r\n+Y4nb9gqxchpuuJnynSKHWHXaGpnn7+zSHHzX1j3FmDS5ljNxC7q7I3O5jp2\r\nqmRb52FuOq4dZgDhxRqW93vC0/wxVxcfcDqbIYePb3Q6zfz5eqqXJ4yf37Ug\r\naKVxDl4I+j/E/f/XDaxU+42+TRW/P3y+Iqb+EGIIDDv8zFxXVLtiYXtYizUb\r\n1A4RbM/2sHlMKN0Ve8haB+KYlLIHzz38gP0Xj3M3lX7Dh7DTzbik6KMmmESE\r\nn6Uq831UsH7/y7780oGRMrOoaPm29eg979ddnPxaAMvd35wgSGa4T1h32A1v\r\nJL25jpiHmNUV02n6gi0u/UmwsK8ZE2YQr+tF0OOkQIBj9AmQj9baR/sN1QGs\r\ny0SZ273GQgj6+9WIklQzGmLcoOFbZyQzOA1Q1LjfLeArUFHsPArHk5ADPJEB\r\n/Cw6sMjFSayT1zBnKWJNAGgNZd8vq8jYJqKofeF71L6hQgWyl6IzRPWfs6G9\r\nsSSbUTvD0oDjSpJfcJP/7E8NotUjTO9HMVGndDGKWx186n8UCwNCcY7NLJAQ\r\nKmbePpkoJiXdh0K9UDjM35RTROraXBW2r1QKDC5m8WNRUPi7EG7aGirUlq3n\r\nqbFULG0YynIiWT+xJxN3fV3GeIXQFfle1J0=\r\n=JLro\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"esamelson","email":"eric@expo.io"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.13.3_1657229971016_0.7905632433753702"},"_hasShrinkwrap":false},"0.14.0":{"name":"expo-updates","version":"0.14.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~6.0.24","@expo/config-plugins":"~5.0.0","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"6e131f2da851a47c3a24eb3d6fc971a1a7822086","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.14.0","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-YpvaTiJs1Uf28XBYDxZTwQNVOMonMuSB8opTtSe2ABBM+bldr4nKU66FQLN8mJlvaJbHvT+7QKRvJlhuNWyJvg==","shasum":"15b9fa5c7400f7cb3c6d6f51e052c7bc7a3c8b6a","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.0.tgz","fileCount":309,"unpackedSize":1038986,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCV8lGccSQIhzftfzxKhNVaHBE3DP5cxzimDJ0zK6qDeQIhANsnK5NprlFKteissflyvDDNzMS7iEPN7rIypKF1rYWE"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJix2qkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr84A/7BiYgc+a1VIVB24xztgKttEcFjjBUyyvIXsPACbDA/ovMZqu7\r\nsbGtNDR95Sgqcw5eNN8/xFqo4TRon7vgSAJPrY+usOowkGj4CecRYgdiJMPe\r\nmmx7NA4mGleu+TsRHq5RefpSZdIZ/Uz+B2vXEhEmlJJu4f+M3xiFyRPl0iIt\r\nQGSFPi3u+j91kGk1h35GoxN1L7nzBR8GFDRcUNy6sjCCOJPoiAAnPUX2LVxN\r\nzofiV/3yQgFUkNhnSa7gkMm6zL9Syn1zkr628eptTP+3mxh5r+mdLLLl0U4n\r\nQaoHKTFV5Ggm6toiUTyg26rER/RGnIc+V+vs3eCvLkPgvUynyxaMgKJlPpuW\r\n1ZmqNbJH7tHG0n5P8RpDMdDO8Uh/rJVsDiGuI0pXeTzuOjlO3hAQ+9MSRL8f\r\n4Omfk/FzNLWiE9cU3dE2vjfFk07s5DL12rGFCRIHKU3A7H2N5k3EBwtGznC9\r\n4N+mClhp2nbyK/kccCbFIjZ643dwjW+t5WJE/90B8xboefFu1DKaMwwARbZt\r\nMQ5ec7VHqJOecmuzq45wTO8KKquWo81Q4xm9J1ly6jocD40QjKStypwXrmfX\r\n3uN987IPsq+TSn5gqMt81TTCTFGn2UoZhFXa+o/Mx3jjByRh0d5ch1qK8wpj\r\nt56GqjNypX3zBtqhTvkA8PA4wz+nxuIfv3A=\r\n=hefO\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.0_1657236132458_0.3669605780953995"},"_hasShrinkwrap":false},"0.14.1":{"name":"expo-updates","version":"0.14.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.0","@expo/config-plugins":"~5.0.0","@expo/metro-config":"~0.3.7","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"8151bf48e683a50e942ef213f7978b35c41f5e11","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.14.1","_nodeVersion":"16.13.0","_npmVersion":"8.1.0","dist":{"integrity":"sha512-gnl/0+IuJ+UB+tOOG0sW88RMBVA+aDNvhemFiB40LCRqsnv2O9jxtDUGZdYIv1AWEB7+AydyoBQj+FtUhWYXxA==","shasum":"8a12520576d8457449c54a9bb551a7a7212da578","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.1.tgz","fileCount":309,"unpackedSize":1039071,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDrWAS36gvDrm4gSqFmWEbOyriMB7fMftBcrpTpXoiEOAIhAPwx+oUjFJRm6ofKlJavIiYTR97iFmB1FwDxtKxUkHyG"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJizJ+lACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmoc/RAAmSDqtZzQak1xQKBAMbmI28lAQGPJ/9gpe+qp8A7zrLOhD8Fw\r\nRmsKJ7kMxJnp2MsRIQwE31Jfu+Sg9dUYIqbW+74fnNRHzF+gDk7qWBCnutqX\r\n+7nJhEXcBfvsqAV/vKvcujENHH0FPvsUnCtZLs3vpIusxBok68TrdF6assTl\r\nyq+EX/AgjdFI/+dN8bFYGaqjRsgFTp1KmPo6OiDPW+QTSKQ0hs2eIM+UzfBc\r\nHGP63xcviBZYIdEiWrYBaWWGJXQ3xdYPsBHaL+sMZD7dWdnwL5W38PK3Qi8g\r\nOFi2qvfvvWb2+T0zer4jywHgNVFD8ijZ2XIrpzpIuwH92M2/RQIEJwx7Q5Uy\r\nj7hj3U7frA4aFCYITshwPKkGp16YKVzGfh7Ybc8oyvSUj/fEEYwScCwuXCjg\r\nUa5dQQlwJOX3ZYKnpHvu4pMtBnUc+ODBK+PCCoJnq8ERIhWSQGyGKL3UaNfk\r\n4b8JDNZaLh8KJWkwsxs9wn5v2Cry+AEl9yM00McBXMhXyxXctCyw6CUVq91q\r\n6VCxwcF2ahw7vGJx1RE3dzWF/Yo9rTJRKV1iYSAlykn3XpUyga3Hv9euQId6\r\nPzAKEhh7x8PvhIqUpF1RzbQv398URVI4uzWdlzcnHbYh0wYkvA4zWHKL6p77\r\n7iut3WT6zxCmXsoJuH4KYM7+eMyNfcu1BCg=\r\n=tTxX\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.1_1657577380944_0.35065102710154705"},"_hasShrinkwrap":false},"0.14.2":{"name":"expo-updates","version":"0.14.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.0","@expo/config-plugins":"~5.0.0","@expo/metro-config":"~0.3.18","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"c6678c65b68e45062d49a2deea8e822f69388278","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.14.2","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","dist":{"integrity":"sha512-Cx8UaJg270D5uXs22tIkOdcPUjPJUgpMsicnF/WG8VxpirmxzDU2sumg+GCu64M14lF6uqHC0jI8x1ntTYkX/g==","shasum":"cae6712ebf712af907a07460367a11cc5645105f","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.2.tgz","fileCount":309,"unpackedSize":1039158,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC+9/jpmIDnkumWieTClFFdMjAFKbhCaXNFArMbe13HMAiEA903oeO01na4RmwfogkcQwb6usxq+y63lC7aQwB98API="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi0vvQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqTeQ//f4bhmYvlw4NAHh4zlzofmVVxFVPY+bBx0qEIYb2mTfnGlteF\r\nht+vJmFgfD8rRgJgE21I+XSXf5cFoFU+xAlJygj9u+ww+QWtpozBNYpejklu\r\nziDILWHKTwZ/3zrR2aJbHd40x1uLaVI9I8e+5PIt4z+P/j6eEJRDHbsAYf/6\r\nt1Se8+LUWi5yfMZKwu7wAVIxEhaXTvSZ6lGQt6f3IyG1ptBdV6MxXfQkpLKx\r\neGwGF04tEBrugKqqn2MPurc70pQj2qLW2SD1bAx0P9qo84TxYd1UwHJVVZvW\r\n1Sd436GVpXMzLsWiqBFn0hDvON4dHpH9UC27e8QIwZOXE84CNoksjTVJy+ZV\r\n2F81Z7RG3B82ocnTmJliFQCbysJwC6iDApThh0IZwc8bd5Vk5CJXmQjq65js\r\nIwRKhsBOJzTGCqXshGn4RTz2GWrZQuBo7zs4Nybeg1sriIlBVmfMO1SQk1MO\r\nTEr8AQHEYq2RpjOe1agadGQhub5PnNDhoskiyrJ3ieLAX9dPK5W/fvOj6XBV\r\n+ms16XSCXcgzJk8oipimJ3m0nWUA+7Ur71Fj5EtdcGArHcbENRLBcQ25VuvP\r\nAReg7UBECq5+bmygc0zTXCcpRjIMEQm+AuI5NRY3NwQpY601YMWJFAigmPVW\r\n0LkbR9FQisu+Co3sgjLfrMXaRZyRttOPzHE=\r\n=E9i7\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.2_1657994191929_0.417047706650405"},"_hasShrinkwrap":false},"0.14.3":{"name":"expo-updates","version":"0.14.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.0","@expo/config-plugins":"~5.0.0","@expo/metro-config":"~0.3.18","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"066000e04629874e1c67f2b3b9a38af805d9831c","_id":"expo-updates@0.14.3","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-WmtwHv3xiqlHDVseTANjj0L0PbMd5v+rcud0I5E5Vd1ou14ADgfCrr9c3qheDyj3TKqpA/9+JY9Ls3iq8G1SjQ==","shasum":"c0e5afe824e8f4a14aefddac97afe152cfa00358","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.3.tgz","fileCount":309,"unpackedSize":1038428,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDH0SGUD1O8IQ/pu2tBdjCxsP19uhkc/MH+JK3NHMc73gIgTHyjh6nvAWaoLVFztKY4ulKj/VTOGxG7t1NkyzfnnJU="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi3wBRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpP+w//RMYtY3K8rv71VYVC9FURA7XqB2bFZHBKBBueqSVzRpJl8KkL\r\n7KretW7HiW9zcRNF7Hfh87xFaCGNm4E8eQUXG9HbmjmvT1pXPF6e6ggd5iUN\r\ntnvSZhcHjtgTl1nTTt1zNOKb6tTkoR58XmBlKU2NCY4WG3fudqRHihxlzZr1\r\nu1T8fq8OPFzl65RJJ0oOwOuKjGTeH7bdmR92ZjcKu8RwuDFcdevYxyZ8hMlU\r\ncre19MROt4/yUGpbqEh79mPsqTS9S/KbGEnL2uTd6bSxb706jSmNCas4jHxU\r\n0k26ZYBvTcPc3f1w1l+jyFe2TSfVTFyrMQ3kpVjsSD0hNyLr6A9x66TQdb5i\r\novCiHEffNjYT5wBsjgqw6nvW/5U6FN1ENtLqxkVd1dCWZ7iaTsocFHEP80bf\r\njTGK8K+Xz237/JiZrLQ+Y6uv9gG67vVtdZAJdTI0mWNJ0C2KxhrpWB+jMUOq\r\nT+1vPxWCyTPQYmT9Nt/Fq/P+lygSpZlJrX+IYOf2ahfNw9kNKzpu+6Pizj/9\r\ngRclnnrJvrcBmeOpx5CfNQo2x+nZXhuDfCH58Li+trpO9LzCOjQMs0FH4e+k\r\nRucHgMTUvKrgmI1Tx4UScrtamI8VMVTD2EZG4sYdJQZvC6fPuWwiRvCkqwbK\r\njHeNLkFCJSFVJxBduiHBXYtwG1Su11qnksA=\r\n=4tth\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.3_1658781776857_0.42747803173003573"},"_hasShrinkwrap":false},"0.13.4":{"name":"expo-updates","version":"0.13.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.1","@expo/config":"~6.0.23","@expo/config-plugins":"^4.0.14","@expo/metro-config":"0.3.19","arg":"4.1.0","expo-eas-client":"~0.2.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.6.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"c97debc9ec4c123f975242eccbaa8cbd86f42262","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020.\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `require`d by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to allow your app to update automatically on launch. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml`, adjacent to the tags added during installation.\n\nOn Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`. If provided, the values in this Map will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen`, and the values in this dictionary will override Expo.plist.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo eject` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.13.4","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-GrA88YT2WN0rY4+uDHm7Yb3Gt7hAtVkaGq3ANIDbtIDVarvnHJ4d7cSp0U+FAyhtJCOPRo0QjF/Gy8rpP/G4yw==","shasum":"7ffca09721fdf3ba43eb413cab918010881f3b55","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.13.4.tgz","fileCount":308,"unpackedSize":1029733,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCTJveZ6m4plcvbWbhaw67EhM9pYszf1j+TK6tCeaAlPwIgUu7RX83J6dek2Icem4D48SsI4J3NXk+37lvcD2n4neM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi6onaACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoQlw/7BT2CIgo44c+45rxtMX53WOk8qcyDwXayzAsi32s/S+2GtAqV\r\n7ngQXWkRmnBx+glE1I8yHN43mFWj9nVEuDf4yvfcO5yaUHKulAeW+C7h55vR\r\nOQv3AOhMvTc6oxyOGyj6KErbRPbR9QIZH177/MM5VSHP6nVnv57B7QhVUrgp\r\nWErYkXgeiHMNhUMxHRCQ695KwC4mLC1ouvPRTx7J0+8ejHOaby0rf0W22epS\r\nyCanYXq5dKNiL3IYDMpVyPik8cpdCKSdqbEvKa1rF7BQ5eRb+MCqCZVwVNjX\r\ndvLC2Q5IvXqLn6XG2EdP3jDAA1w6VdjoIA+rAo/ukb92wqyXrngCl6WTjNb1\r\nnTy4OGEsTbvMqtR5rXO/Jvl6MsvH3Q7dkkFASyKnl71M0slOP6/McO68HCGC\r\nrGTBZYdJvxtLoENERtBIyRRJvygU4U6Bu+YhTp8rVa1FV1paPqCEWdUXTNxT\r\nJ76ufrEvtzOyV7YyIChOyhbeTZDGjft6oyhEpUz5xgVxTsA7gyFhTvb4yzDF\r\niXrtHhqrGsHtx90m+qU7t1CBCHLAZhflgT3hd1dRbFY4n0PTeyHOXQ2wBJwo\r\nwcCqy8dYf7wNtVIfp3xJrBg1fGsL2UG5FVNYPwxSy49DiQcW0mPsrGJXA4sj\r\nar6PFWsmGybulJs/TR33GaxtZFhwsKGYTnY=\r\n=JqIo\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.13.4_1659537882641_0.24663938918180506"},"_hasShrinkwrap":false},"0.14.4":{"name":"expo-updates","version":"0.14.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.3.19","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"ffcb7e155d3b6a9615ab7c233e0d6313887c9385","_id":"expo-updates@0.14.4","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-+TbhUmsbjkOMHR/fhZEtcIf7xa8d/UbcvicIAr6jD9FfluBoRatB2sXiswBEohQeQov4P4XlfBKyNE5QTpu0Xw==","shasum":"5fd6708c8438dabc50c1a68329b3caebc9ec9a65","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.4.tgz","fileCount":309,"unpackedSize":1038514,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDcqgNl1oZbBB3IbEgC7l7RXSV0MxFl91Fz6U1qQDcxwgIgENahmx7mvcTIq5Q9QccMRaX1ckdAm2HFAqDjluUEdJ8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9cX+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo82Q//a5L4Gpkw1vyrYlMzcSR04Uh76ywUHQ1dMlk2fgpSGjGifytS\r\ngQD/fUrkxi9IqSO06MQgCqtSybRdWj9qjhhk/XJWmOpo3uGirCNpE7WhbE7Y\r\nD/brFX/xoMKGATdsMLcLpce+jujzzg9ZBA0IMK+T4J5ymGCHLM9qFvq4qbKG\r\npWYDyC+1ikl3O2uGaJAayd8MrCNfswZtCQhbMqSjMuYznXEmKJQI1LioIC3W\r\nXzX8NUVj/GknFjW4QDZyMtQVzT6WF/WM9CylEuBMWarSkEcFc5cpXmjiTP7x\r\nwspsdQnojThgoCq4qSSMNCHQdw146e7e3jVjDDkxyVybZv6LyisbW3Q0GyMN\r\nFdDmg8qTMmFPSU11O3Qd+yW6zokiLug34WWTvk3KE2TfVtchWUSYRc3haHiD\r\nrgR8u8Kr+j7nlJIXjE7l7/+ifkmd+zqv9W4Ojmi/osQSmKXmfQ76qwrkEIGf\r\nI+B+4p9knanc/TRBC0HT+7meYLwRgt2bheDW8wUJ691g/rzRclmYfIl0msCJ\r\nC39sZPwhVy6+BvM+Q+RPUoNd1D5eGALTtjVtSlhsj8LNu9pF/BfHa/7qPWu/\r\nrWHpSfmaWuo8ZgICy/1DULMKFoqwWSbGi9RZhAPXgj8aI/5aCXzlN8KJDMAc\r\nURjqGJyHqgmqJIY2DWtXRbwC6wFngrZfFAw=\r\n=xod0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.4_1660274174073_0.946661994484874"},"_hasShrinkwrap":false},"0.14.5":{"name":"expo-updates","version":"0.14.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.3.19","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"f2136cdc98ea6595298d01900861d649bcc6cae1","_id":"expo-updates@0.14.5","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-m6IOiETTwsJhL93meHG/Y3FWuaRQIbn9LJ5wpWurQ7RniqIV9Ae61SRmJJyYtxk1qLy/dKJ/jHyF1xp8PKIlnQ==","shasum":"3de2764b143c93eee636cab538c081a7867aa086","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.5.tgz","fileCount":309,"unpackedSize":1038790,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBJHlsT8EWFo07DxHNj7d3RNakTPJbVENak9049QRw0pAiAIt528NtV4u0+QKHdVpQx+9XphNJ0h47yKyDyxicklGw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjA9LlACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqBWQ//cdDCzILqC2tjYnv0bhW69WyiIXoO7fgla6h5V56EHeiOu4EM\r\nuAViQWpFIJk96bglvAkQIv5I9InA5FJLPzWqd6eBAb2wc+lzbFdBbhblp4Z1\r\nuXeMoZz5lcreAYbQhyF62nLa3eDRjUJfpIovl8VeofAXla97Ez988R8kHYBb\r\nO7jxuyD7KXFetzdQUjPzjolY64EH99mPnnp9DusaiaFu75lXoaA61Kms/WCZ\r\n7MFmfNl/0KYdt3B3C2F7M3UahFN9Rh0gaUxOh+ZV3k6CtZxQ1zKrOG9AbqsM\r\nSzVNDxFhWc8InyNZ6lG0IM5d1R5x+Xc7+NiaBNclsgUJRxV3z5bzQDU/SYvz\r\nch/kG7c6PgwXnlOWLNS/EwWFSSOc0mk81V6jQvrzEy0nmHvLNqsVDZL4ejST\r\nRlI06sx4N0xuDEpVDZcnT1Yq/i2Etv/QZGhv9FEZpdAyHdOmfkhtAN1SfwwY\r\nhQzneXuZHAtK5YpERVebz0FCc13/C8RYZ6Kdq9p0RXcAxITIuZeFM+o1CMky\r\ns4hcUNhR7aswP1znuGvPhRWm1KkJ0Xpmwfn6H+r2PAxoBWxLfALQJPfktNgl\r\naRT96jScjbN+czfRRt5K9sDwLmhCeIGVPrWALprHmkF2ffF+YPFh7v3rtERA\r\nJYfWE2EAzOaT+EIh7RimtxJKMqRXAX2RDjw=\r\n=q8om\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"bbarthec","email":"bartlomiejbukowski.b@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.5_1661194980915_0.9198345312502769"},"_hasShrinkwrap":false},"0.14.6":{"name":"expo-updates","version":"0.14.6","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.4.0","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"edee4a565d144c92ca3a309e04e16db6d30a3fec","_id":"expo-updates@0.14.6","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-JmE3nsbL8cUAV2slhIqqNIG+jEYCJJvPzSYcUBd15s0sg0xxRbasNaEfnSIrYtZMjhl/YNwMgQzUkU6C2NtXyg==","shasum":"bf2318dd58f1c293c0f7e463a6f942e3ca511a79","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.6.tgz","fileCount":309,"unpackedSize":1038875,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFEJ1JRMyaxS9dpKv1GpUtVPRQ0/USsla+WMSoH9zBU5AiBN8EkZUq9D/VPypLFO6RDgwBVM1UDEgpNhwfNpmFsVug=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjMjQ4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrx4RAAh8ZDnrp4zVtmdSrID6+jvKgr2SJgtDWfv7LKzgerk0ffVZaG\r\nYDphpgzjiMtpIvocux9JhU/UzGBlS92VRFxQdFH7Uo616rt42nQ9+cyCzE2y\r\nRQZy1kdst1vmpiPbXWOQqoxFBnGelDBaxEZTwNNrNTHy70tx1WGFmNLvmyJi\r\nZ4+BoRYLnjAtUgYBxgKH9xrDLZeByvTdLcyCMELHdVUGaRjCwpZkX+m+LIBT\r\ncj4cPAEoquD1nf/kWtgf1wWHS0QEJWmLJcSCpnBjJXEcHTghUyc50Ljtv6OS\r\niMtr3dB1+zhRqtS9LIuJ/ZGWLTLnj1hSTz2S97RluTpsJedHjlzu+tvvXvod\r\nVKMQ/d1xyd0ZvS56pnZC/aEZRxpGCmKb6t4S3aKEiIwwBQYidSj5+DRIzbNW\r\nNLBSYB2t5CYegbt6eTeKIhZaOSDMwb4uuMZihP/2xarFB+0tQvK2ahpr0FE5\r\npiE9m46DsSsvJY5gISeYL8UpFSRSUkGwljhTihZONdSc5Siw4sT4Ht8oDXvM\r\nnqLrGGdlFco5HE3RwgiPYgJ3CkyJ5D62iUjZ0WRlkzFTdT+7dFhmH42XvdAM\r\nIFxPIKQSwtgfKdSfINqTrtLKPbdxnHvLb/WFs30jR76fM7my03YFJYdr7n8Q\r\nY9E64PBYj7OeDdprB7mb+5b9iwKZ7EtzQGs=\r\n=dGqx\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"kgc00","email":"kirbygc00@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"ccheever","email":"ccheever@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"esamelson","email":"eric@expo.io"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.6_1664234552230_0.2662793190254269"},"_hasShrinkwrap":false},"0.15.0":{"name":"expo-updates","version":"0.15.0","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"957cf0793ac316152e694cbe352953e07bffcb45","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.15.0","_nodeVersion":"16.16.0","_npmVersion":"8.17.0","dist":{"integrity":"sha512-O1xtJe73htK7xG23SeEjatquVBRSjQMsAr8PmZBJ83J99jEZftCVot6Y9+laGAUfyqJl1HRLmqutTZRHrc2KAw==","shasum":"628190370a28b87bb9952cbb0eb1bd06ef895d0b","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.0.tgz","fileCount":323,"unpackedSize":1159399,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDo9XVdx+n6zG35lJnrVY6nlC+6UrDRw4OiZ1lXB1FFHwIhANZuRo4GnceqamhT68kQJDGc52yOVAiaX5dB6Pv51UpY"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWAgEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmryOA//SsZi3pjCUMTT4yyQuaETnCEvJPgKaSizwBudkVWm0GuJBj+7\r\nRLJpjA/A+9rm0qE3MJBsI7mIE0QLMmKVzqVCwoVc/m5tbGp9Jixa0niK61Bp\r\nxDhL5/oI+vscflQh4ISUhnJQEnOXOgO7RbVhFlfRYpCGjwSEu7+MwW2Laq4t\r\nPeYklkRJCYxHxP3/8NZN4xUVz6RIuNQjbS54qkqSVvzSwRc61h0PERje90Xo\r\nQ4EZQu7ESd++ZYGTzyDlUVdMdnVfipMgT9dQKfokoIfl2NUwJA3/qFl9u5m6\r\nmBtFF3d+wGLWBB3CWv/2cUjORkx5TQCgXWqyoK6PkRGYxbwLCQ1hNKdvDlx9\r\ntt66hJlJ2Vi/qe3p6S9PNPQqteqw8s/FvH8p+dcR7tyCXRV30tQT7FFpvD8E\r\nu+H+1+kyCOXyxKXYKgb3OtVrN0DLRXeSiHQr8MHn9QBwy/P03I8Pu/PqH6GF\r\nqXy6ZQw1jeObBxZFpvus/w2PCxaQ3dWXUudFRqd0YrxiZciyLP+yV9qixTuT\r\nWkGObl16EhmvhznTnbNRNO1A6LS6zEaSjkbAzFt+Z1yrpKHGD+pJLlfUZf/Z\r\nuCQCLSiK8qjYXn+AeNCIFtJLmwy8Bo9hyqEks+PqQVCoMgpo1YsOuEg2izn/\r\nl4Neai/NjSyqngyDPcCuLE5BZx3Ec2Fb+8Q=\r\n=SoYL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"tsapeta","email":"npm@tsapeta.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.0_1666713602886_0.5798109027283933"},"_hasShrinkwrap":false},"0.15.1":{"name":"expo-updates","version":"0.15.1","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"59081bb17e727b10f2a00cd07bb45cd283a6f6a5","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.15.1","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-XH4WXCThlhQzH1IJhwg80+9lbyh9cGluUq5jnVqtVXVJA35TCVk6Fbk5poxHjuqFwNJd7aStreom/JqNz+K74w==","shasum":"283739ccc4ae43cddd07805e3cb16a973d256358","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.1.tgz","fileCount":323,"unpackedSize":1160485,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH7rmARoU2kUqoc8spsEmazUg/qzkEcyoFl62eLbuIx2AiEAkUL1ZIB9+DxYWoLRyoj2e1Z0u/IN1NGbBgON2szS+sc="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWz0nACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoapQ/+Idqp6cdS7fkwpB+/7mCpKw7UnUE6k98A8Ss/+hO6nUxMBkVm\r\nAkUQmXZiYKl8ti1lRTiVVkjTwDKPPTnILfGa7lG1qkeD3S/8ot8aLBJRoG0y\r\nBJ66IdFMd8w4Jqnhr9kx9G9Dd2ZzuDxooFfc8ihHP6qefTrFmJ9FwvLP3az6\r\nLmwcvPP1DfPaPRN7gu9DpV/z4FB8a0oBAhvSmgNazz2H7+VMTqJ+kKWaZMHr\r\nJuiVmtUWn2/B4v/66dE5wj+5vZgTpPKS/t0axmu+JOZU8fDw58HQiP1QcdvK\r\nUmY1D/gZcOYnbt284xyIzxjLsgBjIR9NhDi6STeSnCDgD35LUUwd7Cf/KcHT\r\n83ljV4dOB/cAmGkA7u9kgAOezelS/z6t5BrtRDhjZL/YJdc95eiH/8E4Gip5\r\nhNBldNBAmMQzYRWBSOGcpjuuUTsM+GZ3goRZ1JH+EDF9qMUmNBAfS7cv2jiJ\r\nJjHJQ9jq/SDvh9xGLxpIvrNYPjLKLQac6TdHwK7Jeioo4cW+7WenCr2e8R7O\r\nihglwdXFwJx4LYbGNDDtRVRMCZfl7quxqd+uZatx6wQ3+OYNtYBzDnuo3qvy\r\nUItei76NQ1qAb5VZEKuib249Ja0IzTHwrezQVPw0rjZVZb5VUlaZR7gWTICa\r\nb9iRc8mqcdAhYmrKxC+zgsZ5C4eec7VJ5Qs=\r\n=5Ne/\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.1_1666923814771_0.8886753579642388"},"_hasShrinkwrap":false},"0.15.2":{"name":"expo-updates","version":"0.15.2","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"0e26dbddd4119a23dbe163f7fe8c70de3a5a9ac2","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.15.2","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-9+pH7URL9PdbGJP+Qqu/onhvv0xkhZ/Dps5hFR40sVWDmNqUchUFUsSMd7igMgJGVgGLdLHQmurr1oVjHE1J3g==","shasum":"73d0ba556abb62a9aaef0851c6c7478973f83ba5","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.2.tgz","fileCount":323,"unpackedSize":1160571,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA5Xv6kZJbakHxZCZtH1kCsUhorEyH3RgjFitVHdmGHGAiAoo/jbvtu7MsMA6CzlgFxLdYh1t3G9joZ4CZBV+Q0kZw=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjWz+PACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrlxA//f9/Sc/qasnp9O99ScfEjcA6BeHE4iAhoUAmxiRLStQZeUe3e\r\nyEosX9FV7BLJZ6yf/d5YexMInffimdBAisgvigsvcyaiVNuDdqVtmFrXBbBp\r\na4oKDulu5TZhkLnCf8bw2sgMtXJUnBozOVUnQH7usBzTJnxX1fZswHKchy78\r\n6bSly2tebl0gxpuirWlYMj0wo1jnEuqB9RLfkxVpRmp5ltfEAzajh3LOjtjL\r\n6QHRLLRfATUp3bkvo99Q0uekkEf8+R7czoct0HutDQAzuIMl4gephDeD5Kxx\r\nW3AEgDEC5ggf2aNXsFYQ697KRuyU1/pJfOmAViNX82iVWXcxeQEQgOthlF00\r\nLgbXYV6rknEArksKe1SiDvUYPNCTzsMENA1+zAJUXn7LZ1ov3VTtzK6pOJnp\r\nMvpI/hZMeiHUpRpVnap1b736DQ1rofHmYYR9mEmPF2DZkQkoo7zd+gLwHrWr\r\n2k5lIG7Qq2KCxiG1Y5iC/3j41M29ZwaLVmMKlUWReBTfBm7ZbZZRn+2W07V8\r\n7q2mfHrDXZZCqcoyqP6JJaEdAkcbVHJvg4/uD7rjblaao5O/TvKZNDa4VFqu\r\nHPUs0wNOmKhjJCbgrWCC1AKeK68dcl6W9NVml5jMhYEEmYW4E82pWowxXkVM\r\n/q7LrbhGl14+16079AiGpOO8nqojUmWLCHk=\r\n=Q/ym\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.2_1666924430853_0.03392404205166066"},"_hasShrinkwrap":false},"0.15.3":{"name":"expo-updates","version":"0.15.3","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"npm run build:cli && expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.2","@expo/config-plugins":"~5.0.3","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"b56ceb5bface07762c968c882575a041105b13b6","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.15.3","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-dISyvTS7Kilk+hGnG4qXtygfP2fbhkrx9wcjJoESNfR/3J9Pl6P1UwHaOhjB6RjVw+VLCCcGE+NmZLDazb+JKg==","shasum":"5edd781f91672c78833796d44da43c70a91a675c","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.3.tgz","fileCount":323,"unpackedSize":1160678,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF3qVGywBuWAqNXUHlBd8irKlB9UZZRovpEpsnKy4sQqAiEAkuaar8EoKFowwvXUVBBf86/RzQIro4XAtpryD2ARahg="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjXwL3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqYahAAkWUPRWV+/woGCFai2rObvhx6225+KWOCC0GLgwasqhmD/wDD\r\nfq0iJPTD7PhSUcpoiXjcF++Njol2aSNR37Zcws7ptkeiS6eWJjGRTTlWYwDG\r\n73TBahJo7asdzdwoa97URFNEm1ulsCdivmBdZKJQ0WMwNE9qh6EgoWRbqj6F\r\naopPwJOuL3RrnLAsv61EzEDeifqamTdGgS0jtrVcn6PbseZYdMY43EJbm7JU\r\nLDt7aNAvmtTsNmBVLGVF0EF+I+W6wdOLrrSUTti9EJfjiQPUQFfYvbNU5BZs\r\nUV5SgpdpimAFUy/o4PNWSPo/5jnJ7xMdChvotYXlbxCGmZVz3Pjlz4am+lZE\r\n4DBPO6ACcM7BOKhcI+tJLmND9yf8NvJTMdEU3nHYZo10XFsl8wjwvgxmAPCq\r\nT0wywN3XnnxIlqRdoc0EBtMnIUzrp7ib7tSHpB7RCecmYXlelO6HeOv99Jk0\r\nHpBJHxwumDyU+bWtmFKOJS5H8aqFR5OAB+yx8xJN1LnEPPva5otakrKrNEeZ\r\nEkkaWk3NG/PZ93tkf44d3oZvE8iVg3N+ILDQLJatVxoozKn/vEGrLnnlH7Jt\r\n+7qQ67+s2GHQk5yGdKBDM1hqXOOkPl9gflVWFPOYQ2rOpPVP8nLr1+E3+BfX\r\nmNaN2MPb0AmfGrlOgfx72BWCg/b/JB7WCw4=\r\n=cRjM\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.3_1667171063258_0.9452149713342326"},"_hasShrinkwrap":false},"0.15.4":{"name":"expo-updates","version":"0.15.4","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"npm run build:cli && expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.2","@expo/config-plugins":"~5.0.3","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"7bd5b06647741fc25c84c77136819ab884c8479b","_id":"expo-updates@0.15.4","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-ZMQ9R0igA9lMFRe5WU9Uo1YBKPChsTgv+QYthWVcd0kG9pRQmdRF/kCXknScRfOOaoyh8HkMPlnzKdPdBfVHJQ==","shasum":"c9f54076c266f832df39de32a1d94c7b3e857aa1","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.4.tgz","fileCount":323,"unpackedSize":1160914,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDf34kjgdDpzgrrfsCsZQxT2qdPBEk/pnPgyhz3TiD22gIgb120YCzRIrN3eOpzkfDtbYpJKG0aEwv2SLJrvgzK0TY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjZCIVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrmCQ//cO98I4Aw/z5L6TLkf6PV5HPCIObbMaGxwpwq8Csyn8HEpKQ1\r\n+u/+cHWMIIiSPJY782i0SyHzKOZ2YqDfESw2n3+txpsDeuijP+vXSuUsKa65\r\nPsIOYhO9XAhR9Zb561STg0wLojOoXgR6bNqhnGM1hzNmNgsvgCksNslYPo+5\r\n+2cayW/d4wfNic3ni8+o0xGVrNwkNLNcI2fVwaarb614rRSFiUfajqq07KRc\r\nlnkXhrrRChBkDLK03c4dvcgQLC9YXR7yP5+rkGi/ERCo68xXjSq+yI5/Fxw4\r\nU8RahnZxvN80v+bHGo+vId5t0z9AM43uExeP0Qt/qaroM2/HuoYlxE8sL7Ib\r\nZ7GA+5bkDtFGG3gDyA6EAW6GP6jar0ioUeAqbOBFmqzhF/2GHV3KUKoVUBnm\r\nDEgSqzuP5Kkilov5uWvOWL4+wE3RRBKbBSiTgti9M3OgR86sukz2WPW5vhJJ\r\n7UyBbJJM+HUVC7oH4m0QJLJucVj2+MZF/Dsq3Ebuoi1hKkOWAjvPLM6Lcepf\r\n8Jgbg964xRwC6r/ydyf9FulikhQHZTZJXSs+TBu7gKl8UFp3kiMZ8dbZ/3yo\r\n3f0RGcWuyfbdsSkVkgOdNZTFqIJ7Io8TK9QITUL1yG0cFa99SvaxWoxVKY4E\r\nlo1YzrwyG24MCZVZPOSbse94oYQXDp8cTlo=\r\n=YO+z\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.4_1667506709657_0.7659418764898185"},"_hasShrinkwrap":false},"0.14.7":{"name":"expo-updates","version":"0.14.7","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.1","@expo/config-plugins":"~5.0.1","@expo/metro-config":"~0.4.0","arg":"4.1.0","expo-eas-client":"~0.3.0","expo-manifests":"~0.3.0","expo-structured-headers":"~2.2.0","expo-updates-interface":"~0.7.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^2.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"903a8208ae60dc6d70fdc5b01c61b201af17faae","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.14.7","_nodeVersion":"16.16.0","_npmVersion":"8.11.0","dist":{"integrity":"sha512-xzRvsv45TfIYJ4arTMiorAci4LvUQvpBJx0llJcdCFLWGcoj59roi48ldtDTwkgQAGjDP/Oyysd3zTyvpwxjYg==","shasum":"772dd2255197f84935be2c5a63876cc20e386471","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.14.7.tgz","fileCount":309,"unpackedSize":1039310,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCdyglZ/Pnf8T8xWB8OIt2JKP28tfV5e2qG+ChDFAmulAIgINwBr+VLp2vB8GvSv89/obs+Nrap54+mim8MCe9xyQQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJja0LcACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrszw/+IZTEVJkTmj5twdGzAJ4ssrmiVXSTXH3Zy/jz7D8ylGRV7Yiy\r\nvJDkGsdjYIYbBBvCymYcQWpiUTAty7P62V/zCIXTXgZk/pMk0XDTb+eBTDqt\r\n3R01oFuPb/MexxYK7hcNsjnO1nJ8QTPy+CO23jCajo24Dl5/8WAmC+TRK2g+\r\nxbyEhVF8WkyJBGRcqLYYexclFnY8ImTI/piTQRYLqKa/IBBal7Dr6ykx8J1G\r\nZXDbfHXInBInqY4VNXwcVrzIhttiq6fYqETUvFf3/X6anyag8S03oDOBfndz\r\nj2sLDk3ooZKUS+aqx5VkSjunSV5CY8wLdC9pqIkMIE8cmBHpEsqBL9x/TqP+\r\nVCljKorGHKNz+jAu8+3oX2qF8+zwJJlxBYUbWKKJA1qQur70jqJgtUZrZ4FP\r\n8KvHT/Ii96nB+zPsvz015dkeRTRjqUl0WpbDO/oRw+nvqDclUSuriob5KyBG\r\nZs/+zv5RZ6kqwZK+96O0Zwaf4SDTZ0oxPTrA9woqGm/V/4yUFYAz8SKrMrDc\r\nHXfcZ/mAdLVRQ65CY/GhDakzIPV0KJzsugoCNmZKx7BDck27HGI1ElfE+i+W\r\ntkVkAjmd/LKxorZ7zYPUCdyJUSkud78P/vI8Lii1h1yMYcbR8za+KqYej+Md\r\nAy25UC1ZkumvJ4LIJr/WgBHwm+5tIlHvlk0=\r\n=MJHf\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"kudochien","email":"ckchien@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"andyboythekid","email":"andydevs123@gmail.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.14.7_1667973851700_0.1877696517416665"},"_hasShrinkwrap":false},"0.15.5":{"name":"expo-updates","version":"0.15.5","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"npm run build:cli && expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.2","@expo/config":"~7.0.2","@expo/config-plugins":"~5.0.3","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"764c38217ab6bda6d6fe32858cef1a13b89a20a6","_id":"expo-updates@0.15.5","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-FTWT0u2ila2Oxsa3Ls1qix2YCK3F1I5VnG2O5pAAHqQ0k6FsZKO0/yvf/5O2X1K8Iqj4CiD/2MOLmpFaCsoQqg==","shasum":"65d85ddf253915767dbb88e2943e9068624ea41d","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.5.tgz","fileCount":323,"unpackedSize":1162773,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCsMs7m6MTSAqXNeyTck51erQDjrNOe8nr7MPwK35bUYAIhAKsP1gQXVYbjh+r7XGYsvDS98VxHsAXQ5++szhpeePIV"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjcrXXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpioQ/+JOSfw1qYDXrDJm7uWrNm7m89pnxFLmbQLL/U8iRktLYRdd52\r\nyH6Hb+cb1zSP8CcPRBpDYNu9hSYRzoCFyMTKp9dPxF169OUrNUFmt703o5dn\r\nF4UYn9hoJDfROaIYwm4kNShtuSmUc5VXt58dNXtjrYHbumy874BkghoGFY2O\r\nepue4h/VWHGJqNx8e7Pa1kY/RuW4u875XEKdETPMVzsFellyOgmanCL1j5Ol\r\ns8FXLO6A/0Q0+gAApxzpGgcMnfxLQVLIPUR4t1/6ebjmpwOnHSLuZ5Ite59E\r\nGwrm7H3q8r7vwvrqFVJKphTtNB0S52XpM68RdmRlxjsHmY8B/TvDOzEk8qCw\r\nxyOokL1OEJpkhHtqTGBuJJCTFUEE7cGIfcT8xx/6Q7vLrwOguoohl5G1zpue\r\nUMhGsrjLB4PW3+KHFOqviYJoIdi3OwpEn/4+GDIIo2Y4ZU8NEWdYXaFgZiSn\r\nVpMmr1/DVGs3IxY/exoSiV583s3dOo5jQMBIRIJDR/sccdqdN9lN8J+3SUmz\r\n9CvZCq/jU4ZgGFX3xWkFaOoUKU6MFFEO/byoGVqJnliqzz2oeQOmB3+xLfhZ\r\nu54Mb0XWpYJzrDJIf8bDSr1fL8EVwK/D90qbd+59PIoJo2YlNEzrz/g7r6OR\r\npXdgLsIqEjH3o6CBb7wH5Qn52LDE2+d1ORA=\r\n=YiW9\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.5_1668462039535_0.046977016317713005"},"_hasShrinkwrap":false},"0.15.6":{"name":"expo-updates","version":"0.15.6","description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","main":"build/index.js","types":"build/index.d.ts","sideEffects":false,"bin":{"expo-updates":"bin/cli.js"},"scripts":{"build:cli":"tsc -p tsconfig.cli.json","test:cli":"jest --config jest.cli.config.js","build":"expo-module build","clean":"expo-module clean","lint":"expo-module lint","test":"expo-module test","prepare":"npm run build:cli && expo-module prepare","prepublishOnly":"npm run build:cli && expo-module prepublishOnly","expo-module":"expo-module"},"keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"bugs":{"url":"https://github.com/expo/expo/issues"},"author":{"name":"650 Industries, Inc."},"license":"MIT","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","jest":{"preset":"expo-module-scripts"},"dependencies":{"@expo/code-signing-certificates":"0.0.5","@expo/config":"~7.0.2","@expo/config-plugins":"~5.0.3","@expo/metro-config":"~0.5.0","arg":"4.1.0","expo-eas-client":"~0.4.0","expo-manifests":"~0.4.0","expo-structured-headers":"~3.0.0","expo-updates-interface":"~0.8.0","fbemitter":"^3.0.0","resolve-from":"^5.0.0","uuid":"^3.4.0"},"devDependencies":{"@types/jest":"^27.4.0","@types/node":"^17.0.15","@types/node-forge":"^1.0.0","expo-module-scripts":"^3.0.0","express":"^4.17.2","fs-extra":"^9.1.0","memfs":"^3.2.0"},"peerDependencies":{"expo":"*"},"gitHead":"944518937c366466608634c7ccd6177d2b4688b2","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md","_id":"expo-updates@0.15.6","_nodeVersion":"16.16.0","_npmVersion":"8.19.2","dist":{"integrity":"sha512-g5BuCmWdyiLqFaVkVz+m7r6U7MHJrLKvqybs04H6ArMNpTEf6FhUwSzmnCyOkSSP35KFNkC/I0dYlgW3Vcf1sw==","shasum":"99e3faa3e38312ebddb77afb697863fa1f1f6a03","tarball":"https://registry.npmjs.org/expo-updates/-/expo-updates-0.15.6.tgz","fileCount":323,"unpackedSize":1162859,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD39aG6CQnWdHqMoKMH+Xs2Q3+gTb+L6keyxaNJPPdzZQIhAMve3LyyisaJW4eQrrrbXko2sPvgmYfq0FelF5h0deCD"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjfCoyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpgIg//VxIPO72lb+WVm9Luk9PYDL10u3BCpeT7cK976QXyz4fi/JQ3\r\nSde+vrvryYPpXQaE3mNeGIojKygWN6ugWHcaPIY2hrLNyyMBFLhhpkt1BEFf\r\naAqiwj2nl38QtwUDSi7cA9czTCPR//pQKHH6+cuLzVCuNEvU/afqYPm7cXDZ\r\nG2e4/aFWg3DzzCAhJwnJsPc9MazQ1IIPWstFkmJQNGU65fbCLRXoPP2giLz4\r\nMU/xKUN5zGhk/4zipUb2sgPP/56dPxzRW+lwGxoyG+oDm7j0Mi+m5aT4TB2F\r\nFWvlhOwKo4JTeT1eOnp/TXByn7B6YDP8E9YuA5gAY1k54pIXuKsnZkkqLo22\r\nrcgOwWkYcOvf9km9RaqQTPjnLQ9Md7EQuPzae2jQtYoLTUPdX+TDIhxWcX2K\r\nMC2U1zlbbrdb7iu6uLI6s1XfzWKk9YNL2UR15wjSophwLhSvKFiLHrFe/9yB\r\nM5cLuvRzjfWTq+y1edeB/jkRAVP9fhIz6sf7mvFw+E7Cta5Y3FMUx7DGqUEq\r\nEBwBeTua6tYdHF3FLaA8soB8Sxx3uDVamA0f4f3gDNA9FBnrCjNSP0N+cMEk\r\n5b1/CWdVk4I/ZJ3EJrvkV9sUaziPaOWMofEU7MNpuzOsz0G+ow22A/XGzfJe\r\naltdTWDxfGtna9wZ8f8zSZEARbHruEB7HWc=\r\n=XUa4\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"brentvatne","email":"brentvatne@gmail.com"},"directories":{},"maintainers":[{"name":"keith-kurak","email":"keith@expo.io"},{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/expo-updates_0.15.6_1669081649980_0.6805489510156488"},"_hasShrinkwrap":false}},"time":{"created":"2019-07-31T18:49:53.338Z","0.0.1-alpha.0":"2019-07-31T18:49:53.521Z","modified":"2022-11-22T01:52:17.684Z","0.0.1-rc.0":"2019-09-14T07:45:31.024Z","0.0.1-rc.1":"2020-03-11T19:39:08.838Z","0.0.1-rc.2":"2020-03-26T15:32:24.435Z","0.0.1-rc.3":"2020-03-27T03:28:22.898Z","0.1.0":"2020-03-31T19:13:24.796Z","0.1.1":"2020-04-01T17:02:34.664Z","0.1.2":"2020-04-10T00:07:10.024Z","0.1.3":"2020-04-29T20:23:23.063Z","0.2.0":"2020-05-11T22:30:19.764Z","0.2.1":"2020-05-12T18:38:39.959Z","0.2.2":"2020-05-15T23:13:03.220Z","0.2.3":"2020-05-20T00:37:13.036Z","0.2.4":"2020-05-22T00:40:51.679Z","0.2.5":"2020-05-23T00:12:22.498Z","0.2.6":"2020-05-27T16:00:08.344Z","0.2.7":"2020-05-28T00:37:54.714Z","0.2.8":"2020-05-29T10:48:56.669Z","0.2.9":"2020-06-15T21:51:57.626Z","0.2.10":"2020-06-23T23:54:07.427Z","0.2.11":"2020-06-29T17:22:20.043Z","0.2.12":"2020-07-24T19:42:54.521Z","0.2.13":"2020-07-31T03:55:24.447Z","0.2.14":"2020-08-01T00:20:21.773Z","0.3.0":"2020-08-18T14:43:46.323Z","0.3.1":"2020-08-26T09:48:46.321Z","0.3.2":"2020-09-16T23:45:42.573Z","0.3.3":"2020-09-21T17:18:17.614Z","0.3.4":"2020-09-22T17:57:40.144Z","0.3.5":"2020-10-02T22:01:03.689Z","0.4.0":"2020-11-17T05:01:36.175Z","0.4.1":"2020-11-27T22:55:05.134Z","0.5.0-rc.0":"2020-12-14T23:39:46.549Z","0.5.0-rc.1":"2021-01-15T21:53:19.395Z","0.4.2":"2021-02-16T19:54:23.369Z","0.5.0":"2021-03-10T01:44:03.642Z","0.5.1":"2021-03-11T22:21:25.517Z","0.5.2":"2021-03-23T04:34:28.292Z","0.5.3":"2021-03-30T17:12:42.770Z","0.6.0":"2021-04-13T03:21:31.118Z","0.5.4":"2021-04-13T19:59:08.709Z","0.5.5":"2021-05-11T22:40:35.543Z","0.7.0-rc.1":"2021-06-08T19:47:49.896Z","0.7.0-rc.2":"2021-06-10T15:35:18.420Z","0.7.0":"2021-06-16T19:31:20.572Z","0.7.1":"2021-06-22T00:18:25.771Z","0.7.2":"2021-06-23T19:44:42.817Z","0.7.3":"2021-06-24T20:16:01.502Z","0.8.0":"2021-06-24T23:10:57.930Z","0.8.1":"2021-07-08T20:37:07.900Z","0.8.2":"2021-07-13T18:15:29.502Z","0.8.3":"2021-07-28T01:13:42.525Z","0.8.4":"2021-08-06T18:33:24.507Z","0.8.5":"2021-09-02T23:45:44.258Z","0.9.0":"2021-09-09T18:39:28.525Z","0.9.1":"2021-09-09T19:00:01.766Z","0.9.2":"2021-09-16T20:27:10.578Z","0.9.3":"2021-09-16T20:44:17.459Z","0.10.0":"2021-09-28T15:23:06.780Z","0.10.1":"2021-09-28T16:15:58.598Z","0.10.2":"2021-10-01T23:07:57.902Z","0.10.3":"2021-10-12T17:26:57.235Z","0.10.4":"2021-10-15T18:50:49.766Z","0.10.5":"2021-10-21T21:12:25.166Z","0.10.6":"2021-10-28T17:25:00.517Z","0.10.7":"2021-10-29T03:29:30.877Z","0.10.8":"2021-10-29T06:02:26.717Z","0.10.9":"2021-10-29T18:41:40.844Z","0.10.10":"2021-11-02T00:48:11.706Z","0.10.11":"2021-11-02T21:21:40.083Z","0.10.12":"2021-11-04T06:44:31.344Z","0.10.13":"2021-11-05T01:02:50.048Z","0.10.14":"2021-11-09T22:48:20.257Z","0.10.15":"2021-11-11T21:01:29.465Z","0.11.0":"2021-12-03T21:44:28.587Z","0.11.1":"2021-12-08T23:55:39.002Z","0.11.2-rc.0":"2021-12-13T22:40:37.644Z","0.11.2":"2021-12-15T04:04:29.477Z","0.11.3":"2021-12-22T10:31:31.142Z","0.11.4":"2022-01-13T04:42:22.013Z","0.11.5":"2022-01-20T10:51:41.514Z","0.11.6":"2022-02-01T19:25:35.590Z","0.11.7":"2022-03-07T22:18:47.760Z","0.12.0":"2022-04-18T15:13:57.462Z","0.13.0":"2022-04-21T14:13:13.247Z","0.13.1":"2022-05-05T19:11:28.093Z","0.13.2":"2022-06-03T00:20:41.979Z","0.13.3":"2022-07-07T21:39:31.315Z","0.14.0":"2022-07-07T23:22:12.696Z","0.14.1":"2022-07-11T22:09:41.154Z","0.14.2":"2022-07-16T17:56:32.179Z","0.14.3":"2022-07-25T20:42:57.068Z","0.13.4":"2022-08-03T14:44:42.854Z","0.14.4":"2022-08-12T03:16:14.380Z","0.14.5":"2022-08-22T19:03:01.209Z","0.14.6":"2022-09-26T23:22:32.496Z","0.15.0":"2022-10-25T16:00:04.058Z","0.15.1":"2022-10-28T02:23:35.058Z","0.15.2":"2022-10-28T02:33:51.120Z","0.15.3":"2022-10-30T23:04:23.451Z","0.15.4":"2022-11-03T20:18:29.885Z","0.14.7":"2022-11-09T06:04:11.980Z","0.15.5":"2022-11-14T21:40:39.798Z","0.15.6":"2022-11-22T01:47:30.217Z"},"maintainers":[{"name":"keith-kurak","email":"keith@expo.io"},{"name":"christopherwalter","email":"chris@christopherwalter.com"},{"name":"kbrandwijk","email":"kim.brandwijk@gmail.com"},{"name":"fiber-god","email":"datwheat@gmail.com"},{"name":"ide","email":"ide+npm@jameside.com"},{"name":"brentvatne","email":"brentvatne@gmail.com"},{"name":"evanbacon","email":"baconbrix@gmail.com"},{"name":"quinlanj","email":"quinlanjung@gmail.com"},{"name":"expoadmin","email":"support@expo.io"},{"name":"tsapeta","email":"npm@tsapeta.com"},{"name":"dsokal","email":"dominiksokal@gmail.com"},{"name":"tcdavis","email":"tc@expo.io"},{"name":"exponent","email":"exponent.team@gmail.com"},{"name":"wschurman","email":"wschurman@gmail.com"},{"name":"wkozyra","email":"wojciech.kozyra@swmansion.com"},{"name":"bycedric","email":"me@bycedric.com"},{"name":"lukmccall","email":"kosmatylukasz@gmail.com"},{"name":"jonsamp","email":"sampjon@gmail.com"},{"name":"princefleaswallow","email":"mhampton@hey.com"},{"name":"kudochien","email":"ckchien@gmail.com"},{"name":"esamelson","email":"eric@expo.io"}],"description":"Fetches and manages remotely-hosted assets and updates to your app's JS bundle.","homepage":"https://docs.expo.dev/versions/latest/sdk/updates/","keywords":["react-native","expo","updates"],"repository":{"type":"git","url":"git+https://github.com/expo/expo.git","directory":"packages/expo-updates"},"author":{"name":"650 Industries, Inc."},"bugs":{"url":"https://github.com/expo/expo/issues"},"license":"MIT","readme":"# expo-updates\n\n`expo-updates` fetches and manages updates to your app stored on a remote server.\n\n## API documentation\n\n- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/updates.md)\n- [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/)\n\nAdditionally, for an introduction to this module and tooling around OTA updates, you can watch [this talk](https://www.youtube.com/watch?v=Si909la3rLk) by [@esamelson](https://github.com/esamelson) from ReactEurope 2020. Note: `expo eject` (mentioned @9:10) is no longer needed to implement native code. See [Development Builds](https://docs.expo.dev/development/introduction/#from-expo-go-to-development-builds).\n\n## Compatibility\n\nThis module requires `expo-cli@3.17.6` or later; make sure your global installation is at least this version before proceeding.\n\nAdditionally, this module is only compatible with Expo SDK 37 or later. For bare workflow projects, if the `expo` package is installed, it must be version `37.0.2` or later.\n\nFinally, this module is not compatible with ExpoKit. Make sure you do not have `expokit` listed as a dependency in package.json before adding this module.\n\n## Upgrading\n\nIf you're upgrading from `expo-updates@0.1.x`, you can opt into the **no-publish workflow**. In this workflow, release builds of both iOS and Android apps will create and embed a new update at build-time from the JS code currently on disk, rather than embedding a copy of the most recently published update. For instructions and more information, see the [CHANGELOG](https://github.com/expo/expo/blob/main/packages/expo-updates/CHANGELOG.md). (For new projects, the no-publish workflow is enabled by default.)\n\n# Installation in managed Expo projects\n\nFor [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/updates/).\n\n# Installation in bare React Native projects\n\nLearn how to install expo-updates in your project in the [Installing expo-updates documentation page](https://docs.expo.dev/bare/installing-updates/).\n\n## Embedded Assets\n\nIn certain situations, assets that are `required` by your JavaScript are embedded into your application binary by Xcode/Android Studio. This allows these assets to load when the packager server running locally on your machine is not available.\n\nDebug builds of Android apps do not, by default, have any assets bundled into the APK; they are always loaded at runtime from the Metro packager.\n\nDebug builds of iOS apps built for the iOS simulator also do not have assets bundled into the app. They are loaded at runtime from Metro. Debug builds of iOS apps built for a real device **do** have assets bundled into the app binary, so they can be loaded from disk if they cannot be loaded from the packager at runtime.\n\nRelease builds of both iOS and Android apps include a full embedded update, including manifest, JavaScript bundle, and all imported assets. This is critical to ensure that your app can load for all users immediately upon installation, without needing to talk to a server first.\n\n## Configuration\n\nSome build-time configuration options are available to configure the behavior of `expo-updates`. On iOS, these properties are set as keys in `Expo.plist` and on Android as `meta-data` tags in `AndroidManifest.xml` adjacent to the tags added during installation. On Android, you may also define these properties at runtime by passing a `Map` as the second parameter of `UpdatesController.initialize()`, and when provided the values will override any values specified in `AndroidManifest.xml`. On iOS, you may set these properties at runtime by calling `[UpdatesController.sharedInstance setConfiguration:]` at any point _before_ calling `start` or `startAndShowLaunchScreen` and the values in this dictionary will override any values specified in `Expo.plist`.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name         | Default | Required? |\n| ------------------------ | --------------- | ------------------------------ | ------- | --------- |\n| `EXUpdatesEnabled`       | `enabled`       | `expo.modules.updates.ENABLED` | `true`  | ❌        |\n\nWhether updates are enabled. Setting this to `false` disables all update functionality, all module methods, and forces the app to load with the manifest and assets bundled into the app binary.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                 | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------- | ------- | --------- |\n| `EXUpdatesURL`           | `updateUrl`     | `expo.modules.updates.EXPO_UPDATE_URL` | (none)  | ✅        |\n\nThe URL to the remote server where the app should check for updates. A request to this URL should return a valid manifest object for the latest available update and tells expo-updates how to fetch the JS bundle and other assets that comprise the update. (Example: for apps published with `expo publish`, this URL would be `https://exp.host/@username/slug`.)\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                                           | Default | Required? |\n| ------------------------ | --------------- | ---------------------------------------------------------------- | ------- | --------- |\n| `EXUpdatesRequestHeaders`| `requestHeaders`| `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | (none)  | ❌        |\n\nExtra HTTP headers to include in HTTP requests made by expo-updates. These may override preset headers. On iOS this is specified as a plist dictionary. On Android this is JSON object string.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                  | Default | Required?                                                     |\n| ------------------------ | --------------- | --------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesSDKVersion`    | `sdkVersion`    | `expo.modules.updates.EXPO_SDK_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe SDK version string to send under the `Expo-SDK-Version` header in the manifest request. Required for apps hosted on Expo's server.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default | Required?                                                     |\n| ------------------------- | ---------------- | ------------------------------------------- | ------- | ------------------------------------------------------------- |\n| `EXUpdatesRuntimeVersion` | `runtimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | (none)  | (exactly one of `sdkVersion` or `runtimeVersion` is required) |\n\nThe Runtime Version string to send under the `Expo-Runtime-Version` header in the manifest request.\n\n| iOS plist/dictionary key  | Android Map key  | Android meta-data name                      | Default   | Required? |\n| ------------------------- | ---------------- | ------------------------------------------- | --------- | --------- |\n| `EXUpdatesReleaseChannel` | `releaseChannel` | `expo.modules.updates.EXPO_RELEASE_CHANNEL` | `default` | ❌        |\n\nThe release channel string to send under the `Expo-Release-Channel` header in the manifest request.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                              | Default  | Required? |\n| ------------------------ | --------------- | --------------------------------------------------- | -------- | --------- |\n| `EXUpdatesCheckOnLaunch` | `checkOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `ALWAYS` | ❌        |\n\nThe condition under which `expo-updates` should automatically check for (and download, if one exists) an update upon app launch. Possible values are `ALWAYS`, `NEVER` (if you want to exclusively control updates via this module's JS API), `WIFI_ONLY` (if you want the app to automatically download updates only if the device is on an unmetered Wi-Fi connection when it launches), or `ERROR_RECOVERY_ONLY` (if you want the app to automatically download updates only if it encounters a fatal error when launching).\n\nRegardless of the value of this setting, as long as updates are enabled, your app can always use the JS API to manually check for and download updates in the background while your app is running.\n\n| iOS plist/dictionary key | Android Map key | Android meta-data name                             | Default | Required? |\n| ------------------------ | --------------- | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesLaunchWaitMs`  | `launchWaitMs`  | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `0`     | ❌        |\n\nThe number of milliseconds `expo-updates` should delay the app launch and stay on the splash screen while trying to download an update, before falling back to a previously downloaded version. Setting this to `0` will cause the app to always launch with a previously downloaded update and will result in the fastest app launch possible.\n\n| iOS plist/dictionary key          | Android Map key          | Android meta-data name                             | Default | Required? |\n| --------------------------------- | ------------------------ | -------------------------------------------------- | ------- | --------- |\n| `EXUpdatesCodeSigningCertificate` | `codeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE`    | (none)  | ❌        |\n| `EXUpdatesCodeSigningMetadata`    | `codeSigningMetadata`    | `expo.modules.updates.CODE_SIGNING_METADATA`       | (none)  | ❌        |\n| `EXUpdatesCodeSigningIncludeManifestResponseCertificateChain` | `codeSigningIncludeManifestResponseCertificateChain` | `expo.modules.updates.CODE_SIGNING_INCLUDE_MANIFEST_RESPONSE_CERTIFICATE_CHAIN` | false | ❌        |\n| `EXUpdatesConfigCodeSigningAllowUnsignedManifests` | `codeSigningAllowUnsignedManifests` | `expo.modules.updates.CODE_SIGNING_ALLOW_UNSIGNED_MANIFESTS` | false | ❌        |\n\nIf `codeSigningCertificate` is present, `expo-updates` will enforce manifest code signing using the certificate and any metadata associated with it.\n- `codeSigningCertificate` must be a valid PEM formatted X.509 certificate with code signing extended key usage.\n- `codeSigningMetadata` (optional) must be a JSON object containing:\n    - `alg` - Algorithm used to generate manifest signature. Only `rsa-v1_5-sha256` is currently supported.\n    - `keyid` - Identifier for the key in `codeSigningCertificate`. Used to instruct signing mechanisms when signing or verifying signatures.\n- `codeSigningIncludeManifestResponseCertificateChain` (optional) instructs `expo-updates` to evaluate certificates included in a multipart manifest response (under the `certificate_chain` multipart part) as part of the code signing certificate chain with the embedded `codeSigningCertificate` as the implicitly trusted root certificate of the chain. The leaf certificate in the chain must be valid for code signing.\n- `codeSigningAllowUnsignedManifests` (optional) instructs `expo-updates` to treat a missing signature in the response as if code signing weren't enabled rather than as invalid as it normally would.\n\n## Customizing automatic setup\n\nIn `expo-updates@0.9.0` and above, we support automatic installation of the module in the iOS AppDelegate.m and Android MainApplication.java classes. If you want to customize the installation, e.g. to enable updates only in some build variants, you can add custom logic in AppDelegate/MainApplication and set the following keys to `false` in order to disable the automatic setup.\n\n| iOS Expo.plist key   | Android meta-data name            | Default | Required? |\n| -------------------- | --------------------------------- | ------- | --------- |\n| `EXUpdatesAutoSetup` | `expo.modules.updates.AUTO_SETUP` | `true`  | ❌        |\n\n# Removing pre-installed expo-updates\n\nProjects created by `expo init` and `expo prebuild` come with expo-updates pre-installed, because we anticipate most users will want this functionality. However, if you do not intend to use OTA updates, you can disable or uninstall the module.\n\n## Disabling expo-updates\n\nIf you disable updates, the module will stay installed in case you ever want to use it in the future, but none of the OTA-updating code paths will ever be executed in your builds. To disable OTA updates, add the `EXUpdatesEnabled` key to Expo.plist with a boolean value of `NO`, and add the following line to AndroidManifest.xml:\n\n```xml\n<meta-data android:name=\"expo.modules.updates.ENABLED\" android:value=\"false\"/>\n```\n\n## Uninstalling expo-updates (for expo-updates >= 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n\n## Uninstalling expo-updates (for expo-updates < 0.9.0)\n\nUninstalling the module will entirely remove all expo-updates related code from your codebase. To do so, complete the following steps:\n\n- Remove `expo-updates` from your package.json and reinstall your node modules.\n- Remove the line `../node_modules/expo-updates/scripts/create-manifest-ios.sh` from the \"Bundle React Native code and images\" Build Phase in Xcode.\n- Delete Expo.plist from your Xcode project and file system.\n- Remove the line `apply from: \"../../node_modules/expo-updates/scripts/create-manifest-android.gradle\"` from `android/app/build.gradle`.\n- Remove all `meta-data` tags with `expo.modules.updates` in the `android:name` field from AndroidManifest.xml.\n- Apply the following three diffs:\n\n#### `AppDelegate.h`\n\nRemove`EXUpdatesAppControllerDelegate` as a protocol of your `AppDelegate`.\n\n```diff\n-#import <EXUpdates/EXUpdatesAppController.h>\n #import <React/RCTBridgeDelegate.h>\n #import <UMCore/UMAppDelegateWrapper.h>\n\n-@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate, EXUpdatesAppControllerDelegate>\n+@interface AppDelegate : UMAppDelegateWrapper <RCTBridgeDelegate>\n\n @property (nonatomic, strong) UMModuleRegistryAdapter *moduleRegistryAdapter;\n @property (nonatomic, strong) UIWindow *window;\n```\n\n#### `AppDelegate.m`\n\n```diff\n #import <UMReactNativeAdapter/UMNativeModulesProxy.h>\n #import <UMReactNativeAdapter/UMModuleRegistryAdapter.h>\n\n-@interface AppDelegate ()\n-\n-@property (nonatomic, strong) NSDictionary *launchOptions;\n-\n-@end\n-\n @implementation AppDelegate\n\n...\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n {\n   self.moduleRegistryAdapter = [[UMModuleRegistryAdapter alloc] initWithModuleRegistryProvider:[[UMModuleRegistryProvider alloc] init]];\n-  self.launchOptions = launchOptions;\n-\n-  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n-#ifdef DEBUG\n-  [self initializeReactNativeApp];\n-#else\n-  EXUpdatesAppController *controller = [EXUpdatesAppController sharedInstance];\n-  controller.delegate = self;\n-  [controller startAndShowLaunchScreen:self.window];\n-#endif\n-\n-  [super application:application didFinishLaunchingWithOptions:launchOptions];\n-\n-  return YES;\n-}\n-\n-- (RCTBridge *)initializeReactNativeApp\n-{\n-  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:self.launchOptions];\n+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n   RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"YOUR-APP-NAME\" initialProperties:nil];\n   rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n   UIViewController *rootViewController = [UIViewController new];\n   rootViewController.view = rootView;\n   self.window.rootViewController = rootViewController;\n   [self.window makeKeyAndVisible];\n\n-  return bridge;\n+  [super application:application didFinishLaunchingWithOptions:launchOptions];\n+\n+  return YES;\n }\n\n...\n\n #ifdef DEBUG\n   return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n-  return [[EXUpdatesAppController sharedInstance] launchAssetUrl];\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n }\n\n-- (void)appController:(EXUpdatesAppController *)appController didStartWithSuccess:(BOOL)success\n-{\n-  appController.bridge = [self initializeReactNativeApp];\n-}\n-\n @end\n```\n\n#### `MainApplication.java`\n\n```diff\n-import android.net.Uri;\n-import expo.modules.updates.UpdatesController;\n-import javax.annotation.Nullable;\n-\n public class MainApplication extends Application implements ReactApplication {\n   private final ReactModuleRegistryProvider mModuleRegistryProvider = new ReactModuleRegistryProvider(\n     new BasePackageList().getPackageList(),\n\n...\n\n     protected String getJSMainModuleName() {\n       return \"index\";\n     }\n-\n-    @Override\n-    protected @Nullable String getJSBundleFile() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getJSBundleFile();\n-      } else {\n-        return UpdatesController.getInstance().getLaunchAssetFile();\n-      }\n-    }\n-\n-    @Override\n-    protected @Nullable String getBundleAssetName() {\n-      if (BuildConfig.DEBUG) {\n-        return super.getBundleAssetName();\n-      } else {\n-        return UpdatesController.getInstance().getBundleAssetName();\n-      }\n-    }\n   };\n\n...\n\n   public void onCreate() {\n     super.onCreate();\n     SoLoader.init(this, /* native exopackage */ false);\n-\n-    if (!BuildConfig.DEBUG) {\n-      UpdatesController.initialize(this);\n-    }\n-\n     initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n   }\n }\n```\n\n#### Remove Pods Target EXUpdates (Optional)\n\nIf, after following above steps, your `npm run ios` or `yarn ios` fails and you see `EXUpdates` in logs, follow the steps below:\n\n- Open the iOS directory in Xcode\n- Go to Pods module on right side\n- In the targets, find `EXUpdates`, right click and delete\n","readmeFilename":"README.md"}